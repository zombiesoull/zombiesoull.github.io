<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac环境如何初始化git仓库</title>
    <url>/2020/03/04/Mac%E7%8E%AF%E5%A2%83%E5%A6%82%E4%BD%95%E5%88%9D%E5%A7%8B%E5%8C%96git%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Thu Mar 05 2020 08:15:10 GMT+0800 (中国标准时间) --><h1>Mac环境如何初始化git仓库</h1><h2 id="一、准备工作"><a class="header-anchor" href="#一、准备工作">¶</a>一、准备工作</h2><ul><li><p>本地新建一个文件</p><p><img src="http://i1.fuimg.com/711532/dc4b97f967375df3.png" alt="xinmulu"></p></li><li><p>打开”终端“</p></li></ul><h2 id="二、开始初始化git本地仓库"><a class="header-anchor" href="#二、开始初始化git本地仓库">¶</a>二、开始初始化git本地仓库</h2><h3 id="1-在终端窗口-进入创建好的新目录下-并执行以下命令进行初始化"><a class="header-anchor" href="#1-在终端窗口-进入创建好的新目录下-并执行以下命令进行初始化">¶</a>1.在终端窗口,进入创建好的新目录下,并执行以下命令进行初始化:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 直接将Folder新建的目录拖进来,自动转换为一条绝对路径</span><br><span class="line">git init <span class="comment"># 开始初始化..</span></span><br></pre></td></tr></table></figure><ul><li>如下图,你会看到初始化后,你的目录下,生成了一个 .git 隐藏目录!</li></ul><p><img src="http://i2.tiimg.com/711532/88017e5e8331a953.png" alt="git_init"></p><h2 id="2-给这个git配置用户信息"><a class="header-anchor" href="#2-给这个git配置用户信息">¶</a>2.给这个git配置用户信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name <span class="string">"xxx"</span> <span class="comment"># 随意</span></span><br><span class="line">git config user.email <span class="string">"xxx@xx.com"</span> <span class="comment"># 随意,编一个都行,大概是github出于协同开发的目的,没啥意义</span></span><br></pre></td></tr></table></figure><ul><li>执行完上面的命令,终端没有反应或者响应信息,说明配置成功! 如下图: 打开config文件,就会看到你配置的用户信息</li></ul><p><img src="http://i2.tiimg.com/711532/38299ab3083cb846.png" alt="git_config"></p><h3 id="3-给git配置全局的用户名和邮箱-只要创建了git就一定要配置用户名称与邮箱"><a class="header-anchor" href="#3-给git配置全局的用户名和邮箱-只要创建了git就一定要配置用户名称与邮箱">¶</a>3.给git配置全局的用户名和邮箱(只要创建了git就一定要配置用户名称与邮箱).</h3><ul><li>配置了全局用户信息后,以后如果该文件没有用户名和邮箱,就会使用全局配置的,就近原则而已.</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"XXX"</span></span><br><span class="line">git config --global user.email <span class="string">"XXX@xx.com"</span></span><br></pre></td></tr></table></figure><p>执行完上面的命令,终端没有反应或者响应信息,说明配置成功! 如下图: 确认一下配置是否成功:</p><p><img src="http://i2.tiimg.com/711532/c4ab554735371b50.png" alt="global_config"></p><h3 id="P-S-Mac如何显示隐藏文件，如：-git"><a class="header-anchor" href="#P-S-Mac如何显示隐藏文件，如：-git">¶</a>P.S. Mac如何显示隐藏文件，如： .git</h3><ul><li>1.打开“终端”，根据自己的版本选择命令</li><li>2.早期的OS X（10.6~10.8）系统可以使用如下两条命令来开始或者关闭系统隐藏文件的显示：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles Yes &amp;&amp; killall Finder <span class="comment"># 显示隐藏文件</span></span><br><span class="line">defaults write com.apple.Finder AppleShowAllFiles No &amp;&amp; killall Finder  <span class="comment"># 不显示隐藏文件</span></span><br></pre></td></tr></table></figure><ul><li>3.当升级到OS X 10.9 Mavericks版本之后，这两条命令需要做一些修改，变成了如下命令：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> defaults write com.apple.finder AppleShowAllFiles Yes &amp;&amp; killall Finder <span class="comment"># 显示隐藏文件</span></span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles No &amp;&amp; killall Finder  <span class="comment"># 不显示隐藏文件</span></span><br></pre></td></tr></table></figure><ul><li>快捷键：（本人是笔记本，亲测可用）<br>在 macOS Sierra，可以使用快捷键⌘⇧.(Command + Shift + .) 来快速（在 Finder 中）显示和隐藏隐藏文件了。</li></ul><h3 id="三、测试过程待补充…"><a class="header-anchor" href="#三、测试过程待补充…">¶</a>三、测试过程待补充…</h3><ul><li>初始化本地代码仓库，必须指定用户名和邮箱，否则无法进行提交</li><li>无论是添加文件还是修改原文件，都必须进行<code>git add</code>,当然这只是在使用命令行的时候</li><li>如果使用Xcode来创建文件，Xcode会默认进行 <code>git add</code> 操作，不需要进行<code>git add</code></li></ul><!-- rebuild by neat -->]]></content>
  </entry>
  <entry>
    <title>MySQL问题解决</title>
    <url>/2020/03/03/MySQL%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Thu Mar 05 2020 08:15:10 GMT+0800 (中国标准时间) --><h2 id="今天在构建SpringBOOT时，遇到以下问题："><a class="header-anchor" href="#今天在构建SpringBOOT时，遇到以下问题：">¶</a>今天在构建SpringBOOT时，遇到以下问题：</h2><h3 id="1-java连接MySQL-8-0-数据库需要java应用-显式声明AllowPublicKeyRetrieval-True来获取公钥："><a class="header-anchor" href="#1-java连接MySQL-8-0-数据库需要java应用-显式声明AllowPublicKeyRetrieval-True来获取公钥：">¶</a>1.java连接MySQL 8.0 数据库需要java应用 显式声明AllowPublicKeyRetrieval=True来获取公钥：</h3><ul><li>在使用 MySQL 8.0 时重启应用后提示</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异常日志：</span></span><br><span class="line">`com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed`</span><br></pre></td></tr></table></figure><ul><li>解决办法：应用的yml配置文件中，进行修改：</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="string">url:jdbc:mysql:///leyoucharacterEncoding=UTF8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="string">&amp;allowPublicKeyRetrieval=true</span></span><br></pre></td></tr></table></figure><ul><li>问题原因：</li></ul><p>文档中(<a href="https://mysql-net.github.io/MySqlConnector/connection-options/" target="_blank" rel="noopener">https://mysql-net.github.io/MySqlConnector/connection-options/</a>)给出的解释是：</p><p><img src="http://i1.fuimg.com/711532/650a1b7f642b63b9.png" alt="Markdown"></p><pre><code>	如果用户使用了 sha256_password 认证，密码在传输过程中必须使用 TLS 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；可以在连接中通过 ServerRSAPublicKeyFile 指定服务器的 RSA 公钥，或者AllowPublicKeyRetrieval=True参数以允许客户端从服务器获取公钥；
	但是需要注意的是 AllowPublicKeyRetrieval=True可能会导致恶意的代理通过中间人攻击(MITM)获取到明文密码，所以默认是关闭的，必须显式开启！
	但是后面不加那句配置，却不报错了，应该有缓存的可能，为了保险，以后还是加上最好！
</code></pre><h3 id="2-MySQL-8-0-新版本，项目的驱动包不匹配"><a class="header-anchor" href="#2-MySQL-8-0-新版本，项目的驱动包不匹配">¶</a>2.MySQL 8.0 新版本，项目的驱动包不匹配</h3><ul><li>在使用 MySQL 8.0 时重启应用后提示</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异常日志：</span></span><br><span class="line">Loading class `com.mysql.jdbc.Driver<span class="string">'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'</span>.</span><br></pre></td></tr></table></figure><ul><li>解决办法：应用的yml文件里，更改jdbc连接驱动：</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#    driver-class-name: com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><ul><li>问题原因：</li></ul><p>异常信息表明数据库驱动<code>com.mysql.jdbc.Driver'</code>已经被弃用了、应当使用新的驱动<code>com.mysql.cj.jdbc.Driver'</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bug记录</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>bug</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>BitrhDiray</title>
    <url>/2020/03/02/BirthDiray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Thu Mar 05 2020 08:15:10 GMT+0800 (中国标准时间) --><p>2020.03.01</p><p>搭建hexo+github记录：基于https://www.jianshu.com/p/77db3862595c</p><p>之前在wins下搭建过一次 并不是很美观…</p><p>最近剁手了一台mbp 贼心不死 欲再次祸害这台新成员 hiahia</p><h1>一、命令行记录</h1><h2 id="1-操作之前，日常brew-upgrade"><a class="header-anchor" href="#1-操作之前，日常brew-upgrade">¶</a>1.操作之前，日常brew upgrade</h2><h2 id="2-检查hexo所需环境，即：git-，node-js"><a class="header-anchor" href="#2-检查hexo所需环境，即：git-，node-js">¶</a>2.检查hexo所需环境，即：git ，node.js</h2><p>​	分别为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version    </span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/711532/ce14df2ee1c3045c.png" alt="Markdown"></p><h2 id="3-创建一个126邮箱-zombiesoull-163-com-注册成github账户"><a class="header-anchor" href="#3-创建一个126邮箱-zombiesoull-163-com-注册成github账户">¶</a>3.创建一个126邮箱 <a href="mailto:zombiesoull@163.com">zombiesoull@163.com</a> 注册成github账户</h2><h2 id="4-new-一个-respository"><a class="header-anchor" href="#4-new-一个-respository">¶</a>4.new 一个 respository</h2><p>用来部署hexo项目 注意：仓库名格式：<a href="http://xn--github+github-1p8v876mxlyd.io" target="_blank" rel="noopener">github用户名+github.io</a>	如：<a href="https://github.com/zombiesoull/zombiesoull.github.io" target="_blank" rel="noopener">zombiesoull.github.io</a></p><h2 id="5-返回终端界面"><a class="header-anchor" href="#5-返回终端界面">¶</a>5.返回终端界面</h2><p>开始安装hexo组件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/711532/20dd8331c4f7fe2e.png" alt="Markdown"></p><h2 id="6-在访问窗口进入文稿-创建新文件夹，如：hexo-blog"><a class="header-anchor" href="#6-在访问窗口进入文稿-创建新文件夹，如：hexo-blog">¶</a>6.在访问窗口进入文稿 创建新文件夹，如：hexo-blog</h2><p><img src="http://i2.tiimg.com/711532/453f48373b9e3e25.png" alt="Markdown"></p><h2 id="7-终端-进入该目录，即：站点根目录"><a class="header-anchor" href="#7-终端-进入该目录，即：站点根目录">¶</a>7.终端 进入该目录，即：站点根目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-blog</span><br></pre></td></tr></table></figure><h2 id="8-开始初始化hexo项目，即：hexo部署："><a class="header-anchor" href="#8-开始初始化hexo项目，即：hexo部署：">¶</a>8.开始初始化hexo项目，即：hexo部署：</h2><h3 id="8-1-运行命令-，如图："><a class="header-anchor" href="#8-1-运行命令-，如图：">¶</a>8.1 运行命令 ，如图：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/711532/d314a12b1539558c.png" alt="Markdown"></p><h3 id="8-2-成功界面："><a class="header-anchor" href="#8-2-成功界面：">¶</a>8.2 成功界面：</h3><p><img src="http://i2.tiimg.com/711532/2ce070f661ec8306.png" alt="Markdown"></p><h2 id="9-开启本地服务"><a class="header-anchor" href="#9-开启本地服务">¶</a>9.开启本地服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/711532/cf5f4537b4748ae5.png" alt="Markdown"></p><ul><li>建议：作为初次使用，肯定在后面配置的过程中出现不可控的遗漏甚至错误，至此以后的每次内容、主题修改,，都先试用一下两条命令在本地测试一下！</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"><span class="comment"># 带有debug功能，判断命令执行过程中那一部分出了错，然后再去改</span></span><br><span class="line">hexo g --debug</span><br></pre></td></tr></table></figure><h2 id="10-出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。"><a class="header-anchor" href="#10-出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。">¶</a>10.出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。</h2><p><img src="http://i2.tiimg.com/711532/cf5f4537b4748ae5.png" alt="Markdown"></p><p>至此：说明环境已经没有问题了，成功了搭建起了hexo博客框架</p><p><img src="http://i2.tiimg.com/711532/0dc938650fbca8b4.png" alt="Markdown"></p><h1>二、博客关联到Github仓库</h1><h2 id="1-生成静态页面-上传到之前的github-仓库里"><a class="header-anchor" href="#1-生成静态页面-上传到之前的github-仓库里">¶</a>1.生成静态页面 上传到之前的github 仓库里</h2><ul><li>首先我们要编辑图中_config.yml文件，这是博客的主要配置文件，在下面一部分，我们要频繁使用这个配置文件，这里先编辑一步，为了管理GitHub账号。</li></ul><p><img src="http://i2.tiimg.com/711532/baf1f139edcf53bd.png" alt="Markdown"></p><ul><li>打开文件之后，在文档最后，输入红色大框中的内容，只需要将你的username替换就可以了，其他无需更改。</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/zombiesoull/zombiesoull.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><ul><li>编辑好后：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">esc键</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><ul><li>然后在目录中执行</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 产生静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 部署到GitHub page上</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li><p>然后你需要输入你GitHub的用户名和密码，这样你就就可以使用你的仓库名去访问你的博客主页了。为了每一次部署不必一种输入密码，我们可以生成秘钥，然后提交到GitHub，进行关联，那么你下次就不需要再输入密码了。</p></li><li><p>备注：<br>在部署HEXO时出现	ERROR Deployer not found : github	的问题解决办法：<br>经过调查后才知道HEXO更新到3.0之后，deploy的type 的github需要改成git<br>但是还是不行  出现了 ERROR Deployer not found: git 的错误<br>后来经过调查之后 才知道 需要运行下这个指令才行</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后就可以执行命令部署静态页面了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="2"><a class="header-anchor" href="#2">¶</a>2.</h2><ul><li>基于网址：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;help.github.com&#x2F;en&#x2F;github&#x2F;authenticating-to-github&#x2F;generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</span><br></pre></td></tr></table></figure><ul><li>这一步执行以下命令， <a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key" target="_blank" rel="noopener">生成新的SSH密钥</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用你注册GitHub时的邮箱号，进行秘钥生成</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"xxxxxxx@qq.com"</span></span><br><span class="line"><span class="comment"># 系统就会生成一个隐藏文件夹.ssh</span></span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 复制公钥</span></span><br><span class="line">vim id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>ps:passphrase直接Enter（设置为空）</li></ul><p><img src="http://i2.tiimg.com/711532/62fc303a4267c95d.png" alt="Markdown"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行命令：</span></span><br><span class="line">Zombie-MBP:.ssh apple$ ssh-keygen -t rsa -C <span class="string">"zombiesouls@xxx.com"</span></span><br><span class="line"><span class="comment"># 执行中 ...</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/apple/.ssh/id_rsa): <span class="comment">#回车</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): <span class="comment">#输入密码，可以为空，回车</span></span><br><span class="line">Enter same passphrase again: <span class="comment">#确认密码，可以为空，回车</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/apple/.ssh/id_rsa. <span class="comment">#生成的密钥</span></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/apple/.ssh/id_rsa.pub. <span class="comment">#生成的公钥</span></span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:sfA1CfE4xaUiC/iXh18qp+nq08diwOrbJajV7zo+zxE zombiesouls@126.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|        oo...    |</span></span><br><span class="line"><span class="string">|   .     =.o     |</span></span><br><span class="line"><span class="string">|  . . o = *      |</span></span><br><span class="line"><span class="string">|   . . B * .     |</span></span><br><span class="line"><span class="string">|   .. E S .      |</span></span><br><span class="line"><span class="string">|   oo. + o       |</span></span><br><span class="line"><span class="string">|  o.oo+.+        |</span></span><br><span class="line"><span class="string">| o..+=+*o        |</span></span><br><span class="line"><span class="string">|..o+*@Oo         |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"># 执行完毕：公钥 私钥 见另外目录（/Users/apple/Documents/markdown）</span></span><br><span class="line"><span class="string">Zombie-MBP:.ssh apple$</span></span><br></pre></td></tr></table></figure><ul><li>进入github账户设置/setting，然后点击SSH and GPG keys，创建新的SSH，将之前复制的公钥黏贴，提交，OK。</li><li>进入settings，按照如下图示操作：<br><strong>第一步：</strong><br><img src="http://i2.tiimg.com/711532/234e9d1681dab027.jpg" alt="Markdown"><br><strong>第二步：</strong><br><img src="http://i2.tiimg.com/711532/4346cbe4154993fe.jpg" alt="Markdown"><br><strong>第三步：</strong><br><img src="http://i2.tiimg.com/711532/47e51d6686698257.png" alt="Markdown"></li></ul><h1>三、发布文章&amp;页面优化…</h1><p>持续更新。。</p><p>​</p><p>—————— 21:00 2020.03.01</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo_build</tag>
      </tags>
  </entry>
</search>
