<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mac环境如何初始化git仓库</title>
    <url>/2020/03/03/Mac%E7%8E%AF%E5%A2%83%E5%A6%82%E4%BD%95%E5%88%9D%E5%A7%8B%E5%8C%96git%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Thu Mar 19 2020 10:21:21 GMT+0800 (中国标准时间) --><h2 id="一、准备工作"><a class="header-anchor" href="#一、准备工作">¶</a>一、准备工作</h2><ul><li><p>本地新建一个文件</p><p><img src="http://i1.fuimg.com/711532/dc4b97f967375df3.png" alt="xinmulu"></p></li><li><p>打开”终端“</p></li></ul><h2 id="二、开始初始化git本地仓库"><a class="header-anchor" href="#二、开始初始化git本地仓库">¶</a>二、开始初始化git本地仓库</h2><h3 id="1-在终端窗口-进入创建好的新目录下-并执行以下命令进行初始化"><a class="header-anchor" href="#1-在终端窗口-进入创建好的新目录下-并执行以下命令进行初始化">¶</a>1.在终端窗口,进入创建好的新目录下,并执行以下命令进行初始化:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 直接将Folder新建的目录拖进来,自动转换为一条绝对路径</span><br><span class="line">git init <span class="comment"># 开始初始化..</span></span><br></pre></td></tr></table></figure><ul><li>如下图,你会看到初始化后,你的目录下,生成了一个 .git 隐藏目录!</li></ul><p><img src="http://i2.tiimg.com/711532/88017e5e8331a953.png" alt="git_init"></p><h2 id="2-给这个git配置用户信息"><a class="header-anchor" href="#2-给这个git配置用户信息">¶</a>2.给这个git配置用户信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name <span class="string">"xxx"</span> <span class="comment"># 随意</span></span><br><span class="line">git config user.email <span class="string">"xxx@xx.com"</span> <span class="comment"># 随意,编一个都行,大概是github出于协同开发的目的,没啥意义</span></span><br></pre></td></tr></table></figure><ul><li>执行完上面的命令,终端没有反应或者响应信息,说明配置成功! 如下图: 打开config文件,就会看到你配置的用户信息</li></ul><p><img src="http://i2.tiimg.com/711532/38299ab3083cb846.png" alt="git_config"></p><h3 id="3-给git配置全局的用户名和邮箱-只要创建了git就一定要配置用户名称与邮箱"><a class="header-anchor" href="#3-给git配置全局的用户名和邮箱-只要创建了git就一定要配置用户名称与邮箱">¶</a>3.给git配置全局的用户名和邮箱(只要创建了git就一定要配置用户名称与邮箱).</h3><ul><li>配置了全局用户信息后,以后如果该文件没有用户名和邮箱,就会使用全局配置的,就近原则而已.</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"XXX"</span></span><br><span class="line">git config --global user.email <span class="string">"XXX@xx.com"</span></span><br></pre></td></tr></table></figure><p>执行完上面的命令,终端没有反应或者响应信息,说明配置成功! 如下图: 确认一下配置是否成功:</p><p><img src="http://i2.tiimg.com/711532/c4ab554735371b50.png" alt="global_config"></p><h3 id="P-S-Mac如何显示隐藏文件，如：-git"><a class="header-anchor" href="#P-S-Mac如何显示隐藏文件，如：-git">¶</a>P.S. Mac如何显示隐藏文件，如： .git</h3><ul><li>1.打开“终端”，根据自己的版本选择命令</li><li>2.早期的OS X（10.6~10.8）系统可以使用如下两条命令来开始或者关闭系统隐藏文件的显示：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles Yes &amp;&amp; killall Finder <span class="comment"># 显示隐藏文件</span></span><br><span class="line">defaults write com.apple.Finder AppleShowAllFiles No &amp;&amp; killall Finder  <span class="comment"># 不显示隐藏文件</span></span><br></pre></td></tr></table></figure><ul><li>3.当升级到OS X 10.9 Mavericks版本之后，这两条命令需要做一些修改，变成了如下命令：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles Yes &amp;&amp; killall Finder <span class="comment"># 显示隐藏文件</span></span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles No &amp;&amp; killall Finder  <span class="comment"># 不显示隐藏文件</span></span><br></pre></td></tr></table></figure><ul><li>快捷键：（本人是笔记本，亲测可用）<br>在 macOS Sierra，可以使用快捷键⌘⇧.(Command + Shift + .) 来快速（在 Finder 中）显示和隐藏隐藏文件了。</li></ul><h3 id="三、测试过程待补充…"><a class="header-anchor" href="#三、测试过程待补充…">¶</a>三、测试过程待补充…</h3><ul><li>初始化本地代码仓库，必须指定用户名和邮箱，否则无法进行提交</li><li>无论是添加文件还是修改原文件，都必须进行<code>git add</code>,当然这只是在使用命令行的时候</li><li>如果使用Xcode来创建文件，Xcode会默认进行 <code>git add</code> 操作，不需要进行<code>git add</code></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL问题解决</title>
    <url>/2020/03/03/MySQL%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Thu Mar 19 2020 10:21:21 GMT+0800 (中国标准时间) --><h2 id="今天在构建SpringBOOT时，遇到以下问题："><a class="header-anchor" href="#今天在构建SpringBOOT时，遇到以下问题：">¶</a>今天在构建SpringBOOT时，遇到以下问题：</h2><h3 id="1-java连接MySQL-8-0-数据库需要java应用-显式声明AllowPublicKeyRetrieval-True来获取公钥："><a class="header-anchor" href="#1-java连接MySQL-8-0-数据库需要java应用-显式声明AllowPublicKeyRetrieval-True来获取公钥：">¶</a>1.java连接MySQL 8.0 数据库需要java应用 显式声明AllowPublicKeyRetrieval=True来获取公钥：</h3><ul><li>在使用 MySQL 8.0 时重启应用后提示</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异常日志：</span></span><br><span class="line">`com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed`</span><br></pre></td></tr></table></figure><ul><li>解决办法：应用的yml配置文件中，进行修改：</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="string">url:jdbc:mysql:///leyoucharacterEncoding=UTF8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="string">&amp;allowPublicKeyRetrieval=true</span></span><br></pre></td></tr></table></figure><ul><li>问题原因：</li></ul><p>文档中(<a href="https://mysql-net.github.io/MySqlConnector/connection-options/" target="_blank" rel="noopener">https://mysql-net.github.io/MySqlConnector/connection-options/</a>)给出的解释是：</p><p><img src="http://i1.fuimg.com/711532/650a1b7f642b63b9.png" alt="Markdown"></p><pre><code>	如果用户使用了 sha256_password 认证，密码在传输过程中必须使用 TLS 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；可以在连接中通过 ServerRSAPublicKeyFile 指定服务器的 RSA 公钥，或者AllowPublicKeyRetrieval=True参数以允许客户端从服务器获取公钥；
	但是需要注意的是 AllowPublicKeyRetrieval=True可能会导致恶意的代理通过中间人攻击(MITM)获取到明文密码，所以默认是关闭的，必须显式开启！
	但是后面不加那句配置，却不报错了，应该有缓存的可能，为了保险，以后还是加上最好！
</code></pre><h3 id="2-MySQL-8-0-新版本，项目的驱动包不匹配"><a class="header-anchor" href="#2-MySQL-8-0-新版本，项目的驱动包不匹配">¶</a>2.MySQL 8.0 新版本，项目的驱动包不匹配</h3><ul><li>在使用 MySQL 8.0 时重启应用后提示</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异常日志：</span></span><br><span class="line">Loading class `com.mysql.jdbc.Driver<span class="string">'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'</span>.</span><br></pre></td></tr></table></figure><ul><li>解决办法：应用的yml文件里，更改jdbc连接驱动：</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#    driver-class-name: com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><ul><li>问题原因：</li></ul><p>异常信息表明数据库驱动<code>com.mysql.jdbc.Driver'</code>已经被弃用了、应当使用新的驱动<code>com.mysql.cj.jdbc.Driver'</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bug记录</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>bug</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>BitrhDiray</title>
    <url>/2020/03/02/BirthDiray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Thu Mar 19 2020 10:21:21 GMT+0800 (中国标准时间) --><a id="more"></a><p>2020.03.01</p><p>搭建hexo+github记录：基于https://www.jianshu.com/p/77db3862595c</p><p>之前在wins下搭建过一次 并不是很美观…</p><p>最近剁手了一台mbp 贼心不死 欲再次祸害这台新成员 hiahia</p><h1>一、命令行记录</h1><h2 id="1-操作之前，日常brew-upgrade"><a class="header-anchor" href="#1-操作之前，日常brew-upgrade">¶</a>1.操作之前，日常brew upgrade</h2><h2 id="2-检查hexo所需环境，即：git-，node-js"><a class="header-anchor" href="#2-检查hexo所需环境，即：git-，node-js">¶</a>2.检查hexo所需环境，即：git ，node.js</h2><p>​	分别为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version    </span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/711532/ce14df2ee1c3045c.png" alt="Markdown"></p><h2 id="3-创建一个126邮箱-zombiesoull-163-com-注册成github账户"><a class="header-anchor" href="#3-创建一个126邮箱-zombiesoull-163-com-注册成github账户">¶</a>3.创建一个126邮箱 <a href="mailto:zombiesoull@163.com">zombiesoull@163.com</a> 注册成github账户</h2><h2 id="4-new-一个-respository"><a class="header-anchor" href="#4-new-一个-respository">¶</a>4.new 一个 respository</h2><p>用来部署hexo项目 注意：仓库名格式：<a href="http://xn--github+github-1p8v876mxlyd.io" target="_blank" rel="noopener">github用户名+github.io</a>	如：<a href="https://github.com/zombiesoull/zombiesoull.github.io" target="_blank" rel="noopener">zombiesoull.github.io</a></p><h2 id="5-返回终端界面"><a class="header-anchor" href="#5-返回终端界面">¶</a>5.返回终端界面</h2><p>开始安装hexo组件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/711532/20dd8331c4f7fe2e.png" alt="Markdown"></p><h2 id="6-在访问窗口进入文稿-创建新文件夹，如：hexo-blog"><a class="header-anchor" href="#6-在访问窗口进入文稿-创建新文件夹，如：hexo-blog">¶</a>6.在访问窗口进入文稿 创建新文件夹，如：hexo-blog</h2><p><img src="http://i2.tiimg.com/711532/453f48373b9e3e25.png" alt="Markdown"></p><h2 id="7-终端-进入该目录，即：站点根目录"><a class="header-anchor" href="#7-终端-进入该目录，即：站点根目录">¶</a>7.终端 进入该目录，即：站点根目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-blog</span><br></pre></td></tr></table></figure><h2 id="8-开始初始化hexo项目，即：hexo部署："><a class="header-anchor" href="#8-开始初始化hexo项目，即：hexo部署：">¶</a>8.开始初始化hexo项目，即：hexo部署：</h2><h3 id="8-1-运行命令-，如图："><a class="header-anchor" href="#8-1-运行命令-，如图：">¶</a>8.1 运行命令 ，如图：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/711532/d314a12b1539558c.png" alt="Markdown"></p><h3 id="8-2-成功界面："><a class="header-anchor" href="#8-2-成功界面：">¶</a>8.2 成功界面：</h3><p><img src="http://i2.tiimg.com/711532/2ce070f661ec8306.png" alt="Markdown"></p><h2 id="9-开启本地服务"><a class="header-anchor" href="#9-开启本地服务">¶</a>9.开启本地服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="http://i2.tiimg.com/711532/cf5f4537b4748ae5.png" alt="Markdown"></p><ul><li>建议：作为初次使用，肯定在后面配置的过程中出现不可控的遗漏甚至错误，至此以后的每次内容、主题修改,，都先试用一下两条命令在本地测试一下！</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"><span class="comment"># 带有debug功能，判断命令执行过程中那一部分出了错，然后再去改</span></span><br><span class="line">hexo g --debug</span><br></pre></td></tr></table></figure><h2 id="10-出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。"><a class="header-anchor" href="#10-出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。">¶</a>10.出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。</h2><p><img src="http://i2.tiimg.com/711532/cf5f4537b4748ae5.png" alt="Markdown"></p><p>至此：说明环境已经没有问题了，成功了搭建起了hexo博客框架</p><p><img src="http://i2.tiimg.com/711532/0dc938650fbca8b4.png" alt="Markdown"></p><h1>二、博客关联到Github仓库</h1><h2 id="1-生成静态页面-上传到之前的github-仓库里"><a class="header-anchor" href="#1-生成静态页面-上传到之前的github-仓库里">¶</a>1.生成静态页面 上传到之前的github 仓库里</h2><ul><li>首先我们要编辑图中_config.yml文件，这是博客的主要配置文件，在下面一部分，我们要频繁使用这个配置文件，这里先编辑一步，为了管理GitHub账号。</li></ul><p><img src="http://i2.tiimg.com/711532/baf1f139edcf53bd.png" alt="Markdown"></p><ul><li>打开文件之后，在文档最后，输入红色大框中的内容，只需要将你的username替换就可以了，其他无需更改。</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/zombiesoull/zombiesoull.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><ul><li>编辑好后：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">esc键</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><ul><li>然后在目录中执行</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 产生静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 部署到GitHub page上</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li><p>然后你需要输入你GitHub的用户名和密码，这样你就就可以使用你的仓库名去访问你的博客主页了。为了每一次部署不必一种输入密码，我们可以生成秘钥，然后提交到GitHub，进行关联，那么你下次就不需要再输入密码了。</p></li><li><p>备注：<br>在部署HEXO时出现	ERROR Deployer not found : github	的问题解决办法：<br>经过调查后才知道HEXO更新到3.0之后，deploy的type 的github需要改成git<br>但是还是不行  出现了 ERROR Deployer not found: git 的错误<br>后来经过调查之后 才知道 需要运行下这个指令才行</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后就可以执行命令部署静态页面了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="2"><a class="header-anchor" href="#2">¶</a>2.</h2><ul><li>基于网址：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;help.github.com&#x2F;en&#x2F;github&#x2F;authenticating-to-github&#x2F;generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</span><br></pre></td></tr></table></figure><ul><li>这一步执行以下命令， <a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key" target="_blank" rel="noopener">生成新的SSH密钥</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用你注册GitHub时的邮箱号，进行秘钥生成</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"xxxxxxx@qq.com"</span></span><br><span class="line"><span class="comment"># 系统就会生成一个隐藏文件夹.ssh</span></span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 复制公钥</span></span><br><span class="line">vim id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>ps:passphrase直接Enter（设置为空）</li></ul><p><img src="http://i2.tiimg.com/711532/62fc303a4267c95d.png" alt="Markdown"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行命令：</span></span><br><span class="line">Zombie-MBP:.ssh apple$ ssh-keygen -t rsa -C <span class="string">"zombiesouls@xxx.com"</span></span><br><span class="line"><span class="comment"># 执行中 ...</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/apple/.ssh/id_rsa): <span class="comment">#回车</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): <span class="comment">#输入密码，可以为空，回车</span></span><br><span class="line">Enter same passphrase again: <span class="comment">#确认密码，可以为空，回车</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/apple/.ssh/id_rsa. <span class="comment">#生成的密钥</span></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/apple/.ssh/id_rsa.pub. <span class="comment">#生成的公钥</span></span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:sfA1CfE4xaUiC/iXh18qp+nq08diwOrbJajV7zo+zxE zombiesouls@126.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|        oo...    |</span></span><br><span class="line"><span class="string">|   .     =.o     |</span></span><br><span class="line"><span class="string">|  . . o = *      |</span></span><br><span class="line"><span class="string">|   . . B * .     |</span></span><br><span class="line"><span class="string">|   .. E S .      |</span></span><br><span class="line"><span class="string">|   oo. + o       |</span></span><br><span class="line"><span class="string">|  o.oo+.+        |</span></span><br><span class="line"><span class="string">| o..+=+*o        |</span></span><br><span class="line"><span class="string">|..o+*@Oo         |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"># 执行完毕：公钥 私钥 见另外目录（/Users/apple/Documents/markdown）</span></span><br><span class="line"><span class="string">Zombie-MBP:.ssh apple$</span></span><br></pre></td></tr></table></figure><ul><li>进入github账户设置/setting，然后点击SSH and GPG keys，创建新的SSH，将之前复制的公钥黏贴，提交，OK。</li><li>进入settings，按照如下图示操作：<br><strong>第一步：</strong><br><img src="http://i2.tiimg.com/711532/234e9d1681dab027.jpg" alt="Markdown"><br><strong>第二步：</strong><br><img src="http://i2.tiimg.com/711532/4346cbe4154993fe.jpg" alt="Markdown"><br><strong>第三步：</strong><br><img src="http://i2.tiimg.com/711532/47e51d6686698257.png" alt="Markdown"></li></ul><h1>三、发布文章&amp;页面优化…</h1><p>持续更新。。</p><p>​</p><p>—————— 21:00 2020.03.01</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo_build</tag>
      </tags>
  </entry>
  <entry>
    <title>struts1/struts2/springMVC对比</title>
    <url>/2019/12/03/struts1:struts2:springMVC%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Thu Mar 19 2020 10:21:21 GMT+0800 (中国标准时间) --><ul><li><p>最近做项目用到了struts2，之前一直是用struts1和springMVC。感觉到了struts2从很大程度上和这两个还是有很大区别的，所以今天搜集了些资料，给他们做一下对比。</p></li><li><p>Struts1官方已经停止更新，现在用的也比较少，这里主要记录一下struts2和struts1比较都有哪些不同和进步。</p></li><li><p>Struts2可以说 不是完全从struts1改进来的，因为struts2原本就是举世闻名的Webwork2，在经历几年的发展之后，struts和WebWork社区决定合二 为一，也就是今天的struts2.</p></li></ul><h2 id="Struts2与struts1比较的新特性："><a class="header-anchor" href="#Struts2与struts1比较的新特性：">¶</a>Struts2与struts1比较的新特性：</h2><h3 id="Action-类"><a class="header-anchor" href="#Action-类">¶</a>Action 类:</h3><p>• Struts1要求Action类继承一个抽象基类。Struts1的一个普遍问题是使用抽象类编程而不是接口。</p><p>• Struts 2 Action类可以实现一个Action接口，也可实现其他接口，使可选和定制的服务成为可能。Struts2提供一个ActionSupport基类去 实现常用的接口。Action接口不是必须的，任何有execute标识的POJO对象都可以用作Struts2的Action对象。</p><h3 id="线程模式"><a class="header-anchor" href="#线程模式">¶</a>线程模式:</h3><p>• Struts1 Action是单例模式并且必须是线程安全的，因为仅有Action的一个实例来处理所有的请求。单例策略限制了Struts1 Action能作的事，并且要在开发时特别小心。Action资源必须是线程安全的或同步的。</p><p>• Struts2 Action对象为每一个请求产生一个实例，因此没有线程安全问题。（实际上，servlet容器给每个请求产生许多可丢弃的对象，并且不会导致性能和垃圾回收问题）</p><h3 id="Servlet-依赖"><a class="header-anchor" href="#Servlet-依赖">¶</a>Servlet 依赖:</h3><p>• Struts1 Action 依赖于ServletAPI ,因为当一个Action被调用时HttpServletRequest 和 HttpServletResponse 被传递给execute方法。</p><p>• Struts 2 Action不依赖于容器，允许Action脱离容器单独被测试。如果需要，Struts2 Action仍然可以访问初始的request和response。但是，其他的元素减少或者消除了直接访问 HttpServetRequest 和 HttpServletResponse的必要性。</p><h3 id="可测性"><a class="header-anchor" href="#可测性">¶</a>可测性:</h3><p>• 测试Struts1Action的一个主要问题是execute方法暴露了servlet API（这使得测试要依赖于容器）。一个第三方扩展－－Struts TestCase－－提供了一套Struts1的模拟对象（来进行测试）。</p><p>• Struts 2 Action可以通过初始化、设置属性、调用方法来测试，“依赖注入”支持也使测试更容易。</p><h3 id="捕获输入"><a class="header-anchor" href="#捕获输入">¶</a>捕获输入:</h3><p>• Struts1 使用ActionForm对象捕获输入。所有的 ActionForm必须继承一个基类。因为其他JavaBean不能用作ActionForm，开发者经常创建多余的类捕获输入。动态 Bean（DynaBeans）可以作为创建传统ActionForm的选择，但是，开发者可能是在重新描述(创建)已经存在的JavaBean（仍然会 导致有冗余的javabean）。</p><p>• Struts 2直接使用Action属性作为输入属性，消除了对第二个输入对象的需求。输入属性可能是有自己(子)属性的rich对象类型。Action属性能够通过 web页面上的taglibs访问。Struts2也支持ActionForm模式。rich对象类型，包括业务对象，能够用作输入/输出对象。这种 ModelDriven 特性简化了taglib对POJO输入对象的引用。</p><h3 id="表达式语言："><a class="header-anchor" href="#表达式语言：">¶</a>表达式语言：</h3><p>• Struts1 整合了JSTL，因此使用JSTL EL。这种EL有基本对象图遍历，但是对集合和索引属性的支持很弱。</p><p>• Struts2可以使用JSTL，但是也支持一个更强大和灵活的表达式语言－－“Object Graph Notation Language” (OGNL).</p><h3 id="绑定值到页面（view）"><a class="header-anchor" href="#绑定值到页面（view）">¶</a>绑定值到页面（view）:</h3><p>• Struts 1使用标准JSP机制把对象绑定到页面中来访问。</p><p>• Struts 2 使用 &quot;ValueStack&quot;技术，使taglib能够访问值而不需要把你的页面（view）和对象绑定起来。ValueStack策略允许通过一系列名称相同但类型不同的属性重用页面（view）。</p><h3 id="类型转换："><a class="header-anchor" href="#类型转换：">¶</a>类型转换：</h3><p>• Struts 1 ActionForm 属性通常都是String类型。Struts1使用Commons-Beanutils进行类型转换。每个类一个转换器，对每一个实例来说是不可配置的。</p><p>• Struts2 使用OGNL进行类型转换。提供基本和常用对象的转换器。</p><h3 id="校验："><a class="header-anchor" href="#校验：">¶</a>校验：</h3><p>• Struts 1支持在ActionForm的validate方法中手动校验，或者通过Commons Validator的扩展来校验。同一个类可以有不同的校验内容，但不能校验子对象。</p><p>• Struts2支持通过validate方法和XWork校验框架来进行校验。XWork校验框架使用为属性类类型定义的校验和内容校验，来支持chain校验子属性</p><h3 id="Action执行的控制："><a class="header-anchor" href="#Action执行的控制：">¶</a>Action执行的控制：</h3><p>• Struts1支持每一个模块有单独的Request Processors（生命周期），但是模块中的所有Action必须共享相同的生命周期。</p><p>• Struts2支持通过拦截器堆栈（Interceptor Stacks）为每一个Action创建不同的生命周期。堆栈能够根据需要和不同的Action一起使用。</p><h2 id="SpringMVC与Struts2的比较："><a class="header-anchor" href="#SpringMVC与Struts2的比较：">¶</a>SpringMVC与Struts2的比较：</h2><h3 id="机制："><a class="header-anchor" href="#机制：">¶</a>机制：</h3><p>spring mvc的入口是servlet，而struts2是filter（这里要指出，filter和servlet是不同的。以前认为filter是servlet的一种特殊），这样就导致了二者的机制不同，这里就牵涉到servlet和filter的区别了。</p><h3 id="性能："><a class="header-anchor" href="#性能：">¶</a>性能：</h3><p>spring会稍微比struts快。spring mvc是基于方法的设计，而sturts是基于类，每次发一次请求都会实例一个action，每个action都会被注入属性，而spring基于方法， 粒度更细，但要小心把握像在servlet控制数据一样。spring3 mvc是方法级别的拦截，拦截到方法后根据参数上的注解，把request数据注入进去，在spring3 mvc中，一个方法对应一个request上下文。而struts2框架是类级别的拦截，每次来了请求就创建一个Action，然后调用setter getter方法把request中的数据注入；struts2实际上是通过setter getter方法与request打交道的；struts2中，一个Action对象对应一个request上下文。</p><h3 id="参数传递："><a class="header-anchor" href="#参数传递：">¶</a>参数传递：</h3><p>struts是在接受参数的时候，可以用属性来接受参数，这就说明参数是让多个方法共享的。</p><h3 id="设计思想上："><a class="header-anchor" href="#设计思想上：">¶</a>设计思想上：</h3><p>struts更加符合oop的编程思想， spring就比较谨慎，在servlet上扩展。</p><h3 id="intercepter的实现机制："><a class="header-anchor" href="#intercepter的实现机制：">¶</a>intercepter的实现机制：</h3><p>有以自己的interceptor机制，spring mvc用的是独立的AOP方式。这样导致struts的配置文件量还是比spring mvc大，虽然struts的配置能继承，所以我觉得论使用上来讲，spring mvc使用更加简洁，开发效率Spring MVC确实比struts2高。spring mvc是方法级别的拦截，一个方法对应一个request上下文，而方法同时又跟一个url对应，所以说从架构本身上spring3 mvc就容易实现restful url。struts2是类级别的拦截，一个类对应一个request上下文；实现restful url要费劲，因为struts2 action的一个方法可以对应一个url；而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了。spring3mvc的方法之间 基本上独立的，独享request response数据，请求数据通过参数获取，处理结果通过ModelMap交回给框架方法之间不共享变量，而struts2搞的就比较乱，虽然方法之间 也是独立的，但其所有Action变量是共享的，这不会影响程序运行，却给我们编码，读程序时带来麻烦。</p><h2 id="感受："><a class="header-anchor" href="#感受：">¶</a>感受：</h2><ul><li><p>struts1目前已经很少再用，但在我曾服务过的项目中,以struts1/2为基础的也有.</p></li><li><p>个人感觉springMVC在易用性上要优于struts1/2.</p><p>struts1/2 和 springMVC在性能方面是不分伯仲，每个阵营都有自己的测试数据，从我目前的编程经验来看,很难说(maybe.我没资格说)哪一个更优秀。</p></li><li><p>以上资料部分摘自网络，尊重原作者版权，分享给更多的读者。</p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>FrameWork</tag>
        <tag>Struts1</tag>
        <tag>Struts2</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis关于@Param的学习</title>
    <url>/2019/07/06/MyBatis%E5%85%B3%E4%BA%8E@Param%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Thu Mar 19 2020 10:21:21 GMT+0800 (中国标准时间) --><h1>一、MyBatis关于@Param的学习:</h1><p><strong>__ @Param 注解的四种使用场景，最后一种经常被人忽略！</strong></p><p>如下几个需要添加 @Param 注解的场景，相信大家都已经有共识了：</p><h2 id="第一种：方法有多个参数，需要-Param-注解"><a class="header-anchor" href="#第一种：方法有多个参数，需要-Param-注解">¶</a>第一种：方法有多个参数，需要 @Param 注解</h2><p>例如下面这样：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">insert</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username, @<span class="title">Param</span><span class="params">(<span class="string">"address"</span>)</span> String address)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 XML 文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    insert into user (username,address) values (#&#123;username&#125; , #&#123;address&#125; ) ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是最常见的需要添加 @Param 注解的场景。</p><h2 id="第二种：方法参数要取别名，需要-Param-注解"><a class="header-anchor" href="#第二种：方法参数要取别名，需要-Param-注解">¶</a>第二种：方法参数要取别名，需要 @Param 注解</h2><p>当需要给参数取一个别名的时候，我们也需要 @Param 注解，例如方法定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUserByUsername</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 XML 定义如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByUsername"</span> <span class="attr">parameterType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    select * from user where username=#&#123;name&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>老实说，这种需求不多，费事。</p><h2 id="第三种：XML-中的-SQL-使用了-，那么参数中也需要-Param-注解"><a class="header-anchor" href="#第三种：XML-中的-SQL-使用了-，那么参数中也需要-Param-注解">¶</a>第三种：XML 中的 SQL 使用了 $ ，那么参数中也需要 @Param 注解</h2><p><strong>$</strong> 会有注入漏洞的问题，但是有的时候你不得不使用**$** 符号，例如要传入列名或者表名的时候，这个时候必须要添加 @Param 注解，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">(@Param(<span class="string">"order_by"</span>)</span>String order_by)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 XML 定义如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllUsers"</span> <span class="attr">resultType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"order_by!=null and order_by!=''"</span>&gt;</span></span><br><span class="line">        order by $&#123;order_by&#125; desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面这三种，都很容易懂，相信很多小伙伴也都懂，除了这三种常见的场景之外，还有一个特殊的场景，经常被人忽略。</p><h2 id="第四种：那就是动态-SQL-，如果在动态-SQL-中使用了参数作为变量，那么也需要-Param-注解，即使你只有一个参数。"><a class="header-anchor" href="#第四种：那就是动态-SQL-，如果在动态-SQL-中使用了参数作为变量，那么也需要-Param-注解，即使你只有一个参数。">¶</a>第四种：那就是动态 SQL ，如果在动态 SQL 中使用了参数作为变量，那么也需要 @Param 注解，即使你只有一个参数。</h2><p>如果我们在动态 SQL 中用到了 参数作为判断条件，那么也是一定要加 @Param 注解的，例如如下方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义出来的 SQL 如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况，即使只有一个参数，也需要添加 @Param 注解，而这种情况却经常被人忽略！</p><h2 id="另外：传递多个参数-不使用-Param-注解"><a class="header-anchor" href="#另外：传递多个参数-不使用-Param-注解">¶</a>另外：传递多个参数,不使用 @Param 注解</h2><p>其实从第一种场景中已经可以实现传递多个参数了，<strong>即把多个参数封装到一个 javaBean 中</strong>就可以实现了，但是如果是两个或者多个 javaBean 的时候，可以通过使用@Param注解的方式来实现，但是需要把每个 javaBean 中的属性全部拆分出来，这样就增加了巨大的代码量，因此不推荐这么做<br>那么有没有可以不使用@Param注解，同样也可以传递多个参数(尤其是多个 javaBean)呢?</p><p>答案是有的，封装到HashMap集合中,废话不多说，直接上代码</p><p>同上，这里只贴出关键部分：</p><ul><li>DAO 层</li><li>UserInfoDAO.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	搜索用户,对结果进行分页</span></span><br><span class="line"><span class="function">List <span class="title">searchUser</span><span class="params">(Map&lt;String,Object&gt;)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>调用DAO</li><li>UserService.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">Pagination page = <span class="keyword">new</span> Pagination();</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;;</span><br><span class="line">map.put(<span class="string">"userInfo"</span>,userInfo);</span><br><span class="line">pam.put(<span class="string">"page"</span>,page);</span><br><span class="line">userInfoDao.searchUser(map);</span><br></pre></td></tr></table></figure><ul><li>mapper文件userInfomapper.xml</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;select id="searchUser" parameterType="java.util.Map" resultType="UserInfo"&gt;</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> t_userinfo <span class="keyword">user</span> </span><br><span class="line">    <span class="keyword">where</span> <span class="number">1</span> =<span class="number">1</span></span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"user.uname != null and ''!= user.uname "</span>&gt;</span><br><span class="line">        <span class="keyword">and</span> user.uname <span class="keyword">like</span> <span class="string">'%$&#123;userInfo.uname&#125;$%'</span></span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"page.order != null and page.order == 10"</span> &gt;</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> user.id <span class="keyword">asc</span></span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    <span class="keyword">limit</span> $&#123;page.pagenum * page.limitnum&#125;, <span class="comment">#&#123;page.limitnum&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>Mybatis无论是传单个参数，还是传递多个参数，没有必要使用@Param注解啊<br>使用@param 注解增添了不少代码不说，还容易导致错误，尤其是在 mapper 文件中（paraterType 属性）</li></ul><h1>二、源码分析：There is no getter for property named ‘XXX’ in 'class java.lang.String</h1><p><strong>There is no getter for property named ‘XXX’ in ‘class java.lang.String’，</strong></p><p><strong>此错误之所以出现，是因为 mybatis 在对 parameterType=“String” 的sql语句做了限制，假如你使用 &lt;when test=&quot; username != null &quot;&gt; 这样的条件判断时，就会出现该错误，不过今天我们来刨根问底一下</strong>。</p><h2 id="一、错误再现"><a class="header-anchor" href="#一、错误再现">¶</a>一、错误再现</h2><p>想要追本溯源，就需要错误再现，那么假设我们有这样一个sql查询：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getRiskMember"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectMember"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and safetylevel &gt; 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>parameterType=“String”，这一点是必须得，参数类型必须是 String。</p></li><li><p>该sql对应的mapper class中对应的方法为<code>List&lt;Member&gt; getRiskMember(String username);</code>，也就是说，传递的参数名为<strong>username</strong>，正常情况下，这样的配置合情合理。</p></li><li><p><code>&lt;when test=&quot; username != null &quot;&gt;</code>，你有一个对应的 <strong>test</strong> 判断语句，也可能是 <strong>if</strong>。</p></li><li><p>那么这个时候，项目运行该查询语句时，就会抛出<code>There is no getter for property named 'username' in 'class java.lang.String'</code>错误！</p></li></ul><h2 id="二、解决办法"><a class="header-anchor" href="#二、解决办法">¶</a>二、解决办法</h2><p>当然了，如果你没有时间来看源码分析实例的话，我想先告诉你解决办法，免得你被问题困扰。</p><p>解决办法很简单，有两种解决方式：</p><p>方式一：你只需要把 <code>&lt;when test= &quot; username != null&quot;&gt;</code>修改为 <code>&lt;when test= &quot; _parameter != null&quot;&gt;</code> 就好了，其他地方不需要改动（也就是说<code>and username = #{username}</code><strong>不需要</strong>改动为<code>and username = #{ _parameter }</code>），修改后的sql语句如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getRiskMember"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectMember"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and safetylevel &gt; 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：该sql对应的mapper class中对应的方法代码：<code>List&lt;Member&gt; getRiskMember(String username);</code> 在方法参数：<code>String username</code>左边添加注解：<code>@Param(&quot;username&quot;)</code></p><h2 id="三、源码分析"><a class="header-anchor" href="#三、源码分析">¶</a>三、源码分析</h2><p>当然了，如果你有时间的话，看一看源码分析，或者自己动手尝试一下，我相信你一定会大有所获！</p><h3 id="①、准备源码包"><a class="header-anchor" href="#①、准备源码包">¶</a>①、准备源码包</h3><ul><li><code>mybatis-3.2.3-sources.jar</code></li><li><code>mybatis-spring-1.2.2-sources.jar</code></li></ul><p>当然了，你项目中对应的lib包也是相应的版本。</p><p>然后，我们把对应的源码进行反编译，生成对应的source，使用的工具是jd-gui.exe。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0finxrmj30dl05b74c.jpg" alt="这里写图片描述"></p><p>紧接着，我们来看看如何关联源码包，见下图：</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0r63oslj30dq04nglv.jpg" alt="这里写图片描述"></p><p>我已经加载好了，如果是首次的话，可点击edit，在弹出的提示框中选择上一步保存的zip文件。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0rc6drxj30gq099gm2.jpg" alt="这里写图片描述"></p><h3 id="②、测试用例"><a class="header-anchor" href="#②、测试用例">¶</a>②、测试用例</h3><p>准备好源码包后，我们来写一个测试用例，直接main方法就可以，当然了项目不同，方法自然不同，简单的如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	SpringUtils.getSpringContext();</span><br><span class="line">	MemberMapper mapper = SpringUtils.getBeansByClassType(MemberMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	mapper.getRiskMember(<span class="string">"00010001"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>mapper.getRiskMember(&quot;00010001&quot;);</code>这行打上断点。</p><h3 id="③、debug调试"><a class="header-anchor" href="#③、debug调试">¶</a>③、debug调试</h3><p>直接运行main方法，在断点处<strong>F5</strong>，进入到<strong>MapperProxy.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Object<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">  <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以尾随debug进入到<strong>MapperMethod.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">Object <span class="title">executeForMany</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">  List&lt;E&gt; result;</span><br><span class="line">  Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">  <span class="keyword">if</span> (method.hasRowBounds()) &#123;</span><br><span class="line">    RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class="line">    result = sqlSession.&lt;E&gt;selectList(command.getName(), param, rowBounds);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = sqlSession.&lt;E&gt;selectList(command.getName(), param);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// issue #510 Collections &amp; arrays support</span></span><br><span class="line">  <span class="keyword">if</span> (!method.getReturnType().isAssignableFrom(result.getClass())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.getReturnType().isArray()) &#123;</span><br><span class="line">      <span class="keyword">return</span> convertToArray(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> convertToDeclaredCollection(sqlSession.getConfiguration(), result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到该方法后，可以一直调试到<code>result = sqlSession.&lt;E&gt;selectList(command.getName(), param);</code>该行代码。此时，你需要按住ctrl键，同时点击鼠标左键，见下图：<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0rjz034j30ev03874d.jpg" alt="这里写图片描述"></p><p>在弹出框中选择<strong>open implementation</strong>，然后进入到<strong>DefaultSqlSession.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.selectList(statement, parameter, RowBounds.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>return this.selectList</code>行上打上断点，然后按F8快捷键进入到该方法继续调试，（限于篇幅，省略步骤，后续文章中使用…代替）、直到你进入到<strong>CachingExecutor.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  BoundSql boundSql = ms.getBoundSql(parameterObject);</span><br><span class="line">  CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class="line">  <span class="keyword">return</span> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>tips： 猫腻就在<code>BoundSql boundSql = ms.getBoundSql(parameterObject);</code>这行代码的执行过程中。</li></ul><p>（…）</p><p>（省略步骤，个人调试过程中请注意。）</p><p>直到你进入到<strong>DynamicContext.java</strong>类时</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DynamicContext</span><span class="params">(Configuration configuration, Object parameterObject)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (parameterObject != <span class="keyword">null</span> &amp;&amp; !(parameterObject <span class="keyword">instanceof</span> Map)) &#123;</span><br><span class="line">    MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">    bindings = <span class="keyword">new</span> ContextMap(metaObject);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bindings = <span class="keyword">new</span> ContextMap(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  bindings.put(PARAMETER_OBJECT_KEY, parameterObject);</span><br><span class="line">  bindings.put(DATABASE_ID_KEY, configuration.getDatabaseId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，你不妨wait a moment，翻看一下该类的整体代码，你会发现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PARAMETER_OBJECT_KEY = <span class="string">"_parameter"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_ID_KEY = <span class="string">"_databaseId"</span>;</span><br></pre></td></tr></table></figure><p>这里有两个常量，当然了，但看此处，也许你会发现<code>&quot;_parameter&quot;</code>这个关键字，但这时还说明不了什么，你且记住<code>bindings.put(PARAMETER_OBJECT_KEY, parameterObject);</code>，同时对<code>ContextMap bindings</code>对象留有一点印象。</p><p><strong>key1</strong>：_parameter</p><p>（…）</p><p>（省略步骤，个人调试过程中请注意。）</p><p>然后，我们进入<strong>MixedSqlNode.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (SqlNode sqlNode : contents) &#123;</span><br><span class="line">    sqlNode.apply(context);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该apply方法就非常有意思了，xml里配置的sql语句，会通过该方法转换为标准的sql（称之为标准，是值这形成的sql语句就是能够执行预处理sql查询的字符串），你不妨慢一点执行该循环语句。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0rpab7wj30ke09gwfe.jpg" alt="这里写图片描述"></p><p>第二次循环的时候，你就可以看到sql的雏形了，那么请继续。</p><p>（…）</p><p>（省略步骤，个人调试过程中请注意。）</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0rx7b2wj30f503o3ym.jpg" alt="这里写图片描述"></p><p>直到你发现，<strong>sqlNode的类型为ChooseSqlNode</strong>，此时，你是否已经能联想到以下内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事情开始变得明朗起来，真好。</p><p>（…）</p><p>（省略步骤，个人调试过程中请注意。）</p><p>继续调试，直到你进入到<strong>ExpressionEvaluator.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">evaluateBoolean</span><span class="params">(String expression, Object parameterObject)</span> </span>&#123;</span><br><span class="line">  Object value = OgnlCache.getValue(expression, parameterObject);</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Boolean) <span class="keyword">return</span> (Boolean) value;</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Number) <span class="keyword">return</span> !<span class="keyword">new</span> BigDecimal(String.valueOf(value)).equals(BigDecimal.ZERO);</span><br><span class="line">  <span class="keyword">return</span> value != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>expression的值为<code>username != null</code></li><li>parameterObject的值为<code>{_parameter=00010001, _databaseId=null}</code></li><li>以上两个参数之间好像有点关系，但离源泉处还差那么几步，请继续。</li></ol><p>紧接着，我们进入到<strong>OgnlCache.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(String expression, Object root)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Ognl.getValue(parseExpression(expression), root);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (OgnlException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">"Error evaluating expression '"</span> + expression + <span class="string">"'. Cause: "</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到<strong>OgnlCache.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">parseExpression</span><span class="params">(String expression)</span> <span class="keyword">throws</span> OgnlException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Node node = expressionCache.get(expression);</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">      node = <span class="keyword">new</span> OgnlParser(<span class="keyword">new</span> StringReader(expression)).topLevelExpression();</span><br><span class="line">      expressionCache.put(expression, node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExpressionSyntaxException(expression, e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (TokenMgrError e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExpressionSyntaxException(expression, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>key2</strong>：</p><ol><li><code>parseExpression(expression)</code>的类型为Node，其值为<code>username != null</code>。</li><li>root的类型为<code>DynamicContext$ContextMap (id=41)</code>，其值为<code>{_parameter=00010001, _databaseId=null}</code></li></ol><p>（…）</p><p>（省略步骤，个人调试过程中请注意。）</p><p>当再继续执行的话，就回到了<strong>DefaultSqlSession.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">    List&lt;E&gt; result = executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error querying database.  Cause: "</span> + e, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时错误已经抛出了，见下图</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0s0tvv8j30lv04g3ys.jpg" alt="这里写图片描述"></p><p>到了这，异常是找到怎么抛出了，但整体看上来，好像又缺点什么，没错，由于eclipse中无法再看到<code>Ognl.getValue(parseExpression(expression), root);</code>，所以就会造成困扰，我们通过反编译工具，可以看到getValue方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(Object tree, Object root)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> OgnlException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getValue(tree, root, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(Object tree, Map context, Object root)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> OgnlException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getValue(tree, context, root, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(Object tree, Map context, Object root, Class resultType)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> OgnlException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  OgnlContext ognlContext = (OgnlContext)addDefaultContext(root, context);</span><br><span class="line"></span><br><span class="line">  Object result = ((Node)tree).getValue(ognlContext, root);</span><br><span class="line">  <span class="keyword">if</span> (resultType != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = getTypeConverter(context).convertValue(context, root, <span class="keyword">null</span>, <span class="keyword">null</span>, result, resultType);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时再结合key2给出的内容，</p><p>我们可以知道，要在<code>{_parameter=00010001, _databaseId=null}</code>匹配到<strong>porperty</strong>为<code>username</code>的值是不可能的啦，这样的话，程序就会抛出<code>org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'username' in 'class java.lang.String'</code>错误了！</p><h1>三、关于Mybatis的Mapper中多参数方法不使用@param注解报错的问题</h1><h2 id="一、本文摘要"><a class="header-anchor" href="#一、本文摘要">¶</a>一、本文摘要</h2><p>在使用低版本的Mybatis的时候，Mapper中的方法如果有多个参数时需要使用@param注解，才能在对应xml的sql语句中使用参数名称获取传入方法的参数值，否则就会报错。</p><p>本文结合自身在真实开发环境中使用IDEA开发时遇到的问题来共同探讨一下不使用@Param注解报错背后的原因以及解决方案。</p><h2 id="二、问题描述"><a class="header-anchor" href="#二、问题描述">¶</a>二、问题描述</h2><p>最近使用IDEA进行开发，项目使用SpringBoot+Mybatis3.4.6，同样的代码检出到本地IDEA后运行，在一个业务查询模块报错，后台打印日志如下：<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0s6g546j319406774p.jpg" alt="在这里插入图片描述"><br>mybatis出现该错误的原因分析：我们正在调用一个具有多参数的mapper接口方法，对这个方法的调用其实是对mapper对应的xml中的一个sql的调用，并且我们在这个sql语句中使用#{方法参数名称}的方式构建动态SQL，但是要想在sql语句中使用参数名称获取参数值那么需要对mapper接口对应方法的每一个参数使用@Param注解，Param注解非常简单，源代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Param &#123;</span><br><span class="line">  <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它只有一个value属性，这里的value就等于mapper对应的xml文件中获取参数值时要使用的key。于是我找到了对应报错的代码发现正是因为多参数方法没有使用@Param注解，在我加上该注解后便没有错误了。<br>到这里事情看上去好像已经解决了,但是并没有这么简单，我查看了很多mapper发现，有很多具有多个参数的mapper方法都没有使用这个注解，按照这种修改方式，我岂不是要把几乎所有的mapper都修改一遍，并且我是刚刚检出的最新代码，代码不应该有问题才对，于是询问同事发现他们在自己的IDEA运行时并没有我这个错误，所以说并不是@Param注解的问题。</p><h2 id="三、寻求解决方案"><a class="header-anchor" href="#三、寻求解决方案">¶</a>三、寻求解决方案</h2><p>同样的代码，在不同的机器上运行出现了不同的结果，那么肯定有什么不一样的地方，首先JDK都一样，系统环境也一样，运行方式也一样，下来就是运行环境IDEA，那么IDEA是否有区别呢？询问同事发现他们用的是比较新的版本2019.2.3，而我用的是2018.2.2版本，所以初步怀疑是IDEA的版本问题，但是好像按理来说不应该是IDEA的问题，真正运行JAVA字节码的是本地的JRE环境，貌似和IDEA关系不大，但是这是目前唯一的线索，无论如何都要试一下。于是我下载了最新版本的IDEA，然后导入代码，运行，结果发现竟然真的没有报错！这时候问题虽然解决了，但是为什么会这样，背后的原因是什么，和IDEA版本有什么关系呢？这些问题如鲠在喉，让我茶不思，饭不想…</p><h2 id="四、寻找原因"><a class="header-anchor" href="#四、寻找原因">¶</a>四、寻找原因</h2><p>当一个问题无法知道背后的真正原因时，那么就算解决了也只是暂时的。为了寻求真正的答案，我决定使用调试代码的方式看一下mybatis执行查询过程中是如何处理mapper接口方法的参数名称的，最终找到了<strong>org.apache.ibatis.reflection.ParamNameResolver</strong>这个类，看类名就可以知道这是处理参数名称的类，主要逻辑集中在它的构造方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ParamNameResolver</span><span class="params">(Configuration config, Method method)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line">  <span class="keyword">final</span> Annotation[][] paramAnnotations = method.getParameterAnnotations();</span><br><span class="line">  <span class="keyword">final</span> SortedMap&lt;Integer, String&gt; map = <span class="keyword">new</span> TreeMap&lt;Integer, String&gt;();</span><br><span class="line">  <span class="keyword">int</span> paramCount = paramAnnotations.length;</span><br><span class="line">  <span class="comment">// get names from @Param annotations</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> paramIndex = <span class="number">0</span>; paramIndex &lt; paramCount; paramIndex++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isSpecialParameter(paramTypes[paramIndex])) &#123;</span><br><span class="line">      <span class="comment">// skip special parameters</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String name = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Annotation annotation : paramAnnotations[paramIndex]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Param) &#123;</span><br><span class="line">        hasParamAnnotation = <span class="keyword">true</span>;</span><br><span class="line">        name = ((Param) annotation).value();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// @Param was not specified.</span></span><br><span class="line">      <span class="keyword">if</span> (config.isUseActualParamName()) &#123;</span><br><span class="line">        name = getActualParamName(method, paramIndex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// use the parameter index as the name ("0", "1", ...)</span></span><br><span class="line">        <span class="comment">// gcode issue #71</span></span><br><span class="line">        name = String.valueOf(map.size());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(paramIndex, name);</span><br><span class="line">  &#125;</span><br><span class="line">  names = Collections.unmodifiableSortedMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来分析一下主要逻辑，首先看到的是需要获取Param注解中的Value值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (Annotation annotation : paramAnnotations[paramIndex]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Param) &#123;</span><br><span class="line">        hasParamAnnotation = <span class="keyword">true</span>;</span><br><span class="line">        name = ((Param) annotation).value();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的name变量就是后面构造动态sql时，用于获取方法参数值的key，也就是你在xml文件中通过#{ }的方式获取动态参数时的参数key。接下来看到的代码是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// @Param was not specified.</span></span><br><span class="line">    <span class="keyword">if</span> (config.isUseActualParamName()) &#123;</span><br><span class="line">        name = getActualParamName(method, paramIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// use the parameter index as the name ("0", "1", ...)</span></span><br><span class="line">        <span class="comment">// gcode issue #71</span></span><br><span class="line">        name = String.valueOf(map.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到再次判断name是否为null，如果为null则判断config.isUseActualParamName()是否为true，如果是true则通过getActualParamName(method, paramIndex)方法获取name，这些都执行完成如果name还是null，那么就是最后的逻辑： name = String.valueOf(map.size())；也就是说name等于当前方法参数的位置（“0”, “1”, …），源码的注释也说明了这一点：</p><blockquote><p>use the parameter index as the name (“0”, “1”, …)</p></blockquote><p>那么getActualParamName(method, paramIndex)方法获取name是什么逻辑呢？接下来继续看：<br>首先要进入这个方法的前提是config.isUseActualParamName()为true：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUseActualParamName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> useActualParamName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>config其实是mybatis的配置对象，这里面的配置项目可以影响mybatis的行为，具体配置项目可以从mybatis官方文档查询，这里我们就看一下<strong>useActualParamName</strong>参数的含义，<a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">官方文档</a> 是这样描述的：</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>useActualParamName</td><td>允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）</td><td>true 或者 false</td><td>true</td></tr></tbody></table><p>所以说这个属性其实就是允许我们使用mapper接口方法的参数名称当作sql语句的参数名称，而且也不需要@Param注解，这个属性默认是开启的，使用这个特性还有以下几个要求：</p><blockquote><p>①采用 Java 8 编译。<br>②编译时加上-parameters 选项。<br>③mybatis在3.4.1以上</p></blockquote><p>到这里基本上可以确定真正的原因了，首先我和同事的JDK都是1.8，Mybatis的版本在文章开头也说过了是3.4.6，所以只剩下-parameters选项，</p><p>所以我怀疑是低版本的IDEA没有这个选项，高版本的IDEA在编译时可能默认加了这个选项。于是对比两个版本的编译设置如下：</p><p><strong>①老版本(2018.2.2)：</strong><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0sl1fz3j313u0qbwi9.jpg" alt="在这里插入图片描述"><br><strong>②新版本(2019.2.3)：</strong><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0sq9w24j30z30ofdja.jpg" alt="在这里插入图片描述"></p><p>果然如我们所料，新版本的IDEA编译设置里面默认添加了-parameters选项，</p><p>所以在mybatis的配置项<strong>useActualParamName</strong>为<strong>true</strong>的时候，对于多参数的mapper接口方法，可以不使用@Param注解，</p><p>而在低版本的IDEA时并没有添加这个选项，所以会出错。</p><h2 id="另外：java反射获取参数名，idea如何开启-parameters"><a class="header-anchor" href="#另外：java反射获取参数名，idea如何开启-parameters">¶</a>另外：java反射获取参数名，idea如何开启 -parameters</h2><p>在8以前的jdk版本的时候，我们利用反射只能获取到参数类型，然后参数名字都是利用<code>arg0 , arg1 , arg2...</code>所以在使用一些反射编程方面上不是很方便， jdk8 开始开辟了这项function，但是我们正常情况下使用 JVM 不会默认保留参数名字，因为这个可能导致class文件过大或其他问题，所以我们如果需要可以自行开启，下面说下老版本idea怎么开启parameters</p><blockquote><ol><li><code>File -&gt; Settings -&gt; Build,Execution,Deployment- &gt; Compiler -&gt; Java Compiler</code></li></ol></blockquote><blockquote><ol start="2"><li>在 <code>Additional command line parameters</code> : 后面填上 <code>-parameters</code> ，如下图</li></ol></blockquote><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0sugsjuj30ux0g5q3v.jpg" alt="img"></p><blockquote><p>3 . 填好后，再将项目重新<code>build</code>一下，如下图</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0sxnw5ej30of08ft99.jpg" alt="img"></p><blockquote><p>ok了</p></blockquote><h2 id="五、拓展延伸"><a class="header-anchor" href="#五、拓展延伸">¶</a>五、拓展延伸</h2><p>在Java8之前，JAVA代码编译为class文件后，方法参数的类型固定，但是参数名称会丢失，所以当通过反射去获取方法参数名称的时候是不能够得到原本源代码中的参数名称的，Java编译器会丢掉这部分信息。从JDK1.8开始可以通过在编译时添加-parameters这个选项来明确告诉编译器我们需要保留方法参数的原本名称。</p><blockquote><p>那么为什么不默认开启这个选项呢？可能是为了避免因为保留参数名而导致class文件过大或者占用更多的内存，又或者是有些参数可能会泄露安全信息吧。</p></blockquote><p>最后我们亲自来写一段代码验证一下 <strong>-parameters</strong> 这个选项的作用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Method[] methods = Main<span class="class">.<span class="keyword">class</span>.<span class="title">getMethods</span>()</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method method:methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"parameterMethodTest"</span>.equals(method.getName()))&#123;</span><br><span class="line">                Parameter[] parameters = method.getParameters();</span><br><span class="line">                <span class="keyword">for</span> (Parameter parameter:parameters) &#123;</span><br><span class="line">                    System.out.println(parameter.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parameterMethodTest</span><span class="params">(<span class="keyword">int</span> parameterOne,String parameterTwo,Object parameterThree)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上这段代码中，通过反射获取parameterMethodTest的三个参数名称并打印出来，首先我们在IDEA的编译设置中去掉-parameters选项，运行结果如下：<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0t1yq8sj30bt04nt8l.jpg" alt="在这里插入图片描述"><br>可以看到这个时候参数名称变成了arg0,arg1…<br>加上-parameters选项后，再运行结果如下：<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0uwgmn7j30bj04q0sn.jpg" alt="在这里插入图片描述"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>FrameWork</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_doesn&#39;t_have_a_default_value</title>
    <url>/2018/07/17/MySQL_doesn&#39;t_have_a_default_value/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Thu Mar 19 2020 10:21:21 GMT+0800 (中国标准时间) --><h2 id="一、问题描述"><a class="header-anchor" href="#一、问题描述">¶</a>一、问题描述</h2><p>在往数据库写入数据的时候，报错：</p><p><img src="http://i2.tiimg.com/711532/09d3242b253e5217.png" alt="notnull"></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Field <span class="string">'字段名'</span> doesn<span class="string">'t have a default value</span></span><br></pre></td></tr></table></figure><p>本来这个错误是经常见到的，无非就是字段没有设置默认值造成的。奇怪的是，我这边报错的字段，其类型是text类型。众所周知的，text类型是不能有默认值的。如此一来就有了矛盾，text类型的字段明明不能有默认值，那么为什么还会给我报错，提示缺少默认值呢？</p><h2 id="二、问题所在"><a class="header-anchor" href="#二、问题所在">¶</a>二、问题所在</h2><p><strong>1、查看字段类型</strong></p><p>通过phpmyadmin查看数据表的字段结构，发现text字段在创建的时候，语法为：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//创建字段abstract为text类型，默认为not null</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`表名`</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">`abstract`</span>  <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span>  <span class="keyword">after</span> <span class="string">`content`</span>;</span><br></pre></td></tr></table></figure><p>这个创建语句乍一看没有问题，但是如果text类型既没有默认值，也不能为null的话，那么插入的时候，肯定是会出现问题的。</p><p><strong>2、解决方案</strong></p><p>按照上面的推测逻辑，重新修改字段属性：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//这里修改abstart字段的类型为text类型，去掉了not null</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`表名`</span> <span class="keyword">modify</span> <span class="keyword">COLUMN</span> <span class="string">`abstract`</span>  <span class="built_in">text</span>;</span><br></pre></td></tr></table></figure><p>然后进行测试，发现写入数据成功。此时查看phpmyadmin的数据表结构，发现此时字段的默认值为null了。果然是not null的问题，问题是，创建数据表的时候，尽量设置字段为not null已经成为共识。。虽然解决了问题，但博主还是不太理解原理是什么。</p><p>关于mysql默认值和设置not null的问题，</p><p>参考博客：<br><a href="https://blog.csdn.net/LJFPHP/article/details/80452686" target="_blank" rel="noopener">关于mysql设置varchar 字段的默认值”和null的区别，以及varchar和char的区别</a></p><h2 id="三、为什么会报错"><a class="header-anchor" href="#三、为什么会报错">¶</a>三、为什么会报错</h2><p><strong>1、第一个原因</strong></p><p>通过一顿百度，终于在百度知道上看到这句话：</p><h2 id="如果是not-null的话，那你就必须插入一个值，你不插入值的话，就会调用默认值。-如果这两个都没有的话，就会报错了。"><a class="header-anchor" href="#如果是not-null的话，那你就必须插入一个值，你不插入值的话，就会调用默认值。-如果这两个都没有的话，就会报错了。">¶</a>如果是not null的话，那你就必须插入一个值，你不插入值的话，就会调用默认值。 如果这两个都没有的话，就会报错了。</h2><p>这个意思就和咱们最开始推测的差不多，字段类型既是 not null，而且还没默认值，那么在写入数据的时候肯定是有问题的。就像我们平时看到的，在创建字段并且不设置默认值的时候，mysql都会默认给字段加上默认值null。</p><p><strong>2、第二个原因</strong></p><p>这个原因就是数据库的严格模式的问题。在mysql 5.7之后，数据库默认都是采用严格模式。</p><p>关于严格模式的解释：<br><a href="https://blog.csdn.net/LJFPHP/article/details/80435289" target="_blank" rel="noopener">mysql给字段设置默认值，以及mysql的严格模式</a></p><p>关于严格模式这个，我并没有测试，个人感觉还是建表时候不够严谨造成的问题。关于设置字段默认值和设置not null方面不熟悉造成的。</p><h2 id="四、总结"><a class="header-anchor" href="#四、总结">¶</a>四、总结</h2><p><strong>1、</strong><br>如果字段为int 或者varchar类型，那么要设置字段类型为 not null 并且设置default</p><p><strong>2、</strong><br>如果字段为text,则既不需要设置not null,也不需要手动设置default 的值</p><p><strong>3、</strong><br>关于text字段不能有默认值的问题，这个只针对于手动增加的default属性，如果创建字段不设置default的话，mysql会默认加上一个默认值<code>Null</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bug记录</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>bug</tag>
        <tag>database</tag>
      </tags>
  </entry>
</search>
