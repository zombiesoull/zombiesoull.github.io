<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>项目问题记录：多事务之间产生幻读</title>
    <url>/2022/12/27/OpenFeign%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5&amp;%E4%B8%AD%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><p>关于：最初引入OpenFeign解决了之前的RPC调接口的繁琐，后来经过一系列调研,最终本文提供了集成OpenFeign的最佳实践和中高级用法。</p><h1>OpenFeign最佳实践&amp;中高级用法</h1><blockquote><p>调用一个open api的可能问题：</p><p>1、open api参数化，不同环境不同地址，是否支持load balance？<br>已将不同环境下的服务实例注册至对应的注册中心，注册中心地址可通过配置或配置中心实现；<br>2、选择一个合适的http client（需要考虑连接超时、读超时和连接池、失败处理策略等涉及到可用性、稳定性和性能的参数）；<br>3、请求参数、包括不限制于cookie、header、body的解析或映射（Mapping）；<br>4、响应结果，包括不限于是否支持自定义序列化、原序列化机制等；<br>5、需要对请求/响应做相对统一的加/解签或加/解密；<br>6、需要透视出原生请求/响应以排查或定位问题，或在线debug能力；<br>7、有潜在的实时监控需求，比如qps/rt/成功失败率等；<br>8、调用出错后异常处理机制，比如能不能注册一个异常处理callback等等</p><p>本文将以上问题作为视角，来调研OpenFeign的最佳实现和中高级用法。</p></blockquote><p>在阅读官方文档并基于原有的工程配置进行了编码实践后，总结用法如下：</p><blockquote><p><a href="https://docs.spring.io/spring-cloud-openfeign/docs/3.0.7/reference/html/" target="_blank" rel="noopener">spring-cloud-openfeign(v3.0.7)官方文档</a></p></blockquote><h2 id="一-Open-Feign-配置方式总结"><a class="header-anchor" href="#一-Open-Feign-配置方式总结">¶</a>一. Open Feign 配置方式总结</h2><ul><li><p>OpenFeign默认提供了全局配置类：<code>org.springframework.cloud.openfeign.FeignClientsConfiguration</code>。但同时支持多种配置方式。</p></li><li><p><a href="https://docs.spring.io/spring-cloud-openfeign/docs/3.0.7/reference/html/#spring-cloud-feign-overriding-defaults" target="_blank" rel="noopener">OpenFeign配置优先级</a>：</p></li></ul><blockquote><p>If we create both <code>@Configuration</code> bean and configuration properties, configuration properties will win. It will override <code>@Configuration</code> values. But if you want to change the priority to <code>@Configuration</code>, you can change <code>feign.client.default-to-properties</code> to <code>false</code>.</p></blockquote><p>经测试，<strong>局部文件配置&gt; 全局默认文件配置 &gt; 局部注解配置 &gt; 全局默认注解配置</strong></p><p>当<code>feign.client.default-to-properties=true</code>时</p><p><code>java config</code> 和<code>application.properties(.yml)</code> 配置，优先级由低到高进行单个配置覆盖</p><p>（1）<code>FeignClientsConfiguration</code> OpenFeign默认提供的全局配置类</p><p>（2）<code>@EnableFeignClients#defaultConfiguration</code> 指定默认全局配置类</p><p>（3）<code>FeignClient#configuration</code> 指定Feign接口局部配置</p><p>（4）<code>application.properties(.yml)</code> 配置文件全局默认配置（属性名：<code>feign.client.config.default.xxx</code>）</p><p>（5）<code>application.properties(.yml)</code> 配置文件局部配置 （属性名：<code>feign.client.config.xxxName.xxx</code>）指定<code>@FeignClient#name</code>局部配置</p><ul><li><p><code>java config</code> 和<code>application.properties(.yml)</code> 配置方式模板：</p><p>（1）<code>application.properties(.yml)</code>：</p><p>​ 某个feignName相关的FeignClient配置或全局默认配置</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># feign default config</span></span><br><span class="line"><span class="meta">feign.client.config.default.connect-timeout</span>=<span class="string">3000</span></span><br><span class="line"><span class="meta">feign.client.config.default.read-timeout</span>=<span class="string">2000</span></span><br><span class="line"><span class="meta">feign.client.config.default.follow-redirects</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># specified feign client config</span></span><br><span class="line"><span class="meta">feign.client.config.xxx.connect-timeout</span>=<span class="string">1000</span></span><br><span class="line"><span class="meta">feign.client.config.xxx.read-timeout</span>=<span class="string">1000</span></span><br><span class="line"><span class="meta">feign.client.config.xxx.loggerLevel</span>=<span class="string">full</span></span><br><span class="line"><span class="meta">feign.client.config.xxx.decode404</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>（2）<code>java config</code></p><blockquote><p>指定Feign接口局部配置：注解标注后生效：<code>@FeignClient( configuration = FeignClientAConfig.class )</code></p><p>Note:</p><p><code>FeignClientAConfig</code>作为局部配置类，不需要使用<code>@Configuration</code>注解标注。</p><p>否则包含了该配置将会使配置的<code>feign.Decoder</code>、<code>feign.Encoder</code>、<code>feign.Contract</code>等Bean变成全局配置。</p><p>可以通过将<code>FeignClientAConfig</code>放到一个非<code>org.springframework.context.annotation.ComponentScan#basePackages</code>和<code>@SpringBootApplication</code>的包下；</p><p>或者明确的在<code>org.springframework.context.annotation.ComponentScan#excludeFilters</code>中排除。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zombie.auth.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Feign;</span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> feign.Target;</span><br><span class="line"><span class="keyword">import</span> feign.auth.BasicAuthRequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.CircuitBreakerNameResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Scope;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FeignClientA配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignClientAConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * NONE    不打日志，默认值</span></span><br><span class="line"><span class="comment">	 * BASIC   只记录 method、url、响应码，执行时间</span></span><br><span class="line"><span class="comment">	 * HEADERS 只记录请求和响应的 header</span></span><br><span class="line"><span class="comment">	 * FULL    全部都记录</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> feign.Logger.Level</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Feign全局启用熔断器时，若要指定的FeignClient禁用Spring Cloud CircuitBreaker拦截，请创建一个Feign.Builder，设置scope是多例模式</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> feign.Feign.Builder</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line">	<span class="keyword">public</span> Feign.<span class="function">Builder <span class="title">feignBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Feign.builder();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"$&#123;spring.application.name&#125;"</span>, contextId = <span class="string">"fooClientA"</span>, url = <span class="string">"$&#123;url&#125;"</span>,</span><br><span class="line">		path = <span class="string">"/xxx"</span>, configuration = FeignClientAConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">FooClientA</span> </span>&#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><h2 id="二-Feign-Client-局部配置最佳实践"><a class="header-anchor" href="#二-Feign-Client-局部配置最佳实践">¶</a>二. Feign Client 局部配置最佳实践</h2><h3 id="1-同一个服务注册多个FeignClient时，使用-FeignClient-contextId属性来声明当前FeignClient"><a class="header-anchor" href="#1-同一个服务注册多个FeignClient时，使用-FeignClient-contextId属性来声明当前FeignClient">¶</a>1. 同一个服务注册多个FeignClient时，使用<code>@FeignClient#contextId</code>属性来声明当前FeignClient</h3><p>FeignClient注册时，默认以name作为当前Feign接口的BeanName，但我们常常会基于业务领域为一个服务注册多个FeignClient到Spring容器中。此时就需要用<code>@FeignClient#contextId</code>属性来声明当前FeignClient，否则在注册FeignClient时，会出现BeanDefinitionOverrideException：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 场景1：多个FeignClient#name重复(都使用了占位符)且未指定contextId时，若指定了配置类，则注册该FeignClient的配置信息时报错</span><br><span class="line">Caused by: org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name &#39;$&#123;spring.application.name&#125;.FeignClientSpecification&#39; defined in null: Cannot register bean definition [Generic bean: class [org.springframework.cloud.openfeign.FeignClientSpecification]; scope&#x3D;; abstract&#x3D;false; lazyInit&#x3D;null; autowireMode&#x3D;0; dependencyCheck&#x3D;0; autowireCandidate&#x3D;true; primary&#x3D;false; factoryBeanName&#x3D;null; factoryMethodName&#x3D;null; initMethodName&#x3D;null; destroyMethodName&#x3D;null] for bean &#39;$&#123;spring.application.name&#125;.FeignClientSpecification&#39;: There is already [Generic bean: class [org.springframework.cloud.openfeign.FeignClientSpecification]; scope&#x3D;; abstract&#x3D;false; lazyInit&#x3D;null; autowireMode&#x3D;0; dependencyCheck&#x3D;0; autowireCandidate&#x3D;true; primary&#x3D;false; factoryBeanName&#x3D;null; factoryMethodName&#x3D;null; initMethodName&#x3D;null; destroyMethodName&#x3D;null] bound.</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(DefaultListableBeanFactory.java:1004)</span><br><span class="line">	at org.springframework.cloud.openfeign.FeignClientsRegistrar.registerClientConfiguration(FeignClientsRegistrar.java:413)</span><br><span class="line">	at org.springframework.cloud.openfeign.FeignClientsRegistrar.registerFeignClients(FeignClientsRegistrar.java:200)</span><br><span class="line">	at org.springframework.cloud.openfeign.FeignClientsRegistrar.registerBeanDefinitions(FeignClientsRegistrar.java:151)</span><br><span class="line">	at org.springframework.context.annotation.ImportBeanDefinitionRegistrar.registerBeanDefinitions(ImportBeanDefinitionRegistrar.java:86)</span><br><span class="line">	</span><br><span class="line"># 场景2：多个FeignClient#name重复(硬编码为服务注册的名称)且未指定contextId时，若指定了配置类，则注册该FeignClient的配置信息时报错</span><br><span class="line"></span><br><span class="line">Application failed to start due to an exception</span><br><span class="line">org.springframework.beans.factory.support.BeanDefinitionOverrideException: Invalid bean definition with name &#39;zombie-auth-local.FeignClientSpecification&#39; defined in null: Cannot register bean definition [Generic bean: class [org.springframework.cloud.openfeign.FeignClientSpecification]; scope&#x3D;; abstract&#x3D;false; lazyInit&#x3D;null; autowireMode&#x3D;0; dependencyCheck&#x3D;0; autowireCandidate&#x3D;true; primary&#x3D;false; factoryBeanName&#x3D;null; factoryMethodName&#x3D;null; initMethodName&#x3D;null; destroyMethodName&#x3D;null] for bean &#39;zombie-auth-local.FeignClientSpecification&#39;: There is already [Generic bean: class [org.springframework.cloud.openfeign.FeignClientSpecification]; scope&#x3D;; abstract&#x3D;false; lazyInit&#x3D;null; autowireMode&#x3D;0; dependencyCheck&#x3D;0; autowireCandidate&#x3D;true; primary&#x3D;false; factoryBeanName&#x3D;null; factoryMethodName&#x3D;null; initMethodName&#x3D;null; destroyMethodName&#x3D;null] bound.</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.registerBeanDefinition(DefaultListableBeanFactory.java:1004)</span><br><span class="line">	at org.springframework.cloud.openfeign.FeignClientsRegistrar.registerClientConfiguration(FeignClientsRegistrar.java:413)</span><br><span class="line">	at org.springframework.cloud.openfeign.FeignClientsRegistrar.registerFeignClients(FeignClientsRegistrar.java:200)</span><br><span class="line">	at org.springframework.cloud.openfeign.FeignClientsRegistrar.registerBeanDefinitions(FeignClientsRegistrar.java:151)</span><br><span class="line">	at org.springframework.context.annotation.ImportBeanDefinitionRegistrar.registerBeanDefinitions(ImportBeanDefinitionRegistrar.java:86)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.lambda$loadBeanDefinitionsFromRegistrars$1(ConfigurationClassBeanDefinitionReader.java:396)</span><br><span class="line">	at java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsFromRegistrars(ConfigurationClassBeanDefinitionReader.java:395)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:157)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)</span><br><span class="line">	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)</span><br><span class="line">	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)</span><br><span class="line">	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)</span><br><span class="line">	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:448)</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:339)</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1365)</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)</span><br><span class="line">	at com.alibaba.damo.zombie.auth.Application.main(Application.java:26)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at com.taobao.pandora.boot.loader.LaunchRunner.run(LaunchRunner.java:38)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line"></span><br><span class="line"># 场景3：多个FeignClient#name重复且未指定contextId时，注册该FeignClient实例时报错</span><br><span class="line">java.lang.IllegalStateException: Cannot define alias &#39;zombie-auth-localFeignClient&#39; for name &#39;com.alibaba.damo.zombie.auth.client.SasEndpointsClient&#39;: It is already registered for name &#39;com.alibaba.damo.zombie.auth.client.FooClientA&#39;.</span><br><span class="line">	at org.springframework.core.SimpleAliasRegistry.registerAlias(SimpleAliasRegistry.java:72)</span><br><span class="line">	at org.springframework.beans.factory.support.BeanDefinitionReaderUtils.registerBeanDefinition(BeanDefinitionReaderUtils.java:170)</span><br><span class="line">	at org.springframework.cloud.openfeign.FeignClientsRegistrar.registerFeignClient(FeignClientsRegistrar.java:256)</span><br><span class="line">	at org.springframework.cloud.openfeign.FeignClientsRegistrar.registerFeignClients(FeignClientsRegistrar.java:202)</span><br><span class="line">	at org.springframework.cloud.openfeign.FeignClientsRegistrar.registerBeanDefinitions(FeignClientsRegistrar.java:151)</span><br><span class="line">	at org.springframework.context.annotation.ImportBeanDefinitionRegistrar.registerBeanDefinitions(ImportBeanDefinitionRegistrar.java:86)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.lambda$loadBeanDefinitionsFromRegistrars$1(ConfigurationClassBeanDefinitionReader.java:396)</span><br><span class="line">	at java.util.LinkedHashMap.forEach(LinkedHashMap.java:684)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsFromRegistrars(ConfigurationClassBeanDefinitionReader.java:395)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitionsForConfigurationClass(ConfigurationClassBeanDefinitionReader.java:157)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader.loadBeanDefinitions(ConfigurationClassBeanDefinitionReader.java:129)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:343)</span><br><span class="line">	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:247)</span><br><span class="line">	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:311)</span><br><span class="line">	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:112)</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:746)</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:564)</span><br><span class="line">	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)</span><br><span class="line">	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)</span><br><span class="line">	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:448)</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:339)</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1365)</span><br><span class="line">	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1354)</span><br><span class="line">	at com.alibaba.damo.zombie.auth.Application.main(Application.java:26)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at com.taobao.pandora.boot.loader.LaunchRunner.run(LaunchRunner.java:38)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure><blockquote><p>官方解释：</p><p>Using <code>contextId</code> attribute of the <code>@FeignClient</code> annotation in addition to changing the name of the <code>ApplicationContext</code> ensemble, it will override the alias of the client name and it will be used as part of the name of the configuration bean created for that client.</p><p>感兴趣可阅读源码：</p><ul><li><code>org.springframework.cloud.openfeign.FeignClientsRegistrar#registerFeignClients</code></li><li><code>org.springframework.cloud.openfeign.FeignClientsRegistrar#getClientName</code></li><li><code>contextId</code>在<code>Feign Client</code>的作用，在注册FeignClient Configuration的时候需要一个名称，名称是通过<code>org.springframework.cloud.openfeign.FeignClientsRegistrar#getClientName</code>方法获取的。<br><code>getClientName</code>方法可以看到，如果<code>@FeignClient注解</code>配置了<code>contextId</code>就会用<code>contextId</code>，如果没有配置就会取<code>value</code>，然后是<code>name</code>，最后是<code>serviceId</code>。默认都没有配置，当出现一个服务有多个Feign Client的时候就会报错了。其次的作用是在注册FeignClient中，<code>contextId</code>会作为FeignClient 别名的一部分，如果配置了<code>qualifier</code>优先用<code>qualifier</code>作为别名。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"$&#123;xxx&#125;"</span>, contextId = <span class="string">"fooClientA"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FooClientA</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"$&#123;xxx&#125;"</span>, contextId = <span class="string">"fooClientB"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FooClientB</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/xxx"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> FooClientA fooClientA;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> FooClientB fooClientB;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/msgTest"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">msgTest</span><span class="params">(@RequestParam(<span class="string">"request_id"</span>)</span> String requestId, @RequestParam String msg) </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> CallResult&lt;Object&gt; resultA = fooClientA.msgA(requestId, msg);</span><br><span class="line">		log.info(<span class="string">"fooClientA.msgA: &#123;&#125;"</span>, JSON.toJSONString(resultA));</span><br><span class="line">		<span class="keyword">final</span> CallResult&lt;Object&gt; resultB = fooClientB.msgB(requestId, msg);</span><br><span class="line">		log.info(<span class="string">"fooClientB.msgB: &#123;&#125;"</span>, JSON.toJSONString(resultB));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><h3 id="2-FeignClient注解支持占位符，避免重复硬编码"><a class="header-anchor" href="#2-FeignClient注解支持占位符，避免重复硬编码">¶</a>2. FeignClient注解支持占位符，避免重复硬编码</h3><blockquote><p>官方解释：</p><p>Placeholders are supported in the <code>name</code> and <code>url</code> attributes.</p><p>感兴趣可阅读源码：</p><ul><li><code>org.springframework.cloud.openfeign.FeignClientsRegistrar#resolve</code>方法用来解析注解属性值中的占位符</li><li>如下图，<code>resolve</code> 方法会被 <code>getName</code>、<code>getContextId</code>、<code>getUrl</code>、<code>getPath</code> 四个方法调用，所以 <code>value、name、contextId、url、path、serviceId</code> 都是支持占位符的。</li></ul><p><img src="https://gitee.com/zombiesouls/markdown_img_repo/raw/master/img/image-20221227170912162.png" alt="image-20221227170912162"></p></blockquote><h3 id="3-使用org-springframework-cloud-openfeign-SpringQueryMap注解来标注FeignClient接口的GET方法中复杂类型或Map集合类型的请求参数"><a class="header-anchor" href="#3-使用org-springframework-cloud-openfeign-SpringQueryMap注解来标注FeignClient接口的GET方法中复杂类型或Map集合类型的请求参数">¶</a>3. 使用<code>org.springframework.cloud.openfeign.SpringQueryMap</code>注解来标注FeignClient接口的GET方法中复杂类型或Map集合类型的请求参数</h3><blockquote><p>官方解释：</p><h3 id="Feign-QueryMap-support"><a class="header-anchor" href="#Feign-QueryMap-support">¶</a><a href="https://docs.spring.io/spring-cloud-openfeign/docs/3.0.7/reference/html/#feign-querymap-support" target="_blank" rel="noopener">Feign @QueryMap support</a></h3><p>The OpenFeign <code>@QueryMap</code> annotation provides support for POJOs to be used as GET parameter maps. Unfortunately, the default OpenFeign QueryMap annotation is incompatible with Spring because it lacks a <code>value</code> property.</p><p>Spring Cloud OpenFeign provides an equivalent <code>@SpringQueryMap</code> annotation, which is used to annotate a POJO or Map parameter as a query parameter map.</p><p>经测试：</p><p>（1）参考<code>feign.ReflectiveFeign.BuildTemplateByResolvingArgs#addQueryMapQueryParameters</code></p><p>@SpringQueryMap注解为了解决OpenFeign无法解析GET请求携带的对象参数，内部将复杂类型的对象参数解析后变成queryParam格式，如：<code>GET /queryMapA?param1=msg1&amp;param2=msg2&amp;msg=feign-test-msg&amp;requestId=4249a7c5-9616-4e0a-affc-65f695b80ed4</code>。不仅GET请求方法使用，其他请求方式也可以解析；</p><p>（2）参考<code>feign.ReflectiveFeign.BuildTemplateByResolvingArgs#create</code></p><p>被@SpringQueryMap注解的对象只能有一个，使用多个<code>@SpringQueryMap</code>注解，Feign内部会将第一个<code>@SpringQueryMap</code>注解标注的复杂类型参数值解析出来，后面的参数不会再被识别为<code>@SpringQueryMap</code>参数；</p><p>（3）如果是json格式的参数，其实也可以使用<code>RequestBody</code>注解；</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @PostMapping("/queryMapA")</span></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/queryMapA"</span>)</span><br><span class="line"><span class="function">CallResult&lt;Object&gt; <span class="title">queryMapA</span><span class="params">(@SpringQueryMap Params params, @RequestParam(<span class="string">"param1"</span>)</span> String param1,</span></span><br><span class="line"><span class="function">                             @<span class="title">RequestParam</span><span class="params">(<span class="string">"param2"</span>)</span> String param2)</span>;</span><br></pre></td></tr></table></figure><h3 id="4-熔断器的支持"><a class="header-anchor" href="#4-熔断器的支持">¶</a>4.熔断器的支持</h3><blockquote><p>相关文档：</p><p><a href="https://docs.spring.io/spring-cloud-openfeign/docs/3.0.7/reference/html/#spring-cloud-feign-circuitbreaker" target="_blank" rel="noopener">Feign Spring Cloud CircuitBreaker Support</a></p><p><a href="https://docs.spring.io/spring-cloud-circuitbreaker/docs/2.0.3/reference/html/#configuring-resilience4j-circuit-breakers" target="_blank" rel="noopener">Configuring Resilience4J Circuit Breakers</a></p><p><a href="https://docs.spring.io/spring-cloud-circuitbreaker/docs/2.0.3/reference/html/#configuring-spring-retry-circuit-breakers" target="_blank" rel="noopener">Configuring Spring Retry Circuit Breakers</a></p><p><a href="https://docs.spring.io/spring-cloud-commons/docs/3.0.6/reference/html/#supported-implementations" target="_blank" rel="noopener">spring-cloud-commons - Spring Cloud CircuitBreaker Supported Implementations</a></p><p>If Spring Cloud CircuitBreaker is on the classpath and <code>feign.circuitbreaker.enabled=true</code>, Feign will wrap all methods with a circuit breaker.</p><p>To disable Spring Cloud CircuitBreaker support on a per-client basis create a vanilla <code>Feign.Builder</code> with the “prototype” scope…</p></blockquote><p>（1）根据相关文档介绍，OpenFeign集成熔断器组件需要引入 Spring Cloud CircuitBreaker 库，比如官方推荐库：<a href="https://github.com/resilience4j/resilience4j" target="_blank" rel="noopener">Resilience4J</a>、<a href="https://github.com/spring-projects/spring-retry" target="_blank" rel="noopener">Spring Retry</a>、<a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">Sentinel</a></p><p>应用内修改开关属性：<code>feign.circuitbreaker.enabled=true</code>，OpenFeign就会使用熔断器包装所有的Feign接口方法。可以参考源码：<code>org.springframework.cloud.openfeign.FeignClientsRegistrar#registerFeignClient</code>，<code>org.springframework.cloud.openfeign.FeignCircuitBreakerTargeter#target</code>；</p><p>（2）Feign全局启用熔断器时，若要指定的FeignClient禁用Spring Cloud CircuitBreaker拦截，请为其单独构造一个Feign.Builder，设置scope是多例模式，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignClientAConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope</span>(ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span><br><span class="line">    <span class="keyword">public</span> Feign.<span class="function">Builder <span class="title">feignBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Feign.builder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"$&#123;spring.application.name&#125;"</span>, contextId = <span class="string">"fooClientA"</span>, url = <span class="string">"$&#123;url&#125;"</span>,</span><br><span class="line">		path = <span class="string">"/xxx"</span>, configuration = FeignClientAConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">FooClientA</span> </span>&#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="4-1-例如集成resilience4j实现："><a class="header-anchor" href="#4-1-例如集成resilience4j实现：">¶</a>4.1 例如集成resilience4j实现：</h4><p>（1）引入maven依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-circuitbreaker-resilience4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）开启Feign的circuitbreaker开关</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">feign.circuitbreaker.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>（3）开启全局开关后，所有Feign接口方法都需要提供降级方法，当Feign接口需要</p><p>方式一：指定Fallback实现，当Feign接口调用异常时，熔断器会执行并调用对应的Fallback方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.damo.zombie.auth.client;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"$&#123;spring.application.name&#125;"</span>, contextId = <span class="string">"fooClientA"</span>, url = <span class="string">"http://localhost:$&#123;server.port&#125;"</span>,</span><br><span class="line">		path = <span class="string">"/auth"</span>, fallback = FooClientA.FooClientAFallback<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">FooClientA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 此方法抛出异常，测试接口</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requestId 请求id</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> msg 测试数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> com.alibaba.damo.zombie.auth.CallResult&lt;java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/msgA"</span>)</span><br><span class="line">	<span class="function">CallResult&lt;Object&gt; <span class="title">msgA</span><span class="params">(@RequestParam(<span class="string">"request_id"</span>)</span> String requestId, @<span class="title">RequestParam</span><span class="params">(<span class="string">"msg"</span>)</span> String msg)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 此方法不做服务端实现，测试方法降级配置</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/notFoundExpA"</span>)</span><br><span class="line">	<span class="function">String <span class="title">getNotFoundExceptionA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Component</span></span><br><span class="line">	<span class="meta">@Slf</span>4j</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">FooClientAFallback</span> <span class="keyword">implements</span> <span class="title">FooClientA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> CallResult&lt;Object&gt; <span class="title">msgA</span><span class="params">(String requestId, String msg)</span> </span>&#123;</span><br><span class="line">             ...</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoFallbackAvailableException(<span class="string">"FooClientA-msgA Boom!"</span>, <span class="keyword">new</span> RuntimeException());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getNotFoundExceptionA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"&#123;&#125;"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式二：如果需要操作触发服务降级的原因，可以指定@FeignClient#fallbackFactory`属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.damo.zombie.auth.client;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.circuitbreaker.NoFallbackAvailableException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FallbackFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"zombie-auth-local"</span>, contextId = <span class="string">"fooClientB"</span>, path = <span class="string">"/auth"</span>,</span><br><span class="line">		fallbackFactory = FooClientB.FooClientBFallbackFacktory<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">FooClientB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 此方法抛出异常，测试接口</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requestId 请求id</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> msg 测试数据</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> com.alibaba.damo.zombie.auth.CallResult&lt;java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/msgB"</span>)</span><br><span class="line">	<span class="function">CallResult&lt;Object&gt; <span class="title">msgB</span><span class="params">(@RequestParam(<span class="string">"request_id"</span>)</span> String requestId, @<span class="title">RequestParam</span><span class="params">(<span class="string">"msg"</span>)</span> String msg)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 此方法不做服务端实现，测试方法降级配置</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/notFoundExpB"</span>)</span><br><span class="line">	<span class="function">String <span class="title">getNotFoundExceptionB</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Component</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FooClientBFallbackFacktory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">FallbackWithFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> FallbackWithFactory <span class="title">create</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">				log.debug(<span class="string">"fallback due to: "</span> + cause.getMessage(), cause);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> FallbackWithFactory();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FallbackWithFactory</span> <span class="keyword">implements</span> <span class="title">FooClientB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> CallResult&lt;Object&gt; <span class="title">msgB</span><span class="params">(String requestId, String msg)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NoFallbackAvailableException(<span class="string">"FooClientBFallbackWithFactory msgB Boom!"</span>, <span class="keyword">new</span> RuntimeException());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">getNotFoundExceptionB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"FooClientBFallbackWithFactory Fixed Response"</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2 Q: 配置了decode404=true后，降级如何处理？</p><p>4.3 Q: Feign监控</p><h2 id="三-Open-Feign-全局配置最佳实践"><a class="header-anchor" href="#三-Open-Feign-全局配置最佳实践">¶</a>三. Open Feign 全局配置最佳实践</h2><h3 id="1-Client实现优化："><a class="header-anchor" href="#1-Client实现优化：">¶</a>1. Client实现优化：</h3><blockquote><p>2、选择一个合适的http client，需要考虑连接超时、读超时和连接池、失败处理策略等涉及到可用性、稳定性和性能的参数；</p></blockquote><p>OpenFeign默认的http客户端实现是<code>java.net.HttpURLConnection</code>（详细信息见<code>feign-core：feign.Client.Default</code>），不支持添加拦截器和连接池。所以可以集成第三方Client实现，使其支持连接池，达到一定的性能优化效果。</p><blockquote><p><a href="https://docs.spring.io/spring-cloud-openfeign/docs/3.0.7/reference/html/#spring-cloud-feign-overriding-defaults" target="_blank" rel="noopener">OpenFeign关于Client实现介绍</a>：</p><p>The OkHttpClient and ApacheHttpClient and ApacheHC5 feign clients can be used by setting <code>feign.okhttp.enabled</code> or <code>feign.httpclient.enabled</code> or <code>feign.httpclient.hc5.enabled</code> to <code>true</code>, respectively, and having them on the classpath. You can customize the HTTP client used by providing a bean of either <code>org.apache.http.impl.client.CloseableHttpClient</code> when using Apache or <code>okhttp3.OkHttpClient</code> when using OK HTTP or <code>org.apache.hc.client5.http.impl.classic.CloseableHttpClient</code> when using Apache HC5.</p></blockquote><p>根据官方介绍，OpenFeign为用户提供：OkHttpClient and ApacheHttpClient and ApacheHC5的集成，只要引入相关的依赖使组件能找到Client实现，用户通过修改开关属性即可切换到对应的实现。可参考源码<code>feign-core：feign.Client.Default#convertAndSend</code>，默认基于<code>java.net.HttpURLConnection</code>实现请求创建和发送。</p><p>添加以下配置后，OpenFeign的http客户端就自动切换为第三方实现了，详细过程看源码就清楚了，<code>org.springframework.cloud.openfeign.FeignAutoConfiguration</code></p><p>（1）选择一种Client实现，引入相关依赖：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-hc5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）修改<code>application.properties(.yml)</code>开关属性</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line"><span class="meta">feign.httpclient.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line"><span class="meta">feign.httpclient.hc5.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 开启feign对OkHttp的支持</span></span><br><span class="line"><span class="meta">feign.okhttp.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="2-记录Request信息和Reponse信息"><a class="header-anchor" href="#2-记录Request信息和Reponse信息">¶</a>2. 记录Request信息和Reponse信息</h3><blockquote><p>6、需要透视出原生请求/响应以排查或定位问题，或在线debug能力；</p></blockquote><p>首先在我们以前的后端server中，每次接口请求都有Logbook记录这笔请求的原生Request信息和Reponse信息，为每一次请求记录成完整的，结构化的访问日志，使用SLS集成访问日志，这对日常的trouble-shooting可以提供很好的帮助。但这仅满足我们作为服务提供方的场景。</p><p>当应用作为服务消费方调用Feign接口时，如果发生了调用异常，我们仅能在访问日志中看到这个Feign接口调用所属的父请求的访问日志，那些内部接口调用的信息此时已经丢失，不利于我们从后端server外部分析这次调用异常。所以在后端server每次进行Feign接口调用时，同样需要收集到Request信息和Response信息。</p><p>基于此场景进行调研，尝试了3种方案：</p><p>OpenFeign官方提供了请求拦截器的接口<code>feign.RequestInterceptor</code>，但是没有提供响应拦截的接口，仅拦截请求不能满足我们的需求。所以我想应该从Feign的日志实现配置这个方向调研…</p><h4 id="2-1-方案1：集成logbook-openfeign组件"><a class="header-anchor" href="#2-1-方案1：集成logbook-openfeign组件">¶</a>2.1 方案1：集成logbook-openfeign组件</h4><blockquote><p><a href="https://github.com/zalando/logbook/tree/main/logbook-openfeign" target="_blank" rel="noopener">logbook-openfeign</a> 来自Logbook在2.14.0版本后新增的一个OpenFeign支持，参考：<a href="https://github.com/zalando/logbook/pull/1154" target="_blank" rel="noopener">OpenFeign support</a></p><p>组件不大，核心类<code>org.zalando.logbook.openfeign.FeignLogbookLogger</code>就是对feign.Logger的实现</p></blockquote><p>依赖信息：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zalando<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logbook-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>org.zalando.logbook.openfeign.FeignLogbookLogger</code>源码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zalando.logbook.openfeign;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> feign.Request;</span><br><span class="line"><span class="keyword">import</span> feign.Response;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Generated;</span><br><span class="line"><span class="keyword">import</span> org.apiguardian.api.API;</span><br><span class="line"><span class="keyword">import</span> org.zalando.logbook.HttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.zalando.logbook.HttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.zalando.logbook.Logbook;</span><br><span class="line"><span class="keyword">import</span> org.zalando.logbook.Logbook.ResponseProcessingStage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UncheckedIOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Example usage:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> * Logbook logbook = ...;</span></span><br><span class="line"><span class="comment"> * FeignLogbookLogger interceptor = new FeignLogbookLogger(logbook);</span></span><br><span class="line"><span class="comment"> * client = Feign.builder()</span></span><br><span class="line"><span class="comment"> *         ...</span></span><br><span class="line"><span class="comment"> *         .logger(interceptor)</span></span><br><span class="line"><span class="comment"> *         .logLevel(Logger.Level.FULL)</span></span><br><span class="line"><span class="comment"> *         ...;</span></span><br><span class="line"><span class="comment"> * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@API</span>(status = API.Status.EXPERIMENTAL)</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignLogbookLogger</span> <span class="keyword">extends</span> <span class="title">feign</span>.<span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logbook logbook;</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p><code>org.zalando.logbook.openfeign.FeignLogbookLogger</code>以编码方式配置到FeignClient中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/xxx"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignTestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> FooClientB fooClientByBuilder;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FeignTestController</span><span class="params">(Client client, Encoder encoder, Decoder decoder, Contract contract, Logbook logbook)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.fooClientByBuilder = Feign.builder()</span><br><span class="line">				.client(client)</span><br><span class="line">				.encoder(encoder)</span><br><span class="line">				.decoder(decoder)</span><br><span class="line">				.contract(contract)</span><br><span class="line">				.logger(<span class="keyword">new</span> FeignLogbookLogger(logbook))</span><br><span class="line">                  .logLevel(Logger.Level.FULL)</span><br><span class="line">				.target(FooClientB.class, "http://localhost:7001");</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><p>测试后报错：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.NoSuchMethodError: feign.Response.charset()Ljava&#x2F;nio&#x2F;charset&#x2F;Charset;</span><br><span class="line">	at org.zalando.logbook.openfeign.RemoteResponse.create(RemoteResponse.java:26)</span><br><span class="line">	at org.zalando.logbook.openfeign.FeignLogbookLogger.logAndRebufferResponse(FeignLogbookLogger.java:72)</span><br><span class="line">	at feign.AsyncResponseHandler.handleResponse(AsyncResponseHandler.java:68)</span><br></pre></td></tr></table></figure><p>原因： 在<code>org.zalando.logbook.openfeign.FeignLogbookLogger#logAndRebufferResponse</code>写日志时，应用当前的feign-core版本（10.12） <code>feign.Response.charset()</code>方法不存在，经过测试最低兼容： <a href="https://mvnrepository.com/artifact/io.github.openfeign/feign-core/11.0" target="_blank" rel="noopener">feign-core 11.1版本</a>。</p><p>我在官方提供的单测类加入auth应用的Logbook配置，运行看一下输出的效果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"origin"</span>: <span class="string">"local"</span>,</span><br><span class="line">	<span class="attr">"type"</span>: <span class="string">"request"</span>,</span><br><span class="line">	<span class="attr">"correlation"</span>: <span class="string">"805590bff412859b"</span>,</span><br><span class="line">	<span class="attr">"protocol"</span>: <span class="string">"HTTP/1.1"</span>,</span><br><span class="line">	<span class="attr">"remote"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">	<span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">	<span class="attr">"uri"</span>: <span class="string">"http://localhost:8080/get/string"</span>,</span><br><span class="line">	<span class="attr">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">	<span class="attr">"path"</span>: <span class="string">"/get/string"</span>,</span><br><span class="line">	<span class="attr">"scheme"</span>: <span class="string">"http"</span>,</span><br><span class="line">	<span class="attr">"port"</span>: <span class="string">"8080"</span>,</span><br><span class="line">	<span class="attr">"service_host_ip"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">	<span class="attr">"_zombie_auth_start_time_"</span>: <span class="string">"2022-12-26T12:10:11.801224500Z"</span>,</span><br><span class="line">	<span class="attr">"_zombie_auth_response_"</span>: &#123;</span><br><span class="line">		<span class="attr">"origin"</span>: <span class="string">"remote"</span>,</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"response"</span>,</span><br><span class="line">		<span class="attr">"correlation"</span>: <span class="string">"805590bff412859b"</span>,</span><br><span class="line">		<span class="attr">"duration"</span>: <span class="number">103</span>,</span><br><span class="line">		<span class="attr">"protocol"</span>: <span class="string">"HTTP/1.1"</span>,</span><br><span class="line">		<span class="attr">"status"</span>: <span class="number">200</span>,</span><br><span class="line">		<span class="attr">"headers"</span>: &#123;</span><br><span class="line">			<span class="attr">"content-length"</span>: [</span><br><span class="line">				<span class="string">"8"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"date"</span>: [</span><br><span class="line">				<span class="string">"Tue, 26 Dec 2022 12:10:11 GMT"</span></span><br><span class="line">			]</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">"body"</span>: <span class="string">"response"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-方案2：配置一个feign-Logger实现，新增一个slf4j-Logger用于写日志"><a class="header-anchor" href="#2-2-方案2：配置一个feign-Logger实现，新增一个slf4j-Logger用于写日志">¶</a>2.2 方案2：配置一个feign.Logger实现，新增一个slf4j Logger用于写日志</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zombie.auth.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableMap;</span><br><span class="line"><span class="keyword">import</span> feign.Logger;</span><br><span class="line"><span class="keyword">import</span> feign.Request;</span><br><span class="line"><span class="keyword">import</span> feign.Response;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> feign.Logger.Level.HEADERS;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lj</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFeignLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> org.slf4j.Logger FEIGN_CLIENT_LOGGER = LoggerFactory.getLogger(<span class="string">"feignClientLogger"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">logRequest</span><span class="params">(String configKey, Level logLevel, Request request)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">super</span>.logRequest(configKey, logLevel, request);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Response <span class="title">logAndRebufferResponse</span><span class="params">(String configKey, Level logLevel, Response response, <span class="keyword">long</span> elapsedTime)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		Request request = response.request();</span><br><span class="line">		log(configKey, <span class="keyword">null</span>, request, response, elapsedTime);</span><br><span class="line">		<span class="keyword">return</span> response;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String configKey, String format, Object... args)</span> </span>&#123;</span><br><span class="line">		FEIGN_CLIENT_LOGGER.info(JSON.toJSONString(ImmutableMap.of(configKey, args)));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FeignConfig.class</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * open feign 配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义logger实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> feign.Logger</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> feign.<span class="function">Logger <span class="title">logger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomFeignLogger();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>logback配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- feign client 日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"feignClientAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_PATH&#125;/zombie_auth_feign_client.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_PATH&#125;/zombie_auth_feign_client.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">....</span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"feignClientLogger"</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"feignClientAppender"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[&quot;GET&quot;,&quot;http:&#x2F;&#x2F;localhost:7001&#x2F;xxx&#x2F;notFoundExpA&quot;]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[0]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[&#123;&quot;binary&quot;:true&#125;,&#123;&#125;,603]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[&quot;GET&quot;,&quot;http:&#x2F;&#x2F;localhost:7001&#x2F;xxx&#x2F;notFoundExpA&quot;]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[0]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[&#123;&quot;binary&quot;:true&#125;,&#123;&#125;,667]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[&quot;GET&quot;,&quot;http:&#x2F;&#x2F;localhost:7001&#x2F;xxx&#x2F;notFoundExpA&quot;]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[0]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[&#123;&quot;binary&quot;:true&#125;,&#123;&#125;,716]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[&quot;GET&quot;,&quot;http:&#x2F;&#x2F;localhost:7001&#x2F;xxx&#x2F;notFoundExpA&quot;]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[0]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[&#123;&quot;binary&quot;:true&#125;,&#123;&#125;,465]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[&quot;GET&quot;,&quot;http:&#x2F;&#x2F;localhost:7001&#x2F;xxx&#x2F;notFoundExpA&quot;]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[0]&#125;</span><br><span class="line">&#123;&quot;FooClientA#getNotFoundExceptionA()&quot;:[&#123;&quot;binary&quot;:true&#125;,&#123;&#125;,634]&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-方案3：替换feign的内部Client实现，改用ApacheHttpClient实现，然后为HttpClient配置Logbook请求、响应拦截器"><a class="header-anchor" href="#2-3-方案3：替换feign的内部Client实现，改用ApacheHttpClient实现，然后为HttpClient配置Logbook请求、响应拦截器">¶</a>2.3 方案3：替换feign的内部Client实现，改用ApacheHttpClient实现，然后为HttpClient配置Logbook请求、响应拦截器</h4><blockquote><ul><li><p>1、前两个方案都不是很满意，同时扫Logbook官方仓库发现可选的支持列表有：<a href="">Apache HTTP Client 4.x or 5.x (optional)</a></p></li><li><p>2、根据OpenFeign官方文档表示：</p><p>The OkHttpClient and ApacheHttpClient and ApacheHC5 feign clients can be used by setting <code>feign.okhttp.enabled</code> or <code>feign.httpclient.enabled</code> or <code>feign.httpclient.hc5.enabled</code> to <code>true</code>, respectively, and having them on the classpath. You can customize the HTTP client used by providing a bean of either <code>org.apache.http.impl.client.CloseableHttpClient</code> when using Apache or <code>okhttp3.OkHttpClient</code> when using OK HTTP or <code>org.apache.hc.client5.http.impl.classic.CloseableHttpClient</code> when using Apache HC5.</p><p>简单说就是OpenFeign为用户提供：OkHttpClient and ApacheHttpClient and ApacheHC5的集成，只要引入相关的依赖使组件能找到Client实现，用户通过上面的开关属性配置即可切换到对应的实现。可参考源码<code>feign.Client.Default</code>，默认基于<code>java.net.HttpURLConnection</code>实现。</p></li></ul></blockquote><p><a href="https://github.com/zalando/logbook/blob/main/logbook-httpclient/src/test/java/org/zalando/logbook/httpclient/LogbookHttpInterceptorsTest.java" target="_blank" rel="noopener">logbook-httpclient单测</a> 可以看到 <code>Apache HTTP Client</code>如何配置Logbook拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.zalando.logbook.httpclient;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LogbookHttpInterceptorsTest</span> <span class="keyword">extends</span> <span class="title">AbstractHttpTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logbook logbook = Logbook.builder()</span><br><span class="line">            .strategy(<span class="keyword">new</span> TestStrategy())</span><br><span class="line">            .sink(<span class="keyword">new</span> DefaultSink(<span class="keyword">new</span> DefaultHttpLogFormatter(), writer))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CloseableHttpClient client = HttpClientBuilder.create()</span><br><span class="line">            .addInterceptorFirst(<span class="keyword">new</span> LogbookHttpRequestInterceptor(logbook))</span><br><span class="line">            .addInterceptorFirst(<span class="keyword">new</span> LogbookHttpResponseInterceptor())</span><br><span class="line">            .build();</span><br></pre></td></tr></table></figure><ul><li><p>为什么不用ApacheHC5呢？</p><p>原因：在集成时发现，Logbook对ApacheHC5的支持，只支持通过<code>feign-hc5: org.apache.hc.client5.http.impl.classic.HttpClientBuilder#addRequestInterceptorFirst</code>进行配置，所以如果配置HttpClient5被Logbook拦截，需要修改HttpClientBuilder的配置，但<code>HttpClientBuilder</code>没有被Spring管理，导致依赖的很多Bean（如：<code>feign-hc5: org.apache.hc.client5.http.io.HttpClientConnectionManager</code>）都需要覆盖配置，虽然可以实现，只是如此一来对OpenFeign原生配置（可以参考源码：<code>org.springframework.cloud.openfeign.clientconfig.HttpClient5FeignConfiguration</code>）侵入较大，且配置繁琐。所以这里选择为OpenFeign集成ApacheHttpClient库（<code>feign-httpclient</code>）。</p></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ApacheHC5实现：org.apache.hc.client5.http.impl.classic.CloseableHttpClient的Bean配置</span></span><br><span class="line"><span class="comment">// org.springframework.cloud.openfeign.clientconfig.HttpClient5FeignConfiguration#httpClient5</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CloseableHttpClient <span class="title">httpClient5</span><span class="params">(HttpClientConnectionManager connectionManager,</span></span></span><br><span class="line"><span class="function"><span class="params">		FeignHttpClientProperties httpClientProperties)</span> </span>&#123;</span><br><span class="line">	httpClient5 = HttpClients.custom().disableCookieManagement().useSystemProperties()</span><br><span class="line">			.setConnectionManager(connectionManager).evictExpiredConnections()</span><br><span class="line">			.setDefaultRequestConfig(RequestConfig.custom()</span><br><span class="line">					.setConnectTimeout(</span><br><span class="line">							Timeout.of(httpClientProperties.getConnectionTimeout(), TimeUnit.MILLISECONDS))</span><br><span class="line">					.setRedirectsEnabled(httpClientProperties.isFollowRedirects()).build())</span><br><span class="line">			.build();</span><br><span class="line">	<span class="keyword">return</span> httpClient5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ApacheHttpClient实现：org.apache.http.impl.client.CloseableHttpClient的Bean配置</span></span><br><span class="line"><span class="comment">// org.springframework.cloud.openfeign.clientconfig.HttpClientFeignConfiguration#httpClient</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(value = <span class="string">"feign.compression.response.enabled"</span>, havingValue = <span class="string">"false"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="comment">// org.springframework.cloud.commons.httpclient.ApacheHttpClientFactory 初始化时注入了HttpClientBuilder</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CloseableHttpClient <span class="title">httpClient</span><span class="params">(ApacheHttpClientFactory httpClientFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">		HttpClientConnectionManager httpClientConnectionManager, FeignHttpClientProperties httpClientProperties)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.httpClient = createClient(httpClientFactory.createBuilder(), httpClientConnectionManager,</span><br><span class="line">			httpClientProperties);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.httpClient;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上，将OpenFeign的Client实现改用ApacheHttpClient 方式，然后集成logbook-httpclient组件，新增HttpClient拦截器是可行的。</p><p>（1）按照OpenFeign官方介绍，引入OpenFeign对ApacheHttpClient的支持、Logbook对ApacheHttpClient的支持所需的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- logbook-spring-boot-starter已包含该依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.zalando<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logbook-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）HttpClient默认实现是CloseableHttpClient.class，经跟踪将其实例化的配置类源码，新增配置如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zombie.auth.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.zalando.logbook.httpclient.LogbookHttpRequestInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.zalando.logbook.httpclient.LogbookHttpResponseInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * open feign 配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> LogbookHttpRequestInterceptor logbookHttpRequestInterceptor;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> LogbookHttpResponseInterceptor logbookHttpResponseInterceptor;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> HttpClientBuilder <span class="title">apacheHttpClientBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> HttpClientBuilder</span><br><span class="line">            	.create()</span><br><span class="line">            	.addInterceptorFirst(logbookHttpRequestInterceptor)</span><br><span class="line">			   .addInterceptorFirst(logbookHttpResponseInterceptor);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试成功，在服务消费者server记录的Feign接口日志：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"origin"</span>: <span class="string">"local"</span>,</span><br><span class="line">	<span class="attr">"type"</span>: <span class="string">"request"</span>,</span><br><span class="line">	<span class="attr">"correlation"</span>: <span class="string">"fad3a7579080c697"</span>,</span><br><span class="line">	<span class="attr">"protocol"</span>: <span class="string">"HTTP/1.1"</span>,</span><br><span class="line">	<span class="attr">"remote"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">	<span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">	<span class="attr">"uri"</span>: <span class="string">"http://xxx/api/v1/user?request_id=87s983h3n2823ne32d"</span>,</span><br><span class="line">	<span class="attr">"host"</span>: <span class="string">"172.31.0.21"</span>,</span><br><span class="line">	<span class="attr">"path"</span>: <span class="string">"/api/v1/user"</span>,</span><br><span class="line">	<span class="attr">"scheme"</span>: <span class="string">"http"</span>,</span><br><span class="line">	<span class="attr">"port"</span>: <span class="string">"7001"</span>,</span><br><span class="line">	<span class="attr">"headers"</span>: &#123;</span><br><span class="line">		<span class="attr">"Accept"</span>: [</span><br><span class="line">			<span class="string">"*/*"</span></span><br><span class="line">		],</span><br><span class="line">		<span class="attr">"Cookie"</span>: [</span><br><span class="line">			<span class="string">"m_session_id=f0dd137a-69d0-46f9-ad0f-5616d57d6f5d"</span></span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">"service_host_ip"</span>: <span class="string">"30.24.97.20"</span>,</span><br><span class="line">	<span class="attr">"_zombie_auth_start_time_"</span>: <span class="string">"2022-12-26T13:44:49.989Z"</span>,</span><br><span class="line">	<span class="attr">"_zombie_auth_response_"</span>: &#123;</span><br><span class="line">		<span class="attr">"origin"</span>: <span class="string">"remote"</span>,</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"response"</span>,</span><br><span class="line">		<span class="attr">"correlation"</span>: <span class="string">"fad3a7579080c697"</span>,</span><br><span class="line">		<span class="attr">"duration"</span>: <span class="number">142</span>,</span><br><span class="line">		<span class="attr">"protocol"</span>: <span class="string">"HTTP/1.1"</span>,</span><br><span class="line">		<span class="attr">"status"</span>: <span class="number">200</span>,</span><br><span class="line">		<span class="attr">"headers"</span>: &#123;</span><br><span class="line">			<span class="attr">"Cache-Control"</span>: [</span><br><span class="line">				<span class="string">"no-cache, no-store, max-age=0, must-revalidate"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"Connection"</span>: [</span><br><span class="line">				<span class="string">"keep-alive"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"Content-Type"</span>: [</span><br><span class="line">				<span class="string">"application/json"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"Date"</span>: [</span><br><span class="line">				<span class="string">"Tue, 26 Dec 2022 13:44:49 GMT"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"Expires"</span>: [</span><br><span class="line">				<span class="string">"0"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"Keep-Alive"</span>: [</span><br><span class="line">				<span class="string">"timeout=60"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"Pragma"</span>: [</span><br><span class="line">				<span class="string">"no-cache"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"Set-Cookie"</span>: [</span><br><span class="line">				<span class="string">"m_session_id=03d2f857-36ba-4785-b143-3fd5b72c4352; Path=/; HttpOnly; SameSite=Lax"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"Transfer-Encoding"</span>: [</span><br><span class="line">				<span class="string">"chunked"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"Vary"</span>: [</span><br><span class="line">				<span class="string">"Origin"</span>,</span><br><span class="line">				<span class="string">"Access-Control-Request-Method"</span>,</span><br><span class="line">				<span class="string">"Access-Control-Request-Headers"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"X-Content-Type-Options"</span>: [</span><br><span class="line">				<span class="string">"nosniff"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"X-Frame-Options"</span>: [</span><br><span class="line">				<span class="string">"DENY"</span></span><br><span class="line">			],</span><br><span class="line">			<span class="attr">"X-XSS-Protection"</span>: [</span><br><span class="line">				<span class="string">"1; mode=block"</span></span><br><span class="line">			]</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">"body"</span>: &#123;</span><br><span class="line">			<span class="attr">"request_id"</span>: <span class="string">"87s983h3n2823ne32d"</span>,</span><br><span class="line">			<span class="attr">"code"</span>: <span class="number">101</span>,</span><br><span class="line">			<span class="attr">"msg"</span>: <span class="string">"no login"</span>,</span><br><span class="line">			<span class="attr">"value"</span>: <span class="literal">null</span>,</span><br><span class="line">			<span class="attr">"success"</span>: <span class="literal">false</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-总结："><a class="header-anchor" href="#2-4-总结：">¶</a>2.4 总结：</h4><p>经过测试，最终方案3最合适。</p><h3 id="3-对Cookie请求头的支持"><a class="header-anchor" href="#3-对Cookie请求头的支持">¶</a>3. 对Cookie请求头的支持</h3><blockquote><p>3、请求参数、包括不限制于cookie、header、body的解析或映射（Mapping）；</p></blockquote><p>之前Feign（OpenFeign 3.0.7）调用时，在需要传入Cookie头的应用场景时，Feign只能将方法参数列表中的Cookie值按照请求头的方式声明。此时调用时，只能手动构造<code>CookieName=CookieValue</code>字符串传入，作为服务消费方还需要维护服务提供方的CookieName，体验很差。</p><p>尽管为了简化传入Cookie头，手动为单个Feign Client方法做了手动封装，但在集成了OpenFeign组件后，仍手动为FeignClient的每个方法做这些封装，不是最佳实践。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"xxx"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">XxxClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 解析web-session</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requestId 当前请求id</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> zombieSessionId Cookie: web-session-id</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> com.alibaba.damo.zombie.auth.CallResult&lt;com.alibaba.damo.zombie.auth.xo.vo.SessionInfoVO&gt;</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@GetMapping</span>(<span class="string">"/api/v1/user"</span>)</span><br><span class="line">	<span class="function">CallResult&lt;SessionInfoVO&gt; <span class="title">getSession</span><span class="params">(@RequestParam(<span class="string">"request_id"</span>)</span> String requestId,</span></span><br><span class="line"><span class="function">			@<span class="title">RequestHeader</span><span class="params">(HttpHeaders.COOKIE)</span> String zombieSessionId)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 解析web-session</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requestId 当前请求id</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> zombieSessionId web-session-id</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> com.alibaba.damo.zombie.auth.CallResult&lt;com.alibaba.damo.zombie.auth.xo.vo.SessionInfoVO&gt;</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="function"><span class="keyword">default</span> CallResult&lt;SessionInfoVO&gt; <span class="title">getById</span><span class="params">(@NonNull String requestId, @NonNull String zombieSessionId)</span> </span>&#123;</span><br><span class="line">		Assert.hasText(requestId, <span class="string">"requestId cannot be empty"</span>);</span><br><span class="line">		Assert.hasText(zombieSessionId, <span class="string">"zombieSessionId cannot be empty"</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.getSession(requestId, Constants.M_SESSION_ID_COOKIE + <span class="string">"="</span> + zombieSessionId);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-方案1：使用Feign原生注解实现Cookie头的动态设置"><a class="header-anchor" href="#3-1-方案1：使用Feign原生注解实现Cookie头的动态设置">¶</a>3.1 方案1：使用Feign原生注解实现Cookie头的动态设置</h4><blockquote><p><a href="https://github.com/OpenFeign/feign#interface-annotations:~:text=Interface%20Annotations" target="_blank" rel="noopener">Open Feign Interface Annotations</a></p><p>Feign annotations define the <code>Contract</code> between the interface and how the underlying client should work. Feign’s default contract defines the following annotations:</p><table><thead><tr><th>Annotation</th><th>Interface Target</th><th>Usage</th></tr></thead><tbody><tr><td><code>@RequestLine</code></td><td>Method</td><td>Defines the <code>HttpMethod</code> and <code>UriTemplate</code> for request. <code>Expressions</code>, values wrapped in curly-braces <code>{expression}</code> are resolved using their corresponding <code>@Param</code> annotated parameters.</td></tr><tr><td><code>@Param</code></td><td>Parameter</td><td>Defines a template variable, whose value will be used to resolve the corresponding template <code>Expression</code>, by name provided as annotation value. If value is missing it will try to get the name from bytecode method parameter name (if the code was compiled with <code>-parameters</code> flag).</td></tr><tr><td><code>@Headers</code></td><td>Method, Type</td><td>Defines a <code>HeaderTemplate</code>; a variation on a <code>UriTemplate</code>. that uses <code>@Param</code> annotated values to resolve the corresponding <code>Expressions</code>. When used on a <code>Type</code>, the template will be applied to every request. When used on a <code>Method</code>, the template will apply only to the annotated method.</td></tr><tr><td><code>@QueryMap</code></td><td>Parameter</td><td>Defines a <code>Map</code> of name-value pairs, or POJO, to expand into a query string.</td></tr><tr><td><code>@HeaderMap</code></td><td>Parameter</td><td>Defines a <code>Map</code> of name-value pairs, to expand into <code>Http Headers</code></td></tr><tr><td><code>@Body</code></td><td>Method</td><td>Defines a <code>Template</code>, similar to a <code>UriTemplate</code> and <code>HeaderTemplate</code>, that uses <code>@Param</code> annotated values to resolve the corresponding <code>Expressions</code>.</td></tr></tbody></table></blockquote><p>参考源码：<code>org.springframework.cloud.openfeign.FeignClientsConfiguration#feignContract</code>，OpenFeign默认激活SpringMvcContract以支持mvc的注解，可以通过自定义配置激活Feign的Default Contract后，切换到Feign原生注解（此时激活此配置的Feign Client将无法使用mvc注解）。</p><p>如下所示，<code>feign.Headers</code>支持<code>{val}</code>格式的模板参数，这样可以将多个CookieName写到<code>feign.Headers#value</code>中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"$&#123;spring.application.name&#125;"</span>, contextId = <span class="string">"headerByDefaultContractClient"</span>,</span><br><span class="line">		url = <span class="string">"http://localhost:$&#123;server.port&#125;"</span>, path = <span class="string">"/auth"</span>,</span><br><span class="line">		configuration = HeaderByDefaultContractClient.Config<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">HeaderByDefaultContractClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * header By Default Contract test Setting Dynamic Header Value</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requestId 当前请求id</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> zombieSessionId Cookie: web-session-id</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> com.zombie.auth.CallResult&lt;com.zombie.auth.xo.vo.SessionInfoVO&gt;</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@RequestLine</span>(<span class="string">"GET /headerByDefaultContract?request_id=&#123;request_id&#125;"</span>)</span><br><span class="line">	<span class="meta">@Headers</span>(<span class="string">"Cookie: m_session_id=&#123;m_session_id&#125;"</span>)</span><br><span class="line">	<span class="function">CallResult&lt;Object&gt; <span class="title">header</span><span class="params">(@Param(<span class="string">"request_id"</span>)</span> String requestId, @<span class="title">Param</span><span class="params">(<span class="string">"m_session_id"</span>)</span> String zombieSessionId)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * 自定义Contract实现</span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@return</span> feign.Contract</span></span><br><span class="line"><span class="comment">		 **/</span></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="keyword">public</span> feign.<span class="function">Contract <span class="title">contract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="comment">// return new SpringMvcContract();</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Contract.Default();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-方案2：使用-Spring-MVC-提供的-org-springframework-web-bind-annotation-CookieValue注解，自定义扩展Feign对该注解支持，实现Cookie头的动态设置"><a class="header-anchor" href="#3-2-方案2：使用-Spring-MVC-提供的-org-springframework-web-bind-annotation-CookieValue注解，自定义扩展Feign对该注解支持，实现Cookie头的动态设置">¶</a>3.2 方案2：使用 Spring MVC 提供的 <code>org.springframework.web.bind.annotation.CookieValue</code>注解，自定义扩展Feign对该注解支持，实现Cookie头的动态设置</h4><p>通过在OpenFeign官方仓库查找到了关联问题，同时官方采纳了来自社区的优化贡献，对《<a href="https://github.com/spring-cloud/spring-cloud-openfeign/pull/604" target="_blank" rel="noopener">Cookie头传参问题 / Add a CookieValueParameterProcessor to support @CookieValue #604</a>》作出了优化。</p><p>但是经这个优化最早发布于OpenFeign 3.1.0-M2 版本，auth工程目前是：3.0.7版本。</p><p>经测试升级Spring Cloud Open Feign 版本后，OpenFeign 3.1.0 无法兼容<code>spring-cloud-dependencies</code>指定版本下的各组件（如Spring Cloud Load Balancer等）。同时OpenFeign也向用户开放了基于SpringMvc已有的注解支持，扩展自定义注解支持（参考：<code>org.springframework.cloud.openfeign.FeignClientsConfiguration#parameterProcessors</code>）。</p><p>所以可将官方后续新增的<a href="https://github.com/spring-cloud/spring-cloud-openfeign/blob/v3.1.0-M2/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/annotation/CookieValueParameterProcessor.java" target="_blank" rel="noopener">CookieValue注解支持</a>（<code>CookieValueParameterProcessor</code>），通过扩展配置加入SpringMvcContract中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zombie.auth.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.zombie.auth.CallResult;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> feign.MethodMetadata;</span><br><span class="line"><span class="keyword">import</span> feign.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.AnnotatedParameterProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.CircuitBreakerNameResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CookieValue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> feign.Util.checkState;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> feign.Util.emptyToNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * feign client provide by zombie-auth</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lj on 2022/12/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"$&#123;spring.application.name&#125;"</span>, contextId = <span class="string">"headerByMvcContractClient"</span>,</span><br><span class="line">		url = <span class="string">"http://localhost:$&#123;server.port&#125;"</span>, path = <span class="string">"/auth"</span>, configuration = HeaderByMvcContractClient.Config<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">HeaderByMvcContractClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * header By Spring MVC Contract Test Setting Dynamic Header Value</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requestId 当前请求id</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> zombieSessionId Cookie: web-session-id</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> com.zombie.auth.CallResult&lt;com.zombie.auth.xo.vo.SessionInfoVO&gt;</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@PostMapping</span>(<span class="string">"/headerByMvcContract"</span>)</span><br><span class="line">	<span class="function">CallResult&lt;Object&gt; <span class="title">header</span><span class="params">(@RequestParam(<span class="string">"request_id"</span>)</span> String requestId,</span></span><br><span class="line"><span class="function">			@<span class="title">CookieValue</span><span class="params">(<span class="string">"m_session_id"</span>)</span> String zombieSessionId)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Bean</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> List&lt;AnnotatedParameterProcessor&gt; <span class="title">parameterProcessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> Lists.newArrayList(<span class="keyword">new</span> CookieValueParameterProcessor());</span><br><span class="line">		&#125;</span><br><span class="line">        </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> CookieValue&#125; annotation processor.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> &lt;a href=</span></span><br><span class="line"><span class="comment">	 * "https://github.com/spring-cloud/spring-cloud-openfeign/blob/v3.1.0-M2/spring-cloud-openfeign-core/src/main/java/org/springframework/cloud/openfeign/annotation/CookieValueParameterProcessor.java"&gt;Source</span></span><br><span class="line"><span class="comment">	 * Code&lt;/a&gt;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">CookieValueParameterProcessor</span> <span class="keyword">implements</span> <span class="title">AnnotatedParameterProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;CookieValue&gt; ANNOTATION = CookieValue<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> Class&lt;? extends Annotation&gt; getAnnotationType() &#123;</span><br><span class="line">			<span class="keyword">return</span> ANNOTATION;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processArgument</span><span class="params">(AnnotatedParameterContext context, Annotation annotation, Method method)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> parameterIndex = context.getParameterIndex();</span><br><span class="line">			MethodMetadata data = context.getMethodMetadata();</span><br><span class="line">			CookieValue cookie = ANNOTATION.cast(annotation);</span><br><span class="line">			String name = cookie.value().trim();</span><br><span class="line">			checkState(emptyToNull(name) != <span class="keyword">null</span>, <span class="string">"Cookie.name() was empty on parameter %s"</span>, parameterIndex);</span><br><span class="line">			context.setParameterName(name);</span><br><span class="line">			String cookieExpression = data.template().headers()</span><br><span class="line">					.getOrDefault(HttpHeaders.COOKIE, Collections.singletonList(<span class="string">""</span>)).stream().findFirst().orElse(<span class="string">""</span>);</span><br><span class="line">			<span class="keyword">if</span> (cookieExpression.length() == <span class="number">0</span>) &#123;</span><br><span class="line">				cookieExpression = String.format(<span class="string">"%s=&#123;%s&#125;"</span>, name, name);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				cookieExpression += String.format(<span class="string">"; %s=&#123;%s&#125;"</span>, name, name);</span><br><span class="line">			&#125;</span><br><span class="line">			data.template().removeHeader(HttpHeaders.COOKIE);</span><br><span class="line">			data.template().header(HttpHeaders.COOKIE, cookieExpression);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-总结："><a class="header-anchor" href="#3-3-总结：">¶</a>3.3 总结：</h4><p>上面两种方案都解决了FeignClient调用时，对Cookie这类方法参数无法直接传参，不再需要开发者将此类方法再封装一层，手动进行拼接CookieName=CookieValue的拼接。</p><p>个人感觉：</p><ul><li><p>方案1：</p><p>使用Feign原生注解就可以让接口调用方免于手动拼接CookieName，这是一个优点。但Feign原生注解使用时，感觉属性值格式校验有点松散（可能是不习惯），举例：<code>@Headers(&quot;Cookie: m_session_id={m_session_id};testName={testValue}&quot;)</code>。</p><p>这种写法其实还是需要接口开发者手动拼接，不像mvc注解设计的<code>@CookieValue(&quot;m_session_id&quot;) String zombieSessionId</code>颗粒度缩小到单个Cookie上。</p></li><li><p>方案2：</p><p>让开发者可以延续使用Spring MVC提供的注解来声明FeignClient方法中的Cookie参数，同时此方案是基于官方在Open Feign 3.0.7后的优化方案，看起来更合适一些。</p></li><li><p>综上，以上两种方案都可作为最佳实践来应用。</p></li></ul><h3 id="3-对请求-响应做相对统一的加-解签或加-解密"><a class="header-anchor" href="#3-对请求-响应做相对统一的加-解签或加-解密">¶</a>3. 对请求/响应做相对统一的加/解签或加/解密</h3><blockquote><p>5、需要对请求/响应做相对统一的加/解签或加/解密；</p></blockquote><p>在实际应用场景中，常常会调用一些内部接口，服务提供方、服务消费方往往会约定对请求、响应数据的加解密、签名机制。</p><h4 id="3-1-实现OpenFeign对请求的统一拦截"><a class="header-anchor" href="#3-1-实现OpenFeign对请求的统一拦截">¶</a>3.1 实现OpenFeign对请求的统一拦截</h4><blockquote><p>Feign提供了拦截器机制，在真正 HTTP 调用之前，通过<code>feign.RequestInterceptor</code>接口执行拦截器逻辑，业务逻辑层无感知。</p></blockquote><p>如下所示，可以对指定的请求加签或加密</p><blockquote><ul><li>加签规则中，若签名原文是基于请求URL生成，需要注意：此处执行时尚未经过load-balancer计算出具体服务实例。<br>此时服务消费者的应用，请求URL包含的是注册的服务名（如：<a href="https://xxx-provider-name/xxx/xxx%EF%BC%89%EF%BC%8C%E4%BD%86%E5%9C%A8%E6%9C%8D%E5%8A%A1%E6%8F%90%E4%BE%9B%E8%80%85%E7%9A%84%E5%BA%94%E7%94%A8%E8%BF%9B%E8%A1%8C%E8%AF%B7%E6%B1%82%E9%AA%8C%E7%AD%BE%E6%97%B6%EF%BC%8C%E8%AF%B7%E6%B1%82URL%E5%8C%85%E5%90%AB%E7%9A%84%E6%98%AF%E5%85%B7%E4%BD%93%E7%9A%84ip%E5%9C%B0%E5%9D%80%EF%BC%88%E5%A6%82%EF%BC%9Ahttps://ip:port/xxx/xxx%EF%BC%89%EF%BC%8C%E6%AD%A4%E6%97%B6%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%E5%B0%B1%E4%B8%8D%E4%B8%80%E8%87%B4%E4%BA%86%E3%80%82" target="_blank" rel="noopener">https://xxx-provider-name/xxx/xxx），但在服务提供者的应用进行请求验签时，请求URL包含的是具体的ip地址（如：https://ip:port/xxx/xxx），此时签名校验就不一致了。</a></li><li>解决：对于需要请求加签的FeignClient，可以通过<code>@FeignClient#url</code>属性指定具体的服务提供者地址</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本文对Feign请求先加密后加签</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 可通过（&#123;<span class="doctag">@link</span> Order&#125;）调整响应加密、加签的执行顺序</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Order</span>(Ordered.LOWEST_PRECEDENCE - <span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestInterceptor <span class="title">signRequestInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> template -&gt; &#123;</span><br><span class="line">		<span class="keyword">if</span> (!template.methodMetadata().method().isAnnotationPresent(RequestSign<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">final</span> String sign = signService.sign(</span><br><span class="line">				signService.genSourceFromFeignRequestTemplateAndAppId(template, zombieAuthAppId), zombieAuthAppId);</span><br><span class="line">		template.header(Constants.APP_ID_HEADER, zombieAuthAppId);</span><br><span class="line">		template.header(Constants.APP_SIGN_HEADER, sign);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本文对Feign请求先加密后加签</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Order</span>(Ordered.LOWEST_PRECEDENCE - <span class="number">2</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestInterceptor <span class="title">encryptRequestBodyInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> template -&gt; &#123;</span><br><span class="line">		<span class="keyword">final</span> Method method = template.methodMetadata().method();</span><br><span class="line">		<span class="keyword">final</span> Parameter[] parameters = method.getParameters();</span><br><span class="line">		Arrays.stream(parameters).forEach(parameter -&gt; &#123;</span><br><span class="line">			<span class="keyword">if</span> (parameter.isAnnotationPresent(AesEncrypt<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">				encryptRequestBody(template, parameter);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-实现OpenFeign对响应的统一拦截"><a class="header-anchor" href="#3-2-实现OpenFeign对响应的统一拦截">¶</a>3.2 实现OpenFeign对响应的统一拦截</h4><blockquote><p>Feign未对响应结果提供拦截器机制，但提供 <code>feign.Decoder</code>接口，以实现对响应统一解码，业务逻辑层无感知。</p></blockquote><p>如下所示，可以对指定的响应验签或解密</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 本文中服务消费方对Feign响应先解密后验签</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> feign.codec.Decoder</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Decoder <span class="title">feignDecoder</span><span class="params">(ObjectFactory&lt;HttpMessageConverters&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> OptionalDecoder(<span class="keyword">new</span> ResponseEntityDecoder(<span class="keyword">new</span> AesDecryptDecoder(</span><br><span class="line">			<span class="keyword">new</span> SignatureVerifyDecoder(messageConverters, signService, signVerifyEnable), aesService, disableAes)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FeignClient响应验签</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SignatureVerifyDecoder</span> <span class="keyword">extends</span> <span class="title">SpringDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> SignService signService;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> signVerifyEnable;</span><br><span class="line"></span><br><span class="line">	SignatureVerifyDecoder(ObjectFactory&lt;HttpMessageConverters&gt; messageConverters, SignService signService,</span><br><span class="line">			<span class="keyword">boolean</span> signVerifyEnable) &#123;</span><br><span class="line">		<span class="keyword">super</span>(messageConverters);</span><br><span class="line">		<span class="keyword">this</span>.signService = signService;</span><br><span class="line">		<span class="keyword">this</span>.signVerifyEnable = signVerifyEnable;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(Response response, Type type)</span> <span class="keyword">throws</span> IOException, FeignException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!response.request().requestTemplate().methodMetadata().method()</span><br><span class="line">				.isAnnotationPresent(ResponseSignVerify<span class="class">.<span class="keyword">class</span>) || !<span class="title">signVerifyEnable</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">super</span>.decode(response, type);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">final</span> String appId = firstOrNull(response.headers(), Constants.APP_ID_HEADER);</span><br><span class="line">		<span class="keyword">final</span> String originalSign = firstOrNull(response.headers(), Constants.APP_SIGN_HEADER);</span><br><span class="line"></span><br><span class="line">		Response.Body body = response.body();</span><br><span class="line">		String bodyJsonStr = IOUtils.toString(body.asReader(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 验签不通过</span></span><br><span class="line">		<span class="keyword">if</span> (!signService.signatureVerify(bodyJsonStr, appId, originalSign)) &#123;</span><br><span class="line">			<span class="keyword">final</span> String originalRequestId = response.request().requestTemplate().queries()</span><br><span class="line">					.get(Constants.REQUEST_ID_PARAMETER).stream().findFirst().orElse(<span class="keyword">null</span>);</span><br><span class="line">			log.error(<span class="string">"['&#123;&#125;'@&#123;&#125;] ILLEGAL_FEIGN_RESPONSE_VERIFY_SIGN_FAIL. appId: [%s] sign: [%s]"</span>,</span><br><span class="line">					response.request().url(), originalRequestId);</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> DecodeException(response.status(), <span class="string">"illegal feign response due to verify sign failed."</span>,</span><br><span class="line">					response.request());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">super</span>.decode(response.toBuilder().body(bodyJsonStr, StandardCharsets.UTF_8).build(), type);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">firstOrNull</span><span class="params">(Map&lt;String, Collection&lt;T&gt;&gt; map, String key)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (map.containsKey(key) &amp;&amp; !map.get(key).isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">return</span> map.get(key).iterator().next();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FeignClient响应解密</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AesDecryptDecoder</span> <span class="keyword">implements</span> <span class="title">Decoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Decoder delegate;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> AesService aesService;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> disableAes;</span><br><span class="line"></span><br><span class="line">	AesDecryptDecoder(Decoder decoder, AesService aesService, <span class="keyword">boolean</span> disableAes) &#123;</span><br><span class="line">		<span class="keyword">this</span>.delegate = decoder;</span><br><span class="line">		<span class="keyword">this</span>.aesService = aesService;</span><br><span class="line">		<span class="keyword">this</span>.disableAes = disableAes;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(Response response, Type type)</span> <span class="keyword">throws</span> IOException, FeignException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!response.request().requestTemplate().methodMetadata().method().isAnnotationPresent(AesDecrypt<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">				|| <span class="title">disableAes</span>) </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> delegate.decode(response, type);</span><br><span class="line">		&#125;</span><br><span class="line">		String encryptedBody = IOUtils.toString(response.body().asReader(StandardCharsets.UTF_8));</span><br><span class="line">		<span class="keyword">final</span> CallResult&lt;Object&gt; callResult = JSON.parseObject(encryptedBody, CallResult<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		<span class="keyword">final</span> String decryptJson = aesService.decrypt(callResult.getData().toString());</span><br><span class="line">		callResult.setData(JSON.parse(decryptJson));</span><br><span class="line">		<span class="keyword">return</span> delegate.decode(</span><br><span class="line">				response.toBuilder().body(JSON.toJSONString(callResult), StandardCharsets.UTF_8).build(), type);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      <categories>
        <category>RPC</category>
      </categories>
      <tags>
        <tag>SpringCloud - OpenFeign</tag>
      </tags>
  </entry>
  <entry>
    <title>OAuth2问题记录：Auth Server&amp; Client序列化问题.md</title>
    <url>/2022/12/23/Maas-Auth%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%9AOAuth2%20Server&amp;Client%E5%BA%8F%E5%88%97%E5%8C%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><p>关于：Auth应用中集成Spring Authorization Server（后面简称SAS）、Spring OAuth2 Client&amp; Spring Session后存在的json序列化问题。</p><h1>一、 SAS重点代码片段</h1><h2 id="1-OAuth2AuthorizationService的Redis持久化方式（自定义实现）："><a class="header-anchor" href="#1-OAuth2AuthorizationService的Redis持久化方式（自定义实现）：">¶</a>1. OAuth2AuthorizationService的Redis持久化方式（自定义实现）：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zombie.auth.service.impl;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis实现授权码、访问令牌、刷新令牌 持久化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAuthorizationServiceImpl</span> <span class="keyword">implements</span> <span class="title">OAuth2AuthorizationService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">	<span class="meta">@Resource</span></span><br><span class="line">	<span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; oauth2RedisTemplate;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 存储授权信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> authorization SAS授权信息</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(OAuth2Authorization authorization)</span> </span>&#123;</span><br><span class="line">		Assert.notNull(authorization, <span class="string">"authorization cannot be null"</span>);</span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">if</span> (isCode(authorization)) &#123;</span><br><span class="line">            OAuth2AuthorizationCode authorizationCodeInfo = Objects.requireNonNull(authorizationCode).getToken();</span><br><span class="line">            <span class="keyword">long</span> between = ChronoUnit.SECONDS.between(Objects.requireNonNull(authorizationCodeInfo.getIssuedAt()),</span><br><span class="line">                                                      authorizationCodeInfo.getExpiresAt());</span><br><span class="line">            oauth2RedisTemplate.opsForValue().set(</span><br><span class="line">                buildKey(OAuth2ParameterNames.CODE, authorizationCodeInfo.getTokenValue()),</span><br><span class="line">                AuthCodeInfo.AuthCodeInfoGenerator.generate(authorization), between, TimeUnit.SECONDS);</span><br><span class="line">		&#125;</span><br><span class="line">        ...</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据token查询SAS授权信息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> token 授权码或令牌</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> tokenType token类型</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> org.springframework.security.oauth2.server.authorization.OAuth2Authorization</span></span><br><span class="line"><span class="comment">	 **/</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> OAuth2Authorization <span class="title">findByToken</span><span class="params">(String token, @Nullable OAuth2TokenType tokenType)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> OAuth2AuthenticationException </span>&#123;</span><br><span class="line">		Assert.hasText(token, <span class="string">"token cannot be empty"</span>);</span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">if</span> (OAuth2ParameterNames.CODE.equals(tokenType.getValue())) &#123;</span><br><span class="line">			<span class="keyword">return</span> Optional.ofNullable(oauth2RedisTemplate.opsForValue().get(buildKey(tokenType.getValue(), token)))</span><br><span class="line">					.map(value -&gt; ((AuthCodeInfo) value).getAuthorization()).orElse(<span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">        ...</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"illegal tokenType: &#123;&#125;"</span> + tokenType.getValue());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><h2 id="2-RedisTemplate配置："><a class="header-anchor" href="#2-RedisTemplate配置：">¶</a>2. RedisTemplate配置：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(RedisAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">oauth2RedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory, Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; oauth2RedisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">		oauth2RedisTemplate.setKeySerializer(RedisSerializer.string());</span><br><span class="line">		oauth2RedisTemplate.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">		oauth2RedisTemplate.setValueSerializer(jackson2JsonRedisSerializer(builder));</span><br><span class="line">		oauth2RedisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer(builder));</span><br><span class="line">		oauth2RedisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">		<span class="keyword">return</span> oauth2RedisTemplate;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Jackson2JsonRedisSerializer&lt;Object&gt; <span class="title">jackson2JsonRedisSerializer</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line">		ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		builder.configure(objectMapper);</span><br><span class="line">		objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">		objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.WRAPPER_ARRAY);</span><br><span class="line"></span><br><span class="line">		objectMapper.registerModules(SecurityJackson2Modules.getModules(<span class="keyword">this</span>.getClass().getClassLoader()));</span><br><span class="line">		objectMapper.registerModule(<span class="keyword">new</span> OAuth2AuthorizationServerJackson2Module());</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// objectMapper.registerModule(AuthorizationGrantTypeDeserializer.authorizationGrantTypeJackson2Module());</span></span><br><span class="line">		<span class="comment">// objectMapper.registerModule(OAuth2AuthorizationTokenDeserializer.oAuth2AuthorizationTokenJackson2Module());</span></span><br><span class="line"></span><br><span class="line">		Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(</span><br><span class="line">				Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">		jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">		<span class="keyword">return</span> jackson2JsonRedisSerializer;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> GenericJackson2JsonRedisSerializer <span class="title">genericJackson2JsonRedisSerializer</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line">		ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		builder.configure(objectMapper);</span><br><span class="line">		objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">		objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL,</span><br><span class="line">				JsonTypeInfo.As.WRAPPER_ARRAY);</span><br><span class="line"></span><br><span class="line">		objectMapper.registerModules(SecurityJackson2Modules.getModules(<span class="keyword">this</span>.getClass().getClassLoader()));</span><br><span class="line">		objectMapper.registerModule(<span class="keyword">new</span> OAuth2AuthorizationServerJackson2Module());</span><br><span class="line">		<span class="comment">// objectMapper.registerModule(AuthorizationGrantTypeDeserializer.authorizationGrantTypeJackson2Module());</span></span><br><span class="line">		<span class="comment">// objectMapper.registerModule(OAuth2AuthorizationTokenDeserializer.oAuth2AuthorizationTokenJackson2Module());</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> GenericJackson2JsonRedisSerializer(objectMapper);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><h1>二、现象描述及复现</h1><ul><li><p>场景：如 <code>一、重点代码片段</code> 中所示, SAS开放OAuth2AuthorizationService接口，故而使用Redis持久化方式实现这个接口，并配置RedisTemplate使用jackson提供Jackson2JsonRedisSerializer或GenericJackson2JsonRedisSerializer来序列化OAuth2Authorization的实例。</p></li><li><p>期望: 实现对SAS授权信息的持久化和查询</p></li><li><p>BUG: 测试OAuth2授权流程时，获取访问令牌接口内部需要从redis中查出并验证授权码相关数据，触发OAuth2Authorization实例反序列化失败。</p></li></ul><h2 id="1-测试类复现："><a class="header-anchor" href="#1-测试类复现：">¶</a>1. 测试类复现：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zombie.auth</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JacksonDeserializeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSerialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UsernamePasswordAuthenticationToken principal = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</span><br><span class="line">                <span class="keyword">new</span> UserInfo(<span class="string">"userId"</span>, <span class="string">"zombieSessionId"</span>, <span class="string">"800"</span>), <span class="string">"requestId"</span>,</span><br><span class="line">                ImmutableList.of(<span class="keyword">new</span> SimpleGrantedAuthority(Constants.DEFAULT_ROLE)));</span><br><span class="line"></span><br><span class="line">        OAuth2AuthorizationRequest authorizationRequest = OAuth2AuthorizationRequest.authorizationCode()</span><br><span class="line">                .authorizationUri(<span class="string">"http://xxx/auth/authorize"</span>)</span><br><span class="line">                .clientId(<span class="string">"dsw"</span>)</span><br><span class="line">                .redirectUri(<span class="keyword">null</span>)</span><br><span class="line">                .scopes(Collections.unmodifiableSet(<span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">0</span>)))</span><br><span class="line">                .state(<span class="keyword">null</span>)</span><br><span class="line">                .additionalParameters(Collections.unmodifiableMap(<span class="keyword">new</span> HashMap(<span class="number">0</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        OAuth2AuthorizationCode authorizationCode = <span class="keyword">new</span> OAuth2AuthorizationCode(Identities.uuid(<span class="keyword">false</span>), Instant.now(), Instant.now().plus(<span class="number">200</span>, ChronoUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">        def builder = <span class="keyword">new</span> OAuth2Authorization.Builder(<span class="string">"dsw"</span>)</span><br><span class="line">        builder.id(<span class="string">"id"</span>)</span><br><span class="line">                .principalName(<span class="string">"principalName"</span>)</span><br><span class="line">                .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)</span><br><span class="line">                .token(authorizationCode)</span><br><span class="line">                .attribute(Principal<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">principal</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">attribute</span>(<span class="title">OAuth2AuthorizationRequest</span>.<span class="title">class</span>.<span class="title">getName</span>(), <span class="title">authorizationRequest</span>)</span></span><br><span class="line"><span class="class">                .<span class="title">attribute</span>(<span class="title">OAuth2Authorization</span>.<span class="title">AUTHORIZED_SCOPE_ATTRIBUTE_NAME</span>, <span class="title">Collections</span>.<span class="title">unmodifiableSet</span>(<span class="title">new</span> <span class="title">HashSet</span>&lt;&gt;(0)))</span>;</span><br><span class="line"></span><br><span class="line">        OAuth2Authorization authorization = builder.build()</span><br><span class="line"></span><br><span class="line">        println()</span><br><span class="line">        println()</span><br><span class="line">        println(<span class="string">"genericJackson2JsonRedisSerializer:     "</span> + <span class="keyword">new</span> String(genericJackson2JsonRedisSerializer().serialize(authorization)))</span><br><span class="line"></span><br><span class="line">        println()</span><br><span class="line">        println()</span><br><span class="line">        println(<span class="string">"jackson2JsonRedisSerializer:     "</span> + <span class="keyword">new</span> String(jackson2JsonRedisSerializer(Jackson2ObjectMapperBuilder.json()).serialize(authorization)))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeserialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String json = <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">         [</span></span><br><span class="line"><span class="string">              "org.springframework.security.oauth2.server.authorization.OAuth2Authorization",</span></span><br><span class="line"><span class="string">              &#123;</span></span><br><span class="line"><span class="string">               "id": "d9e8f19f-a8d3-451f-890f-45e04c02a56e",</span></span><br><span class="line"><span class="string">               "registeredClientId": "dsw",</span></span><br><span class="line"><span class="string">               "principalName": "UserInfo(userId=4123509892, zombieSessionId=f0dd137a-69d0-46f9-ad0f-5616d57d6f5d, loginRemainingTime=2591999)",</span></span><br><span class="line"><span class="string">               "tokens": [</span></span><br><span class="line"><span class="string">                "java.util.Collections$UnmodifiableMap",</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                 "org.springframework.security.oauth2.core.OAuth2AuthorizationCode": [</span></span><br><span class="line"><span class="string">                  "org.springframework.security.oauth2.server.authorization.OAuth2Authorization$Token",</span></span><br><span class="line"><span class="string">                  &#123;</span></span><br><span class="line"><span class="string">                   "token": [</span></span><br><span class="line"><span class="string">                    "org.springframework.security.oauth2.core.OAuth2AuthorizationCode",</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                     "tokenValue": "ee86efea7f8211ed8e04b0608818ebbf",</span></span><br><span class="line"><span class="string">                     "issuedAt": [</span></span><br><span class="line"><span class="string">                      "java.time.Instant",</span></span><br><span class="line"><span class="string">                      1671443583.815</span></span><br><span class="line"><span class="string">                     ],</span></span><br><span class="line"><span class="string">                     "expiresAt": [</span></span><br><span class="line"><span class="string">                      "java.time.Instant",</span></span><br><span class="line"><span class="string">                      1671443643.815</span></span><br><span class="line"><span class="string">                     ]</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                   ],</span></span><br><span class="line"><span class="string">                   "metadata": [</span></span><br><span class="line"><span class="string">                    "java.util.Collections$UnmodifiableMap",</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                     "metadata.token.invalidated": false</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                   ],</span></span><br><span class="line"><span class="string">                   "active": true,</span></span><br><span class="line"><span class="string">                   "expired": false,</span></span><br><span class="line"><span class="string">                   "claims": null,</span></span><br><span class="line"><span class="string">                   "invalidated": false,</span></span><br><span class="line"><span class="string">                   "beforeUse": false</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">                 ]</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">               ],</span></span><br><span class="line"><span class="string">               "attributes": [</span></span><br><span class="line"><span class="string">                "java.util.Collections$UnmodifiableMap",</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                 "java.security.Principal": [</span></span><br><span class="line"><span class="string">                  "org.springframework.security.authentication.UsernamePasswordAuthenticationToken",</span></span><br><span class="line"><span class="string">                  &#123;</span></span><br><span class="line"><span class="string">                   "authorities": [</span></span><br><span class="line"><span class="string">                    "java.util.Collections$UnmodifiableRandomAccessList",</span></span><br><span class="line"><span class="string">                    [</span></span><br><span class="line"><span class="string">                     [</span></span><br><span class="line"><span class="string">                      "org.springframework.security.core.authority.SimpleGrantedAuthority",</span></span><br><span class="line"><span class="string">                      &#123;</span></span><br><span class="line"><span class="string">                       "authority": "EMPTY"</span></span><br><span class="line"><span class="string">                      &#125;</span></span><br><span class="line"><span class="string">                     ]</span></span><br><span class="line"><span class="string">                    ]</span></span><br><span class="line"><span class="string">                   ],</span></span><br><span class="line"><span class="string">                   "details": null,</span></span><br><span class="line"><span class="string">                   "authenticated": true,</span></span><br><span class="line"><span class="string">                   "principal": [</span></span><br><span class="line"><span class="string">                    "com.zombie.auth.xo.dto.UserInfo",</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                     "userId": "4123509892",</span></span><br><span class="line"><span class="string">                     "zombieSessionId": "f0dd137a-69d0-46f9-ad0f-5616d57d6f5d",</span></span><br><span class="line"><span class="string">                     "loginRemainingTime": 2591999</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                   ],</span></span><br><span class="line"><span class="string">                   "credentials": "87s983h3n2823ne32d"</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">                 ],</span></span><br><span class="line"><span class="string">                 "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest": [</span></span><br><span class="line"><span class="string">                  "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationRequest",</span></span><br><span class="line"><span class="string">                  &#123;</span></span><br><span class="line"><span class="string">                   "authorizationUri": "http://***:7001/auth/authorize",</span></span><br><span class="line"><span class="string">                   "authorizationGrantType": [</span></span><br><span class="line"><span class="string">                    "org.springframework.security.oauth2.core.AuthorizationGrantType",</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                     "value": "authorization_code"</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                   ],</span></span><br><span class="line"><span class="string">                   "responseType": [</span></span><br><span class="line"><span class="string">                    "org.springframework.security.oauth2.core.endpoint.OAuth2AuthorizationResponseType",</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                     "value": "code"</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                   ],</span></span><br><span class="line"><span class="string">                   "clientId": "dsw",</span></span><br><span class="line"><span class="string">                   "redirectUri": null,</span></span><br><span class="line"><span class="string">                   "scopes": [</span></span><br><span class="line"><span class="string">                    "java.util.Collections$UnmodifiableSet",</span></span><br><span class="line"><span class="string">                    []</span></span><br><span class="line"><span class="string">                   ],</span></span><br><span class="line"><span class="string">                   "state": null,</span></span><br><span class="line"><span class="string">                   "additionalParameters": [</span></span><br><span class="line"><span class="string">                    "java.util.Collections$UnmodifiableMap",</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                     "m_session_id": "f0dd137a-69d0-46f9-ad0f-5616d57d6f5d",</span></span><br><span class="line"><span class="string">                     "instance_id": "dsw-1234567",</span></span><br><span class="line"><span class="string">                     "user_id": "4123509892",</span></span><br><span class="line"><span class="string">                     "request_id": "87s983h3n2823ne32d",</span></span><br><span class="line"><span class="string">                     "login_remaining_time": "2591999"</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                   ],</span></span><br><span class="line"><span class="string">                   "authorizationRequestUri": "http://***:7001/auth/authorize?response_type=code&amp;client_id=dsw&amp;m_session_id=f0dd137a-69d0-46f9-ad0f-5616d57d6f5d&amp;instance_id=dsw-1234567&amp;user_id=4123509892&amp;request_id=87s983h3n2823ne32d&amp;login_remaining_time=2591999",</span></span><br><span class="line"><span class="string">                   "attributes": [</span></span><br><span class="line"><span class="string">                    "java.util.Collections$UnmodifiableMap",</span></span><br><span class="line"><span class="string">                    &#123;&#125;</span></span><br><span class="line"><span class="string">                   ]</span></span><br><span class="line"><span class="string">                  &#125;</span></span><br><span class="line"><span class="string">                 ],</span></span><br><span class="line"><span class="string">                 "org.springframework.security.oauth2.server.authorization.OAuth2Authorization.AUTHORIZED_SCOPE": [</span></span><br><span class="line"><span class="string">                  "java.util.Collections$UnmodifiableSet",</span></span><br><span class="line"><span class="string">                  []</span></span><br><span class="line"><span class="string">                 ]</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">               ],</span></span><br><span class="line"><span class="string">               "accessToken": null,</span></span><br><span class="line"><span class="string">               "refreshToken": null</span></span><br><span class="line"><span class="string">              &#125;</span></span><br><span class="line"><span class="string">             ]</span></span><br><span class="line"><span class="string">         '</span><span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        def deserialize = genericJackson2JsonRedisSerializer().deserialize(json.getBytes());</span></span><br><span class="line">        def deserialize = jackson2JsonRedisSerializer(Jackson2ObjectMapperBuilder.json()).deserialize(json.getBytes());</span><br><span class="line">        println JSON.toJSONString(deserialize)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Jackson2JsonRedisSerializer&lt;Object&gt; <span class="title">jackson2JsonRedisSerializer</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        builder.configure(objectMapper);</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,</span><br><span class="line">                ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.WRAPPER_ARRAY);</span><br><span class="line"></span><br><span class="line">        objectMapper.registerModules(SecurityJackson2Modules.getModules(<span class="keyword">this</span>.getClass().getClassLoader()));</span><br><span class="line">        objectMapper.registerModule(<span class="keyword">new</span> OAuth2AuthorizationServerJackson2Module());</span><br><span class="line">        objectMapper.registerModule(AuthorizationGrantTypeDeserializer.authorizationGrantTypeJackson2Module());</span><br><span class="line"><span class="comment">//        objectMapper.addMixIn(OAuth2AuthorizationCode.class, OAuth2AuthorizationCodeMixin.class);</span></span><br><span class="line"><span class="comment">//        objectMapper.addMixIn(OAuth2Authorization.Token.class, OAuth2AuthorizationTokenMixin.class);</span></span><br><span class="line"><span class="comment">//        objectMapper.registerModule(OAuth2AuthorizationTokenDeserializer.oAuth2AuthorizationTokenJackson2Module());</span></span><br><span class="line"></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(</span><br><span class="line">                Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> jackson2JsonRedisSerializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> GenericJackson2JsonRedisSerializer <span class="title">genericJackson2JsonRedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,</span><br><span class="line">                ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.WRAPPER_ARRAY);</span><br><span class="line"></span><br><span class="line">        objectMapper.registerModules(SecurityJackson2Modules.getModules(<span class="keyword">this</span>.getClass().getClassLoader()));</span><br><span class="line">        objectMapper.registerModule(<span class="keyword">new</span> OAuth2AuthorizationServerJackson2Module());</span><br><span class="line">        objectMapper.registerModule(AuthorizationGrantTypeDeserializer.authorizationGrantTypeJackson2Module());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GenericJackson2JsonRedisSerializer(objectMapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-异常堆栈："><a class="header-anchor" href="#2-异常堆栈：">¶</a>2. 异常堆栈：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\Java\jdk1.8.0_281\bin\java.exe -ea -Didea.test.cyclic.buffer.size&#x3D;4194304 &quot;-javaagent:D:\JetBrains\IntelliJ IDEA 2022.2\lib\idea_rt.jar&#x3D;61799:D:\JetBrains\IntelliJ IDEA 2022.2\bin&quot; -Dfile.encoding&#x3D;UTF-8 -classpath C:\Users\zombie\AppData\Local\Temp\classpath635154597.jar com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 com.zombie.auth.JacksonDeserializeTest,testDeserialize</span><br><span class="line">15:40:49.502 [main] DEBUG org.springframework.security.jackson2.SecurityJackson2Modules - Loaded module org.springframework.security.jackson2.CoreJackson2Module, now registering</span><br><span class="line">15:40:49.513 [main] DEBUG org.springframework.security.jackson2.SecurityJackson2Modules - Cannot load module org.springframework.security.cas.jackson2.CasJackson2Module</span><br><span class="line">java.lang.ClassNotFoundException: org.springframework.security.cas.jackson2.CasJackson2Module</span><br><span class="line">	at java.net.URLClassLoader.findClass(URLClassLoader.java:382)</span><br><span class="line">	at java.lang.ClassLoader.loadClass(ClassLoader.java:418)</span><br><span class="line">	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:355)</span><br><span class="line">	at java.lang.ClassLoader.loadClass(ClassLoader.java:351)</span><br><span class="line">	at java.lang.Class.forName0(Native Method)</span><br><span class="line">	at java.lang.Class.forName(Class.java:348)</span><br><span class="line">	at org.springframework.util.ClassUtils.forName(ClassUtils.java:284)</span><br><span class="line">	at org.springframework.security.jackson2.SecurityJackson2Modules.loadAndGetInstance(SecurityJackson2Modules.java:102)</span><br><span class="line">	at org.springframework.security.jackson2.SecurityJackson2Modules.addToModulesList(SecurityJackson2Modules.java:141)</span><br><span class="line">	at org.springframework.security.jackson2.SecurityJackson2Modules.getModules(SecurityJackson2Modules.java:121)</span><br><span class="line">	at org.springframework.security.jackson2.SecurityJackson2Modules$getModules.call(Unknown Source)</span><br><span class="line">	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)</span><br><span class="line">	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115)</span><br><span class="line">	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)</span><br><span class="line">	at com.zombie.auth.JacksonDeserializeTest.jackson2JsonRedisSerializer(JacksonDeserializeTest.groovy:323)</span><br><span class="line">	at com.zombie.auth.JacksonDeserializeTest$jackson2JsonRedisSerializer.callStatic(Unknown Source)</span><br><span class="line">	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:55)</span><br><span class="line">	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:196)</span><br><span class="line">	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callStatic(AbstractCallSite.java:208)</span><br><span class="line">	at com.zombie.auth.JacksonDeserializeTest.testDeserialize(JacksonDeserializeTest.groovy:311)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)</span><br><span class="line">	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)</span><br><span class="line">	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)</span><br><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)</span><br><span class="line">	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)</span><br><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)</span><br><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)</span><br><span class="line">	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)</span><br><span class="line">	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)</span><br><span class="line">	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)</span><br><span class="line">	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)</span><br><span class="line">	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)</span><br><span class="line">	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)</span><br><span class="line">	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)</span><br><span class="line">	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)</span><br><span class="line">	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)</span><br><span class="line">	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)</span><br><span class="line">	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)</span><br><span class="line">	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)</span><br><span class="line">	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)</span><br><span class="line">	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)</span><br><span class="line">15:40:49.515 [main] DEBUG org.springframework.security.jackson2.SecurityJackson2Modules - Loaded module org.springframework.security.web.jackson2.WebJackson2Module, now registering</span><br><span class="line">15:40:49.517 [main] DEBUG org.springframework.security.jackson2.SecurityJackson2Modules - Loaded module org.springframework.security.web.server.jackson2.WebServerJackson2Module, now registering</span><br><span class="line">15:40:49.521 [main] DEBUG org.springframework.security.jackson2.SecurityJackson2Modules - Loaded module org.springframework.security.web.jackson2.WebServletJackson2Module, now registering</span><br><span class="line">15:40:49.525 [main] DEBUG org.springframework.security.jackson2.SecurityJackson2Modules - Loaded module org.springframework.security.oauth2.client.jackson2.OAuth2ClientJackson2Module, now registering</span><br><span class="line">15:40:49.525 [main] DEBUG org.springframework.security.jackson2.SecurityJackson2Modules - Loaded module com.fasterxml.jackson.datatype.jsr310.JavaTimeModule, now registering</span><br><span class="line"></span><br><span class="line">org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Cannot construct instance of &#96;org.springframework.security.oauth2.server.authorization.OAuth2Authorization$Token&#96; (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)</span><br><span class="line"> at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: org.springframework.security.oauth2.server.authorization.OAuth2Authorization[&quot;tokens&quot;]); nested exception is com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of &#96;org.springframework.security.oauth2.server.authorization.OAuth2Authorization$Token&#96; (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)</span><br><span class="line"> at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: org.springframework.security.oauth2.server.authorization.OAuth2Authorization[&quot;tokens&quot;])</span><br><span class="line"></span><br><span class="line">	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:75)</span><br><span class="line">	at org.springframework.data.redis.serializer.RedisSerializer$deserialize.call(Unknown Source)</span><br><span class="line">	at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)</span><br><span class="line">	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:115)</span><br><span class="line">	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:127)</span><br><span class="line">	at com.zombie.auth.JacksonDeserializeTest.testDeserialize(JacksonDeserializeTest.groovy:311)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)</span><br><span class="line">	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)</span><br><span class="line">	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)</span><br><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)</span><br><span class="line">	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)</span><br><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)</span><br><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)</span><br><span class="line">	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)</span><br><span class="line">	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)</span><br><span class="line">	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)</span><br><span class="line">	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)</span><br><span class="line">	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)</span><br><span class="line">	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)</span><br><span class="line">	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)</span><br><span class="line">	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)</span><br><span class="line">	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)</span><br><span class="line">	at com.intellij.rt.junit.IdeaTestRunner$Repeater$1.execute(IdeaTestRunner.java:38)</span><br><span class="line">	at com.intellij.rt.execution.junit.TestsRepeater.repeat(TestsRepeater.java:11)</span><br><span class="line">	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:35)</span><br><span class="line">	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)</span><br><span class="line">	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)</span><br><span class="line">Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of &#96;org.springframework.security.oauth2.server.authorization.OAuth2Authorization$Token&#96; (no Creators, like default constructor, exist): cannot deserialize from Object value (no delegate- or property-based Creator)</span><br><span class="line"> at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: org.springframework.security.oauth2.server.authorization.OAuth2Authorization[&quot;tokens&quot;])</span><br><span class="line">	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67)</span><br><span class="line">	at com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(DeserializationContext.java:1764)</span><br><span class="line">	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:400)</span><br><span class="line">	at com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1209)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1415)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:362)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:195)</span><br><span class="line">	at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:120)</span><br><span class="line">	at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromAny(AsArrayTypeDeserializer.java:71)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserializeWithType(UntypedObjectDeserializer.java:781)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:74)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)</span><br><span class="line">	at com.fasterxml.jackson.databind.ObjectMapper._readValue(ObjectMapper.java:4569)</span><br><span class="line">	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:2798)</span><br><span class="line">	at org.springframework.security.oauth2.server.authorization.jackson2.UnmodifiableMapDeserializer.deserialize(UnmodifiableMapDeserializer.java:52)</span><br><span class="line">	at org.springframework.security.oauth2.server.authorization.jackson2.UnmodifiableMapDeserializer.deserialize(UnmodifiableMapDeserializer.java:42)</span><br><span class="line">	at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:120)</span><br><span class="line">	at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromObject(AsArrayTypeDeserializer.java:61)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserializeWithType(MapDeserializer.java:482)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.impl.FieldProperty.deserializeAndSet(FieldProperty.java:147)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:402)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:195)</span><br><span class="line">	at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(AsArrayTypeDeserializer.java:120)</span><br><span class="line">	at com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromAny(AsArrayTypeDeserializer.java:71)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserializeWithType(UntypedObjectDeserializer.java:781)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:74)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)</span><br><span class="line">	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)</span><br><span class="line">	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3652)</span><br><span class="line">	at org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer.deserialize(Jackson2JsonRedisSerializer.java:73)</span><br><span class="line">	... 32 more</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code -1</span><br></pre></td></tr></table></figure><h2 id="3-分析"><a class="header-anchor" href="#3-分析">¶</a>3. 分析</h2><h3 id="3-1-运行异常测试方法，根据异常堆栈信息和相关重点源码分析："><a class="header-anchor" href="#3-1-运行异常测试方法，根据异常堆栈信息和相关重点源码分析：">¶</a>3.1 运行异常测试方法，根据异常堆栈信息和相关重点源码分析：</h3><p>（1）异常信息已经提示：<code>OAuth2Authorization$Token</code>这个类没有默认构造方法，导致Jackson无法将json正常反序列化为<code>OAuth2Authorization$Token</code>实例</p><p>（2）虽然SAS提供了<code>OAuth2AuthorizationServerJackson2Module</code>，用于支持Jackson对其内部的一些没有默认构造方法的类正常进行（反）序列化，但这个jackson-support-module是SAS为官方提供的JDBC持久化实现提供的jackson序列化解决方案（如下图），而JDBC对<code>OAuth2Authorization</code>实例进行持久化时，是通过内部的<code>OAuth2AuthorizationParametersMapper.class</code>将<code>OAuth2Authorization</code>实例的属性拆解，再使用Jackson序列化后，以多个表字段最终落表。同样反序列化也同理，再将多个表字段数据组装到<code>OAuth2Authorization</code>中。</p><p><img src="https://gitee.com/zombiesouls/markdown_img_repo/raw/master/img/image-20221223152239124-20230226194325592.png" alt="image-20221223152239124"></p><p>![image-20221223152239124](/Users/apple/Desktop/202104-202303/Desktop/MaaS\Maas-Auth问题记录：OAuth2 Server&amp;Client序列化问题.assets\image-20221223152239124.png)</p><p>（3）尽管Jackson官方为此类问题提供了 <a href="https://www.grabanotherbyte.com/en/jackson/2020/10/18/jackson-mixins.html" target="_blank" rel="noopener">Annotations Mixin</a> 、 <a href="https://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers" target="_blank" rel="noopener">SimpleModule</a> 无侵入、可插拔的解决方案，但是<code>org.springframework.security.oauth2.server.authorization.OAuth2Authorization.Token</code>并不支持从外部创建，所以无法通过自定义Deserializer实现这个类的反序列化。</p><p>而看SAS（<code>org.springframework.security.oauth2.server.authorization.JdbcOAuth2AuthorizationService</code>）的实现，并不是将<code>OAuth2Authorization</code>实例整体序列化，以此兼顾避免外部构造出内部类和json数据反序列化到内部类，比如：<code>org.springframework.security.oauth2.server.authorization.OAuth2Authorization.Token</code>。所以SAS官方尚未提供Redis持久化实现方案，但是仍然向用户开放接口。。。</p><h3 id="3-2-结论："><a class="header-anchor" href="#3-2-结论：">¶</a>3.2 结论：</h3><ul><li><p>经分析和复现，SAS开放了持久化接口（org.springframework.security.oauth2.server.authorization.OAuth2AuthorizationService），但未提供Redis持久化，且对授权信息（OAuth2Authorization实例）进行json序列化的实现方案。</p></li><li><p>现状：出于前期业务需求，自定义实现Redis持久化方式，使用Redis默认的JDK序列化方式来维护SAS授权信息。可维持现状，以后搭建JDBC环境，迁移至SAS提供的JDBC持久化授权信息实现。</p></li></ul><h1>三、 OAUTH2 Client 重点代码片段</h1><h2 id="1-Spring-OAuth2-Client-配置："><a class="header-anchor" href="#1-Spring-OAuth2-Client-配置：">¶</a>1. Spring OAuth2 Client 配置：</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.properties</span></span><br><span class="line"><span class="meta">spring.session.store-type</span>=<span class="string">redis</span></span><br></pre></td></tr></table></figure><h2 id="2-Spring-Session-序列化配置："><a class="header-anchor" href="#2-Spring-Session-序列化配置：">¶</a>2. Spring Session 序列化配置：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionConfig</span> <span class="keyword">implements</span> <span class="title">BeanClassLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ClassLoader loader;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanClassLoader</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.loader = classLoader;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisSerializer&lt;Object&gt; <span class="title">springSessionDefaultRedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> GenericJackson2JsonRedisSerializer(objectMapper());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ObjectMapper <span class="title">objectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		mapper.registerModules(SecurityJackson2Modules.getModules(<span class="keyword">this</span>.loader));</span><br><span class="line">		<span class="keyword">return</span> mapper;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-云账号授权绑定回调-API："><a class="header-anchor" href="#3-云账号授权绑定回调-API：">¶</a>3. 云账号授权绑定回调 API：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/api/v1/auth/aliyun/oauth/binding"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binding</span><span class="params">(HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                    @RequestParam(<span class="string">"request_id"</span>)</span> @<span class="title">NotBlank</span><span class="params">(message = <span class="string">"请求id不能为空"</span>)</span> String requestId,</span></span><br><span class="line"><span class="function">                    @<span class="title">RequestParam</span><span class="params">(<span class="string">"callback_url"</span>)</span> @<span class="title">NotBlank</span><span class="params">(message = <span class="string">"业务回调地址不能为空"</span>)</span> @<span class="title">URL</span><span class="params">(message = <span class="string">"业务回调地址不是合法URL"</span>)</span> String callbackUrl,</span></span><br><span class="line"><span class="function">                    @<span class="title">RequestParam</span><span class="params">(<span class="string">"mass_user_id"</span>)</span> @<span class="title">NotBlank</span><span class="params">(message = <span class="string">"用户id不能为空"</span>)</span> String encryptedUserId,</span></span><br><span class="line"><span class="function">                    @<span class="title">CookieValue</span><span class="params">(value = <span class="string">"m_session_id"</span>)</span> @<span class="title">NotBlank</span><span class="params">(message = <span class="string">"m_session_id不能为空"</span>)</span> String currentSessionId,</span></span><br><span class="line"><span class="function">                    @<span class="title">RegisteredOAuth2AuthorizedClient</span><span class="params">(<span class="string">"aliyun"</span>)</span> OAuth2AuthorizedClient authorizedAliyunClient,</span></span><br><span class="line"><span class="function">                    @AuthenticationPrincipal OAuth2User aliyunUser,</span></span><br><span class="line"><span class="function">                    HttpSession session) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	...</span><br><span class="line">    <span class="comment">// 账号绑定处理逻辑 </span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>四、现象描述及复现</h1><ul><li><p>场景：如 <code>一、重点代码片段</code> 中所示, 当请求云账号绑定回调接口时，需要客户端实例信息（里面包含本次授权成功颁发的访问令牌相关信息）和阿里云主账号信息，此时Spring OAuth Client组件会读取session信息来恢复客户端实例信息，Spring Session组件此时也会通过SessionRepository接口获取Redis中的session数据 ，通过Jackson反序列化Session数据。</p></li><li><p>期望: 在云账号绑定流程中，在阿里云应用侧完成授权之后，跳转回zombie-auth应用侧，可以将redis缓存的本次请求生成的session数据反序列化出来，回调云账号绑定接口方法时，初始化阿里云账号信息（<code>OAuth2User aliyunUser</code>）和客户端信息（<code>OAuth2AuthorizedClient authorizedAliyunClient</code>）</p></li><li><p>BUG: Spring Session通过Jackson反序列化session缓存失败，异常如下：</p></li></ul><h2 id="1-异常堆栈："><a class="header-anchor" href="#1-异常堆栈：">¶</a>1. 异常堆栈：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2022-12-23 17:47:56 ERROR  [http-nio-7001-exec-3] OAuth2AuthorizationRequestRedirectFilter : Authorization Request failed: org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Could not resolve subtype of [simple type, class java.lang.Object]: missing type id property &#39;@class&#39; at [Source: (byte[])&quot;&#123;&quot;principals&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]],&quot;readOnly&quot;:false,&quot;privateCredentials&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]],&quot;publicCredentials&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]]&#125;&quot;; line: 1, column: 207]; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class java.lang.Object]: missing type id property &#39;@class&#39;</span><br><span class="line"> at [Source: (byte[])&quot;&#123;&quot;principals&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]],&quot;readOnly&quot;:false,&quot;privateCredentials&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]],&quot;publicCredentials&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]]&#125;&quot;; line: 1, column: 207]</span><br><span class="line">org.springframework.data.redis.serializer.SerializationException: Could not read JSON: Could not resolve subtype of [simple type, class java.lang.Object]: missing type id property &#39;@class&#39;</span><br><span class="line"> at [Source: (byte[])&quot;&#123;&quot;principals&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]],&quot;readOnly&quot;:false,&quot;privateCredentials&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]],&quot;publicCredentials&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]]&#125;&quot;; line: 1, column: 207]; nested exception is com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class java.lang.Object]: missing type id property &#39;@class&#39;</span><br><span class="line"> at [Source: (byte[])&quot;&#123;&quot;principals&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]],&quot;readOnly&quot;:false,&quot;privateCredentials&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]],&quot;publicCredentials&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]]&#125;&quot;; line: 1, column: 207]</span><br><span class="line">	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.deserialize(GenericJackson2JsonRedisSerializer.java:152)</span><br><span class="line">	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.deserialize(GenericJackson2JsonRedisSerializer.java:130)</span><br><span class="line">	at org.springframework.data.redis.core.AbstractOperations.deserializeHashValue(AbstractOperations.java:355)</span><br><span class="line">	at org.springframework.data.redis.core.AbstractOperations.deserializeHashMap(AbstractOperations.java:299)</span><br><span class="line">	at org.springframework.data.redis.core.DefaultHashOperations.entries(DefaultHashOperations.java:247)</span><br><span class="line">	at org.springframework.data.redis.core.DefaultBoundHashOperations.entries(DefaultBoundHashOperations.java:183)</span><br><span class="line">	at org.springframework.session.data.redis.RedisIndexedSessionRepository.getSession(RedisIndexedSessionRepository.java:457)</span><br><span class="line">	at org.springframework.session.data.redis.RedisIndexedSessionRepository.findById(RedisIndexedSessionRepository.java:429)</span><br><span class="line">	at org.springframework.session.data.redis.RedisIndexedSessionRepository.findById(RedisIndexedSessionRepository.java:251)</span><br><span class="line">	at org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper.getRequestedSession(SessionRepositoryFilter.java:356)</span><br><span class="line">	at org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper.getRequestedSessionId(SessionRepositoryFilter.java:338)</span><br><span class="line">	at org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper.commitSession(SessionRepositoryFilter.java:228)</span><br><span class="line">	at org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryRequestWrapper.access$100(SessionRepositoryFilter.java:193)</span><br><span class="line">	at org.springframework.session.web.http.SessionRepositoryFilter$SessionRepositoryResponseWrapper.onResponseCommitted(SessionRepositoryFilter.java:180)</span><br><span class="line">	at org.springframework.session.web.http.OnCommittedResponseWrapper.doOnResponseCommitted(OnCommittedResponseWrapper.java:227)</span><br><span class="line">	at org.springframework.session.web.http.OnCommittedResponseWrapper.sendRedirect(OnCommittedResponseWrapper.java:129)</span><br><span class="line">	at javax.servlet.http.HttpServletResponseWrapper.sendRedirect(HttpServletResponseWrapper.java:138)</span><br><span class="line">	at org.springframework.security.web.firewall.FirewalledResponse.sendRedirect(FirewalledResponse.java:48)</span><br><span class="line">	at javax.servlet.http.HttpServletResponseWrapper.sendRedirect(HttpServletResponseWrapper.java:138)</span><br><span class="line">	at org.springframework.security.web.util.OnCommittedResponseWrapper.sendRedirect(OnCommittedResponseWrapper.java:136)</span><br><span class="line">	at javax.servlet.http.HttpServletResponseWrapper.sendRedirect(HttpServletResponseWrapper.java:138)</span><br><span class="line">	at org.springframework.security.web.util.OnCommittedResponseWrapper.sendRedirect(OnCommittedResponseWrapper.java:136)</span><br><span class="line">	at org.springframework.security.web.DefaultRedirectStrategy.sendRedirect(DefaultRedirectStrategy.java:59)</span><br><span class="line">	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.sendRedirectForAuthorization(OAuth2AuthorizationRequestRedirectFilter.java:218)</span><br><span class="line">	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:169)</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)</span><br><span class="line">	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)</span><br><span class="line">	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)</span><br><span class="line">	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)</span><br><span class="line">	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)</span><br><span class="line">	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)</span><br><span class="line">	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)</span><br><span class="line">	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)</span><br><span class="line">	at com.zombie.auth.config.AliyunOauthClientConfig.lambda$aliyunClientSecurityFilterChain$0(AliyunOauthClientConfig.java:58)</span><br><span class="line">	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)</span><br><span class="line">	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)</span><br><span class="line">	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)</span><br><span class="line">	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)</span><br><span class="line">	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)</span><br><span class="line">	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)</span><br><span class="line">	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)</span><br><span class="line">	at sun.reflect.GeneratedMethodAccessor351.invoke(Unknown Source)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.lambda$execute$0(SecurityUtil.java:280)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAsPrivileged(Subject.java:549)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:311)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:187)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.lambda$doFilter$0(ApplicationFilterChain.java:145)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:143)</span><br><span class="line">	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)</span><br><span class="line">	at sun.reflect.GeneratedMethodAccessor351.invoke(Unknown Source)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.lambda$execute$0(SecurityUtil.java:280)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAsPrivileged(Subject.java:549)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:311)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:187)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.lambda$doFilter$0(ApplicationFilterChain.java:145)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:143)</span><br><span class="line">	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.lambda$execute$0(SecurityUtil.java:280)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAsPrivileged(Subject.java:549)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:311)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:187)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.lambda$doFilter$0(ApplicationFilterChain.java:145)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:143)</span><br><span class="line">	at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:142)</span><br><span class="line">	at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:82)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.lambda$execute$0(SecurityUtil.java:280)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAsPrivileged(Subject.java:549)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:311)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:187)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.lambda$doFilter$0(ApplicationFilterChain.java:145)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:143)</span><br><span class="line">	at org.zalando.logbook.servlet.LogbookFilter.doFilter(LogbookFilter.java:74)</span><br><span class="line">	at org.zalando.logbook.servlet.SecureLogbookFilter.doFilter(SecureLogbookFilter.java:32)</span><br><span class="line">	at org.zalando.logbook.servlet.HttpFilter.doFilter(HttpFilter.java:31)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.lambda$execute$0(SecurityUtil.java:280)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAsPrivileged(Subject.java:549)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:311)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:187)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.lambda$doFilter$0(ApplicationFilterChain.java:145)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:143)</span><br><span class="line">	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:96)</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.lambda$execute$0(SecurityUtil.java:280)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAsPrivileged(Subject.java:549)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:311)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:187)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.lambda$doFilter$0(ApplicationFilterChain.java:145)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:143)</span><br><span class="line">	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.lambda$execute$0(SecurityUtil.java:280)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAsPrivileged(Subject.java:549)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:311)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:187)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.lambda$doFilter$0(ApplicationFilterChain.java:145)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:143)</span><br><span class="line">	at com.zombie.auth.filter.DumbSessionFilter.doFilterInternal(DumbSessionFilter.kt:23)</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.lambda$execute$0(SecurityUtil.java:280)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAsPrivileged(Subject.java:549)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:311)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:187)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.lambda$doFilter$0(ApplicationFilterChain.java:145)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:143)</span><br><span class="line">	at com.zombie.auth.config.web.FilterExceptionHandler.doFilterInternal(FilterExceptionHandler.java:32)</span><br><span class="line">	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.lambda$execute$0(SecurityUtil.java:280)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at javax.security.auth.Subject.doAsPrivileged(Subject.java:549)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.execute(SecurityUtil.java:311)</span><br><span class="line">	at org.apache.catalina.security.SecurityUtil.doAsPrivilege(SecurityUtil.java:253)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:187)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.lambda$doFilter$0(ApplicationFilterChain.java:145)</span><br><span class="line">	at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:143)</span><br><span class="line">	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)</span><br><span class="line">	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)</span><br><span class="line">	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)</span><br><span class="line">	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)</span><br><span class="line">	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)</span><br><span class="line">	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)</span><br><span class="line">	at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:769)</span><br><span class="line">	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)</span><br><span class="line">	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)</span><br><span class="line">	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)</span><br><span class="line">	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889)</span><br><span class="line">	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)</span><br><span class="line">	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span><br><span class="line">	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)</span><br><span class="line">	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)</span><br><span class="line">	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Caused by: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve subtype of [simple type, class java.lang.Object]: missing type id property &#39;@class&#39;</span><br><span class="line"> at [Source: (byte[])&quot;&#123;&quot;principals&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]],&quot;readOnly&quot;:false,&quot;privateCredentials&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]],&quot;publicCredentials&quot;:[&quot;java.util.Collections$SynchronizedSet&quot;,[]]&#125;&quot;; line: 1, column: 207]</span><br><span class="line">	at com.fasterxml.jackson.databind.exc.InvalidTypeIdException.from(InvalidTypeIdException.java:43)</span><br><span class="line">	at com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(DeserializationContext.java:1943)</span><br><span class="line">	at com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(DeserializationContext.java:1456)</span><br><span class="line">	at com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleMissingTypeId(TypeDeserializerBase.java:307)</span><br><span class="line">	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(AsPropertyTypeDeserializer.java:180)</span><br><span class="line">	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(AsPropertyTypeDeserializer.java:115)</span><br><span class="line">	at com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromAny(AsPropertyTypeDeserializer.java:208)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer$Vanilla.deserializeWithType(UntypedObjectDeserializer.java:781)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(TypeWrappedDeserializer.java:74)</span><br><span class="line">	at com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.readRootValue(DefaultDeserializationContext.java:322)</span><br><span class="line">	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4593)</span><br><span class="line">	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3609)</span><br><span class="line">	at org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer.deserialize(GenericJackson2JsonRedisSerializer.java:150)</span><br><span class="line">	... 191 common frames omitted</span><br></pre></td></tr></table></figure><h2 id="2-通过测试类复现："><a class="header-anchor" href="#2-通过测试类复现：">¶</a>2. 通过测试类复现：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zombie.auth</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionDeserializeTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDeserializeSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String json = <span class="string">''</span><span class="string">'</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">         "principals": [</span></span><br><span class="line"><span class="string">                  "java.util.Collections$SynchronizedSet",</span></span><br><span class="line"><span class="string">                  []</span></span><br><span class="line"><span class="string">         ],</span></span><br><span class="line"><span class="string">         "readOnly": false,</span></span><br><span class="line"><span class="string">         "privateCredentials": [</span></span><br><span class="line"><span class="string">                  "java.util.Collections$SynchronizedSet",</span></span><br><span class="line"><span class="string">                  []</span></span><br><span class="line"><span class="string">         ],</span></span><br><span class="line"><span class="string">         "publicCredentials": [</span></span><br><span class="line"><span class="string">                  "java.util.Collections$SynchronizedSet",</span></span><br><span class="line"><span class="string">                  [</span></span><br><span class="line"><span class="string">                           1,</span></span><br><span class="line"><span class="string">                           2</span></span><br><span class="line"><span class="string">                  ]</span></span><br><span class="line"><span class="string">         ]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        '</span><span class="string">''</span></span><br><span class="line">            </span><br><span class="line">        def deserialize = springSessionDefaultRedisJacksonSerializer().deserialize(json.getBytes());</span><br><span class="line">        println JSON.toJSONString(deserialize)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSerializeSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        def subject = <span class="keyword">new</span> Subject(<span class="keyword">false</span>, ImmutableSet.of(), ImmutableSet.of(<span class="number">1</span>, <span class="number">2</span>), ImmutableSet.of())</span><br><span class="line">        <span class="function">println new <span class="title">String</span><span class="params">(springSessionDefaultRedisJacksonSerializer()</span>.<span class="title">serialize</span><span class="params">(subject)</span>)</span></span><br><span class="line"><span class="function">        println new <span class="title">String</span><span class="params">(springSessionDefaultRedisFastjsonSerializer()</span>.<span class="title">serialize</span><span class="params">(subject)</span>)</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">static</span> RedisSerializer&lt;Object&gt; <span class="title">springSessionDefaultRedisJacksonSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.json()</span></span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="comment">//        builder.configure(objectMapper);</span></span><br><span class="line">        objectMapper.registerModules(SecurityJackson2Modules.getModules(<span class="keyword">this</span>.getClass().getClassLoader()));</span><br><span class="line"><span class="comment">//        objectMapper.addMixIn(Subject.class, SessionConfig.SubjectMixin.class);</span></span><br><span class="line"><span class="comment">//        objectMapper.addMixIn(Collections.synchronizedSet(Collections.emptySet()).getClass(),</span></span><br><span class="line"><span class="comment">//                SessionConfig.SynchronizedSetMixin.class);</span></span><br><span class="line">        GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer = <span class="keyword">new</span> GenericJackson2JsonRedisSerializer(objectMapper)</span><br><span class="line">        <span class="keyword">return</span> genericJackson2JsonRedisSerializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> RedisSerializer&lt;Object&gt; <span class="title">springSessionDefaultRedisFastjsonSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; SERIALIZE_WHITE_LIST = Lists.newArrayList(</span><br><span class="line">                <span class="string">"org.springframework.security.core.context.SecurityContextImpl"</span>,</span><br><span class="line">                <span class="string">"org.springframework.security.authentication.UsernamePasswordAuthenticationToken"</span>,</span><br><span class="line">                <span class="string">"org.springframework.security.core.authority.SimpleGrantedAuthority"</span>,</span><br><span class="line">                <span class="string">"org.springframework.security.web.savedrequest.DefaultSavedRequest"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ParserConfig autoTypeConfig = <span class="keyword">new</span> ParserConfig();</span><br><span class="line">        autoTypeConfig.setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        SERIALIZE_WHITE_LIST.forEach(autoTypeConfig.&amp;addAccept);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisSerializer&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object obj) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> JSON.toJSONString(obj, SerializerFeature.WriteClassName).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> JSON.parse(<span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8), autoTypeConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-分析-v2"><a class="header-anchor" href="#3-分析-v2">¶</a>3. 分析</h2><h3 id="3-1-根据异常堆栈和源码分析："><a class="header-anchor" href="#3-1-根据异常堆栈和源码分析：">¶</a>3.1 根据异常堆栈和源码分析：</h3><p>（1）异常堆栈已经说明异常发生于：<code>org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter#sendRedirectForAuthorization</code>方法，所以本地请求接口对异常方法debug，如下图所示：</p><p>![image-20221223183210669](/Users/apple/Desktop/202104-202303/Desktop/MaaS/Maas-Auth问题记录：OAuth2 Server&amp;Client序列化问题.assets/image-20221223183210669.png)</p><p>（2）我们不需要关注太多授权获取阿里云用户信息的流程。这里只介绍异常触发的背景：</p><p>OAuth2AuthorizationRequestRedirectFilter作用就是当请求云账号绑定接口时，匹配这个请求，构造一个请求授权码URL重定向到授权服务端（即：阿里云OAUTH2授权服务侧）。此时响应写入sessionId时需要查询之前缓存的session信息，此时Jackson反序列化session中<code>javax.security.auth.Subject</code>数据失败了。数据内容如下图：</p><p><img src="https://gitee.com/zombiesouls/markdown_img_repo/raw/master/img/image-20221223180951042.png" alt="SpringSession缓存"></p><h3 id="3-2-运行异常测试方法复现后分析："><a class="header-anchor" href="#3-2-运行异常测试方法复现后分析：">¶</a>3.2 运行异常测试方法复现后分析：</h3><p>（1）经对<code>javax.security.auth.Subject</code>类源码的查看发现：</p><p>它是允许从外部创建的，但是是final访问符修饰，所以序列化出来的json数据缺少@class这个字段；</p><p>而且成员属性（<code>pubCredentials</code>、<code>privCredentials</code>）序列化后是<code>java.util.Collections.SynchronizedSet</code>类型，这个类型没有公共构造方法；但是可以通过<code>java.util.Collections#synchronizedSet(java.util.Set&lt;T&gt;)</code>方法创建；</p><p>以上两点导致Jackson对其反序列化失败。</p><p>（2）此时可利用排查SAS反序列化失败问题时的经验，Jackson官方为此类问题提供了 <a href="https://www.grabanotherbyte.com/en/jackson/2020/10/18/jackson-mixins.html" target="_blank" rel="noopener">Annotations Mixin</a> 、 <a href="https://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers" target="_blank" rel="noopener">SimpleModule</a> 无侵入、可插拔的解决方案，所以我可以为这两个java类型自定义Mixin类和Deserializer来解决这个问题。</p><p>（3）原因和解决方案已经排查出来了，但是寻找解决方案时，发现Spring Session支持Redis持久化Session实现，官方对于这个BUG并没有发布公共的解决方案。所以还得继续排查。。</p><h3 id="3-3-对源码进行跟踪分析："><a class="header-anchor" href="#3-3-对源码进行跟踪分析：">¶</a>3.3 对源码进行跟踪分析：</h3><p>（1）之前排查Jackson对<code>javax.security.auth.Subject</code>类反序列化失败时，跟踪源码发现，Subject实例并不是在Spring Oauth2 Client的过滤器链处理请求时写入Session的，而是由tomcat提供的<code>org.apache.catalina.cor.ApplicationFilterChain:180</code>调用<code>SecurityUtil.doAsPrivilege (&quot;doFilter&quot;, filter, classType, args, principal);</code>将<code>javax.security.auth.Subject</code>类写入Session。这个是tomcat提供的过滤器链处理请求时触发的写入行为（源码如下）。</p><p>此时看起来tomcat的Filter将一个这么基础的类写入session的行为，需要排查一下Spring Session官方是否让这个第三方但是很底层的类影响Session正常通过Redis读写。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implementation of &lt;code&gt;javax.servlet.FilterChain&lt;/code&gt; used to manage</span></span><br><span class="line"><span class="comment"> * the execution of a set of filters for a particular request.  When the</span></span><br><span class="line"><span class="comment"> * set of defined filters has all been executed, the next call to</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;doFilter()&lt;/code&gt; will execute the servlet's &lt;code&gt;service()&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * method itself.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Craig R. McClanahan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationFilterChain</span> <span class="keyword">implements</span> <span class="title">FilterChain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------------------------------------- FilterChain Methods</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Invoke the next filter in this chain, passing the specified request</span></span><br><span class="line"><span class="comment">     * and response.  If there are no more filters in this chain, invoke</span></span><br><span class="line"><span class="comment">     * the &lt;code&gt;service()&lt;/code&gt; method of the servlet itself.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request The servlet request we are processing</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response The servlet response we are creating</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> IOException if an input/output error occurs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> ServletException if a servlet exception occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    	<span class="comment">// 注意此处：1</span></span><br><span class="line">        <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">            <span class="keyword">final</span> ServletRequest req = request;</span><br><span class="line">            <span class="keyword">final</span> ServletResponse res = response;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                java.security.AccessController.doPrivileged(</span><br><span class="line">                        (java.security.PrivilegedExceptionAction&lt;Void&gt;) () -&gt; &#123;</span><br><span class="line">                            internalDoFilter(req,res);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span>( PrivilegedActionException pe) &#123;</span><br><span class="line">                Exception e = pe.getException();</span><br><span class="line">                <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ServletException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (ServletException) e;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (IOException) e;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> (RuntimeException) e;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 注意此处：2</span></span><br><span class="line">            internalDoFilter(request,response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意此处：3</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">internalDoFilter</span><span class="params">(ServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  ServletResponse response)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Call the next filter if there is one</span></span><br><span class="line">        <span class="keyword">if</span> (pos &lt; n) &#123;</span><br><span class="line">            ApplicationFilterConfig filterConfig = filters[pos++];</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Filter filter = filterConfig.getFilter();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (request.isAsyncSupported() &amp;&amp; <span class="string">"false"</span>.equalsIgnoreCase(</span><br><span class="line">                        filterConfig.getFilterDef().getAsyncSupported())) &#123;</span><br><span class="line">                    request.setAttribute(Globals.ASYNC_SUPPORTED_ATTR, Boolean.FALSE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 注意此处：4</span></span><br><span class="line">                <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">                    <span class="keyword">final</span> ServletRequest req = request;</span><br><span class="line">                    <span class="keyword">final</span> ServletResponse res = response;</span><br><span class="line">                    Principal principal =</span><br><span class="line">                        ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line"></span><br><span class="line">                    Object[] args = <span class="keyword">new</span> Object[]&#123;req, res, <span class="keyword">this</span>&#125;;</span><br><span class="line">                    <span class="comment">// 注意此处：5</span></span><br><span class="line">                    SecurityUtil.doAsPrivilege (<span class="string">"doFilter"</span>, filter, classType, args, principal);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    filter.doFilter(request, response, <span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException | ServletException | RuntimeException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                e = ExceptionUtils.unwrapInvocationTargetException(e);</span><br><span class="line">                ExceptionUtils.handleThrowable(e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(sm.getString(<span class="string">"filterChain.filter"</span>), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">		...</span><br></pre></td></tr></table></figure><p>（2）分析云账号绑定功能流程本质就是基于OIDC协议，完成一次向阿里云授权服务侧的OAuth2授权后云账号信息的获取，所以写一个demo工程，提供类似云账号绑定回调的简版接口。这么做是因为session的读写有可能存在其他组件侵入，所以只能通过这个笨办法验证一下猜想。</p><p>（3）首先使用和zombie-auth同版本的组件，创建一个demo工程，只引入授权绑定接口相关的依赖，复用和zombie-auth工程一样的SpringSession的Jackson序列化配置，Spring Oauth2 Client配置，编写简版的云账号绑定接口。调用同样的接口进行对比测试</p><blockquote><p>版本信息如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;spring-boot: 2.5.12</span><br><span class="line">&gt;spring-boot-starter-json: 2.5.12 (jackson*: 2.12.6)</span><br><span class="line">&gt;spring-boot-starter-oauth2-client: 2.5.12</span><br><span class="line">&gt;spring-session-data-redis: 2.5.5</span><br></pre></td></tr></table></figure></blockquote><p>（2）通过观察demo工程缓存的session序列化数据，差异对比出来了：demo工程中同样走完账号绑定接口，但是整个过程中，tomcat的过滤器链并没有将Subject信息存储到Session中去，经对源码追溯后，demo工程中的tomcat-server中存在一个公共开关属性：<code>org.apache.catalina.Globals#IS_SECURITY_ENABLED</code>发现tomcat通过判断应用是否存在<code>java.lang.SecurityManager</code>实例。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Global constants that are applicable to multiple packages within Catalina.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Craig R. McClanahan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Globals</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Has security been turned on?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> IS_SECURITY_ENABLED = (System.getSecurityManager() != <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>经过一步步排查，最终发现了问题的源头，如下图：</p><p><img src="https://gitee.com/zombiesouls/markdown_img_repo/raw/master/img/image-20221223205743076.png" alt="image-20221223205743076"></p><p>由于zombie-auth工程依赖集团安全必需组件：<code>rass-spring-context</code>，但该组件在工程启动时，会注册一个安全管理器实例，间接导致tomcat-server动态开启了开关属性（<code>org.apache.catalina.Globals#IS_SECURITY_ENABLED</code>），最终导致tomcat处理云账号绑定请求时，向session写入了非Spring Session官方预期的第三方数据（<code>javax.security.auth.Subject</code>)，所以Spring Session无法提供非预期数据的Jackson序列化Mixin解决方案）也是合理的；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.catalina.core;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationFilterChain</span> <span class="keyword">implements</span> <span class="title">FilterChain</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span>( Globals.IS_SECURITY_ENABLED ) &#123;</span><br><span class="line">        <span class="keyword">final</span> ServletRequest req = request;</span><br><span class="line">        <span class="keyword">final</span> ServletResponse res = response;</span><br><span class="line">        Principal principal =</span><br><span class="line">            ((HttpServletRequest) req).getUserPrincipal();</span><br><span class="line"></span><br><span class="line">        Object[] args = <span class="keyword">new</span> Object[]&#123;req, res, <span class="keyword">this</span>&#125;;</span><br><span class="line">        <span class="comment">// 内部将Subject写入了session</span></span><br><span class="line">        SecurityUtil.doAsPrivilege (<span class="string">"doFilter"</span>, filter, classType, args, principal);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        filter.doFilter(request, response, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h3 id="3-4-结论："><a class="header-anchor" href="#3-4-结论：">¶</a>3.4 结论：</h3><ul><li><p>经分析和复现：由于zombie-auth工程依赖集团安全必需组件：<code>rass-spring-context</code>，但该组件在工程启动时，会注册一个安全管理器实例，间接导致tomcat-server动态开启了开关属性（<code>org.apache.catalina.Globals#IS_SECURITY_ENABLED</code>），最终导致tomcat处理云账号绑定请求时，向session写入了<code>javax.security.auth.Subject</code>，最终Spring Session缓存了非官方预期的第三方数据，所以SpringSession无法提供非预期数据的Jackson序列化Mixin解决方案）。</p></li><li><p>解决方案：目前使用Spring Session默认的JDK序列化方式。因无法排除集团安全组件对session的间接影响，可考虑基于Jackson Annotations MixIn方式，自定义相关的Deserailizer和Mixin来做Spring Session的Jackson序列化的兼容处理。 如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zombie.auth.config;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * session 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> lj on 2022/12/20</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionConfig</span> <span class="keyword">implements</span> <span class="title">BeanClassLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ClassLoader loader;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanClassLoader</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.loader = classLoader;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisSerializer&lt;Object&gt; <span class="title">springSessionDefaultRedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> GenericJackson2JsonRedisSerializer(objectMapper());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ObjectMapper <span class="title">objectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">		mapper.registerModules(SecurityJackson2Modules.getModules(<span class="keyword">this</span>.loader));</span><br><span class="line">		<span class="comment">// mapper.addMixIn(Subject.class, SessionConfig.SubjectMixin.class);</span></span><br><span class="line">		<span class="comment">// mapper.addMixIn(Collections.synchronizedSet(Collections.emptySet()).getClass(),</span></span><br><span class="line">		<span class="comment">// 		SessionConfig.SynchronizedSetMixin.class);</span></span><br><span class="line">		<span class="keyword">return</span> mapper;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.CLASS)</span><br><span class="line">	<span class="meta">@JsonAutoDetect</span>(fieldVisibility = JsonAutoDetect.Visibility.ANY, getterVisibility = JsonAutoDetect.Visibility.NONE,</span><br><span class="line">			isGetterVisibility = JsonAutoDetect.Visibility.NONE)</span><br><span class="line">	<span class="meta">@JsonDeserialize</span>(using = SubjectDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	@<span class="title">JsonIgnoreProperties</span>(<span class="title">ignoreUnknown</span> </span>= <span class="keyword">true</span>)</span><br><span class="line">	<span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectMixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@JsonCreator</span></span><br><span class="line">		SubjectMixin(<span class="meta">@JsonProperty</span>(<span class="string">"readOnly"</span>) <span class="keyword">boolean</span> readOnly,</span><br><span class="line">				<span class="meta">@JsonProperty</span>(<span class="string">"principals"</span>) Set&lt;? extends Principal&gt; principals,</span><br><span class="line">				<span class="meta">@JsonProperty</span>(<span class="string">"pubCredentials"</span>) Set&lt;?&gt; pubCredentials,</span><br><span class="line">				<span class="meta">@JsonProperty</span>(<span class="string">"privCredentials"</span>) Set&lt;?&gt; privCredentials) &#123;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * getPublicCredentials</span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment">		 **/</span></span><br><span class="line">		<span class="meta">@JsonGetter</span>(<span class="string">"pubCredentials"</span>)</span><br><span class="line">		<span class="function"><span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getPublicCredentials</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * getPrivateCredentials</span></span><br><span class="line"><span class="comment">		 * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment">		 **/</span></span><br><span class="line">		<span class="meta">@JsonGetter</span>(<span class="string">"privCredentials"</span>)</span><br><span class="line">		<span class="function"><span class="keyword">abstract</span> <span class="keyword">long</span> <span class="title">getPrivateCredentials</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@JsonTypeInfo</span>(use = JsonTypeInfo.Id.CLASS)</span><br><span class="line">	<span class="meta">@JsonDeserialize</span>(using = SynchronizedSetDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">	<span class="title">abstract</span> <span class="title">class</span> <span class="title">SynchronizedSetMixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@JsonCreator</span></span><br><span class="line">		SynchronizedSetMixin(Set&lt;?&gt; set) &#123;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SubjectDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">Subject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Subject <span class="title">deserialize</span><span class="params">(JsonParser parser, DeserializationContext ctxt)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">			ObjectMapper mapper = (ObjectMapper) parser.getCodec();</span><br><span class="line">			JsonNode node = mapper.readTree(parser);</span><br><span class="line">			<span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; node.isObject()) &#123;</span><br><span class="line">				<span class="keyword">final</span> Set&lt;Principal&gt; principals = readToSet(mapper, readJsonNode(node, <span class="string">"principals"</span>), Principal<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">				<span class="keyword">final</span> Set&lt;Object&gt; privCredentials = readToSet(mapper, readJsonNode(node, <span class="string">"privCredentials"</span>),</span><br><span class="line">						Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">				<span class="keyword">final</span> Set&lt;Object&gt; pubCredentials = readToSet(mapper, readJsonNode(node, <span class="string">"pubCredentials"</span>),</span><br><span class="line">						Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">				<span class="keyword">final</span> <span class="keyword">boolean</span> readOnly = readJsonNode(node, <span class="string">"readOnly"</span>).asBoolean();</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">new</span> Subject(readOnly, principals, pubCredentials, privCredentials);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Subject();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> &lt;T&gt; <span class="function">Set&lt;T&gt; <span class="title">readToSet</span><span class="params">(ObjectMapper mapper, JsonNode jsonNode, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">			<span class="keyword">final</span> CollectionType collectionType = mapper.getTypeFactory().constructCollectionType(Set<span class="class">.<span class="keyword">class</span>, <span class="title">type</span>)</span>;</span><br><span class="line">			<span class="keyword">return</span> mapper.readValue(jsonNode.toString(), collectionType);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> JsonNode <span class="title">readJsonNode</span><span class="params">(JsonNode jsonNode, String field)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> jsonNode.has(field) ? jsonNode.get(field) : MissingNode.getInstance();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedSetDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">Set</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> Set&lt;?&gt; deserialize(JsonParser parser, DeserializationContext context) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">			ObjectMapper mapper = (ObjectMapper) parser.getCodec();</span><br><span class="line">			JsonNode node = mapper.readTree(parser);</span><br><span class="line">			Set&lt;Object&gt; resultSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">			<span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (node <span class="keyword">instanceof</span> ArrayNode) &#123;</span><br><span class="line">					ArrayNode arrayNode = (ArrayNode) node;</span><br><span class="line">					<span class="keyword">for</span> (JsonNode elementNode : arrayNode) &#123;</span><br><span class="line">						resultSet.add(mapper.readValue(elementNode.traverse(mapper), Object<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					resultSet.add(mapper.readValue(node.traverse(mapper), Object<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> Collections.synchronizedSet(resultSet);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>OAuth2</category>
      </categories>
      <tags>
        <tag>OAuth2 - Spring Session</tag>
        <tag>Jackson - Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>项目问题记录：多事务之间产生幻读</title>
    <url>/2021/11/13/%E9%A1%B9%E7%9B%AE%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%EF%BC%9A%E5%A4%9A%E4%BA%8B%E5%8A%A1%E4%B9%8B%E9%97%B4%E4%BA%A7%E7%94%9F%E5%B9%BB%E8%AF%BB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><p>关于：先关联查询一张表的一批记录的主键，去更新这批记录后，插入一条新的记录。多个独立事务运行这几条sql后，后续再查询出现了幻读现象。</p><h1>一、 重点代码片段</h1><h2 id="1-Service"><a class="header-anchor" href="#1-Service">¶</a>1. Service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleServiceImpl</span> <span class="keyword">implements</span> <span class="title">ModuleService</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveROISettings</span><span class="params">(Module <span class="keyword">module</span>)</span> </span>&#123;  </span><br><span class="line">            <span class="comment">/** 0.  因为删除模块数据集后，要发布对应的数据集删除事件。故需提前从module_dataset(数据集表)获取存在的历史数据的主键id */</span></span><br><span class="line">            List&lt;Long&gt; needDeleteDatasetIds = moduleDatasetDAO.selectExistingModuleDatasetIdListByModuleId(needDeleteModuleDataset.getModuleId(), Module.DATA_STATUS_EXIST);</span><br><span class="line">        	<span class="comment">/** 1.逻辑删除模块下旧的数据集 */</span></span><br><span class="line">            moduleDatasetDAO.deleteModuleDatasetsByIds(needDeleteModuleDataset, needDeleteDatasetIds); </span><br><span class="line">            ....    </span><br><span class="line">            <span class="comment">/** 2. 构建模块数据集并保存 */</span></span><br><span class="line">            moduleDatasetDAO.insertModuleDataset(moduleDataset) == <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="2-DAO"><a class="header-anchor" href="#2-DAO">¶</a>2. DAO</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ModuleDatasetDAO</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT id FROM module_dataset WHERE module_id = #&#123;moduleId&#125; AND deleted = #&#123;dataStatus&#125;"</span>)</span><br><span class="line">    <span class="function">List&lt;Long&gt; <span class="title">selectExistingModuleDatasetIdListByModuleId</span><span class="params">(Long moduleId, <span class="keyword">int</span> dataStatus)</span></span>;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Update</span>(&#123;<span class="string">"&lt;script&gt; "</span>,</span><br><span class="line">            <span class="string">"UPDATE module_dataset SET deleted = #&#123;moduleDataset.deleted&#125;, modifier = #&#123;moduleDataset.modifier&#125;,    gmt_modified = NOW() "</span>,</span><br><span class="line">            <span class="string">"WHERE id IN "</span>,</span><br><span class="line">            <span class="string">"&lt;foreach item =\"id\" collection=\"datasetIds\" open=\"(\" separator=\",\" close=\")\"&gt; "</span>,</span><br><span class="line">            <span class="string">" #&#123;id&#125; "</span>,</span><br><span class="line">            <span class="string">"&lt;/foreach&gt; "</span>,</span><br><span class="line">            <span class="string">" AND deleted = 0 "</span>,</span><br><span class="line">            <span class="string">"&lt;/script&gt;"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteModuleDatasetsByIds</span><span class="params">(ModuleDataset moduleDataset, List&lt;Long&gt; datasetIds)</span></span>; </span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Insert</span>(<span class="string">"INSERT INTO module_dataset(module_id, ext_test_task_id, roi_settings, creator, modifier) VALUES(#&#123;moduleId&#125;, #&#123;extTestTaskId&#125;, #&#123;roiSettings&#125;, #&#123;creator&#125;, #&#123;modifier&#125;)"</span>)</span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>, keyProperty = <span class="string">"id"</span>, keyColumn = <span class="string">"id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertModuleDataset</span><span class="params">(ModuleDataset moduleDataset)</span></span>;</span><br></pre></td></tr></table></figure><h1>二、现象描述及复现</h1><ul><li><p>场景：如 <code>一、重点代码片段</code> 中所示, 当有两个保存roi剪切请求并发访问server, 此时开始调用上面的业务方法<code>ModuleService.saveROISettings(Module module)</code>.</p></li><li><p>期望: 每次请求都是：先逻辑删除模块关联数据集历史数据（deleted = 1）,然后再插入一条新的数据集记录（deleted = 0）.</p></li><li><p>BUG: 两次请求结束后，模块数据集表/module_dataset 存在两条数据集记录(deleted = 0)</p></li></ul><h2 id="1-数据库："><a class="header-anchor" href="#1-数据库：">¶</a>1. 数据库：</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> module_dataset <span class="keyword">WHERE</span> module_id = <span class="number">18</span> <span class="keyword">AND</span> deleted = <span class="number">0</span>;</span><br><span class="line">+<span class="comment">----+-----------+------------------+----------------------------------------------------------------------------------------------+---------------+---------------+---------------------+---------------------+---------+</span></span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings                                                                                 | creator       | modifier      | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+<span class="comment">----+-----------+------------------+----------------------------------------------------------------------------------------------+---------------+---------------+---------------------+---------------------+---------+</span></span><br><span class="line">| 43 |        18 |             NULL | &#123;"normalizationConfig":&#123;"width":512,"height":512&#125;,"keepOriginSize":false,"originalRoi":true&#125; | anonymousUser | anonymousUser | 2021-11-04 16:21:10 | 2021-11-04 16:21:10 |       0 |</span><br><span class="line">| 44 |        18 |             NULL | &#123;"normalizationConfig":&#123;"width":512,"height":512&#125;,"keepOriginSize":false,"originalRoi":true&#125; | anonymousUser | anonymousUser | 2021-11-04 16:21:10 | 2021-11-04 16:21:10 |       0 |</span><br><span class="line">+<span class="comment">----+-----------+------------------+----------------------------------------------------------------------------------------------+---------------+---------------+---------------------+---------------------+---------+</span></span><br></pre></td></tr></table></figure><h2 id="2-日志："><a class="header-anchor" href="#2-日志：">¶</a>2. 日志：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">16:20:34.237 [http-nio-7001-exec-7] INFO  c.a.d.o.j.s.impl.ModuleServiceImpl - 模块管理已广播:模块数据集删除事件,数据集id为: [41]</span><br><span class="line">16:20:34.237 [http-nio-7001-exec-7] INFO  c.a.d.o.j.s.impl.ModuleServiceImpl - 成功删除id为:18的模块关联的模块数据集记录</span><br><span class="line">16:20:34.242 [http-nio-7001-exec-7] INFO  c.a.d.o.j.s.impl.ModuleServiceImpl - 模块管理已广播:模块数据集样本集删除事件,样本集id为: [4177, 4178, 4179, 4180]</span><br><span class="line">16:20:34.242 [http-nio-7001-exec-7] INFO  c.a.d.o.j.s.impl.ModuleServiceImpl - 成功删除id为:18的模块关联的模块数据集样本记录</span><br><span class="line">16:20:48.999 [http-nio-7001-exec-15] INFO  c.a.d.o.j.s.impl.TrainServiceImpl - update_train_task_status_35,old:,now:0,method:训练任务新建</span><br><span class="line">16:20:49.605 [http-nio-7001-exec-15] INFO  c.a.d.o.j.s.impl.TrainServiceImpl - update_train_task_status_35,old:0,now:1,method:训练任务启动</span><br><span class="line">16:21:10.327 [my-async-pool-11] INFO  c.a.d.o.j.s.impl.TrainServiceImpl - update_train_task_status_35,old:1,now:3,method:handleContainerTaskDieEvent:处理容器退出事件</span><br><span class="line">16:21:10.592 [http-nio-7001-exec-7] INFO  c.a.d.o.j.s.impl.ModuleServiceImpl - 模块管理已广播:模块数据集删除事件,数据集id为: [42]</span><br><span class="line">16:21:10.592 [http-nio-7001-exec-7] INFO  c.a.d.o.j.s.impl.ModuleServiceImpl - 成功删除id为:18的模块关联的模块数据集记录</span><br><span class="line">16:21:10.597 [http-nio-7001-exec-7] INFO  c.a.d.o.j.s.impl.ModuleServiceImpl - 模块管理已广播:模块数据集样本集删除事件,样本集id为: [4319, 4320, 4321, 4322]</span><br><span class="line">16:21:10.597 [http-nio-7001-exec-7] INFO  c.a.d.o.j.s.impl.ModuleServiceImpl - 成功删除id为:18的模块关联的模块数据集样本记录</span><br><span class="line">16:21:10.617 [http-nio-7001-exec-15] INFO  c.a.d.o.j.s.impl.ModuleServiceImpl - id为:18的模块集合不存在关联的模块数据集记录</span><br><span class="line">16:21:10.620 [http-nio-7001-exec-15] INFO  c.a.d.o.j.s.impl.ModuleServiceImpl - id为:18的模块集合不存在关联的模块数据集样本记录</span><br></pre></td></tr></table></figure><h2 id="3-分析和复现"><a class="header-anchor" href="#3-分析和复现">¶</a>3. 分析和复现</h2><h3 id="3-1-在线上处理该问题时，获得上述信息（源代码，数据，日志），开始初步分析："><a class="header-anchor" href="#3-1-在线上处理该问题时，获得上述信息（源代码，数据，日志），开始初步分析：">¶</a>3.1 在线上处理该问题时，获得上述信息（源代码，数据，日志），开始初步分析：</h3><p>可以看到存在http-nio-7001-exec-7和http-nio-7001-exec-15 两个线程几乎同时进入 <code>ModuleService.saveROISettings(Module module)</code>，且同时向module_dataset表插入了数据集记录（创建时间均为： gmt_created = 2021-11-04 16:21:10）。</p><p>分析日志：</p><blockquote><p>线程7：<br>0. 查询获得历史数据：id = 41 ，</p><ol><li>逻辑删除即：更新id = 41的数据，</li><li>插入id = 42 的数据。</li></ol></blockquote><blockquote><p>线程15：<br>0. 查询获得历史数据：id = 42 ，</p><ol><li>逻辑删除即：更新id = 42的数据，</li><li>插入id = 43 的数据。</li></ol></blockquote><p>分析数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> module_dataset <span class="keyword">WHERE</span> module_id = <span class="number">18</span> <span class="keyword">AND</span> deleted = <span class="number">0</span>;</span><br><span class="line">| id | module_id | gmt_create          | gmt_modified        | deleted | ...</span><br><span class="line">| 43 |     18    | 2021-11-04 16:21:10 | 2021-11-04 16:21:10 |     0   | ...</span><br><span class="line">| 44 |     18    | 2021-11-04 16:21:10 | 2021-11-04 16:21:10 |     0   | ...</span><br></pre></td></tr></table></figure><p>推测 ：根据以上分析 id = 44 的数据，没有对应的删除历史数据的日志记录， 说明在查询历史数据的时候， id = 43 这条记录还未提交事务！</p><h3 id="3-2-开始复现："><a class="header-anchor" href="#3-2-开始复现：">¶</a>3.2 开始复现：</h3><p>因为3.1只能根据收集到的信息作出推测。所以，现在我在本地mysql上，关闭事务自动提交，且分别在事务隔离级别为：</p><p><code>REPEATABLE-READ/可重复读</code>(mysql default) 和 <code>READ-COMMITTED/读已提交</code>下,开启两个session窗口, 模拟模拟 <code>模拟 ModuleService.saveROISettings(Module module)</code> 复现刚才的问题.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">复现步骤:</span><br><span class="line">step0: 事务1&#x2F;事务2 均设置为 auto_commit &#x3D; off, 表示关闭自动提交事务</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">step1: 事务1 </span><br><span class="line">开启事务 ; </span><br><span class="line">根据 module_id 查询 deleted &#x3D; 0 数据的主键id;</span><br><span class="line">根据主键id更新这条数据 deleted &#x3D; 1;</span><br><span class="line">插入一条新数据 ;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">step2: 事务2 </span><br><span class="line">开启事务;</span><br><span class="line">根据 module_id 查询 deleted &#x3D; 0 数据的主键id;</span><br><span class="line">根据主键id更新这条数据 deleted &#x3D; 1; -- 此时事务1不执行commit；这条sql block and wait</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">step3: 事务1: </span><br><span class="line">执行commit；提交事务</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">step4: 事务2: </span><br><span class="line">根据主键id更新这条数据 deleted &#x3D; 1; -- 事务1提交，这条sql 不再block，执行完毕。</span><br><span class="line">插入一条新数据 ;</span><br><span class="line">执行commit；提交事务</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">根据 module_id 查询 deleted &#x3D; 0 数据;  -- 验证两个事务结束后，module_dataset表是否只有一条 deleted &#x3D; 0  的数据</span><br></pre></td></tr></table></figure><p>具体实现请看下面的sql执行记录:</p><h3 id="3-2-1-REPEATABLE-READ-可重复读"><a class="header-anchor" href="#3-2-1-REPEATABLE-READ-可重复读">¶</a>3.2.1 REPEATABLE-READ/可重复读.</h3><h4 id="1-事务1"><a class="header-anchor" href="#1-事务1">¶</a>(1) 事务1</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> module_dataset <span class="keyword">where</span> module_id = <span class="number">18</span> <span class="keyword">and</span> deleted = <span class="number">0</span>;</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator | modifier | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">| 44 |        18 |             NULL | roi          | liujin2 | liujin2  | 2021-11-04 20:17:48 | 2021-11-04 20:17:48 |       0 |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'autocommit'</span>;</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| autocommit    | OFF   |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> module_dataset <span class="keyword">where</span> module_id = <span class="number">18</span> <span class="keyword">and</span> deleted = <span class="number">0</span>;</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator | modifier | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">| 44 |        18 |             NULL | roi          | liujin2 | liujin2  | 2021-11-04 20:17:48 | 2021-11-04 20:17:48 |       0 |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">update</span> module_dataset <span class="keyword">set</span> deleted = <span class="number">1</span>,modifier = <span class="string">'liujin'</span>,gmt_modified = <span class="keyword">NOW</span>() <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">44</span>) <span class="keyword">and</span> deleted = <span class="number">0</span>;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into module_dataset (module_id, ext_test_task_id, roi_settings, creator, modifier) values(18,null,'roi','liujin8','liujin8');</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from module_dataset where module_id = 18 and deleted = 0;</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator | modifier | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">| 45 |        18 |             NULL | roi          | liujin8 | liujin8  | 2021-11-04 20:22:53 | 2021-11-04 20:22:53 |       0 |</span><br><span class="line">| 46 |        18 |             NULL | roi          | liujin9 | liujin9  | 2021-11-04 20:24:59 | 2021-11-04 20:24:59 |       0 |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h4 id="2-事务2"><a class="header-anchor" href="#2-事务2">¶</a>(2) 事务2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+-------------------------+</span><br><span class="line">1 row in set (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from module_dataset where module_id &#x3D; 18 and deleted &#x3D; 0;</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator | modifier | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">| 44 |        18 | NULL             | roi          | liujin2 | liujin2  | 2021-11-04 20:17:48 | 2021-11-04 20:17:48 |       0 |</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from module_dataset where module_id &#x3D; 18 and deleted &#x3D; 0;</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator | modifier | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">| 44 |        18 | NULL             | roi          | liujin2 | liujin2  | 2021-11-04 20:17:48 | 2021-11-04 20:17:48 |       0 |</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">1 row in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from module_dataset where module_id &#x3D; 18 and deleted &#x3D; 0;</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator | modifier | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">| 44 |        18 | NULL             | roi          | liujin2 | liujin2  | 2021-11-04 20:17:48 | 2021-11-04 20:17:48 |       0 |</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">1 row in set (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; update module_dataset set deleted &#x3D; 1,modifier &#x3D; &#39;liujin&#39;,gmt_modified &#x3D; NOW() where id in (44) and deleted &#x3D; 0;</span><br><span class="line">Query OK, 0 rows affected (12.89 sec)</span><br><span class="line">Rows matched: 0  Changed: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into module_dataset (module_id, ext_test_task_id, roi_settings, creator, modifier) values(18,null,&#39;roi&#39;,&#39;liujin9&#39;,&#39;liujin9&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from module_dataset where module_id &#x3D; 18 and deleted &#x3D; 0;</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator | modifier | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">| 45 |        18 | NULL             | roi          | liujin8 | liujin8  | 2021-11-04 20:22:53 | 2021-11-04 20:22:53 |       0 |</span><br><span class="line">| 46 |        18 | NULL             | roi          | liujin9 | liujin9  | 2021-11-04 20:24:59 | 2021-11-04 20:24:59 |       0 |</span><br><span class="line">+----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span><br><span class="line">2 rows in set (0.03 sec)</span><br></pre></td></tr></table></figure><h3 id="3-2-2-READ-COMMITTED-读已提交"><a class="header-anchor" href="#3-2-2-READ-COMMITTED-读已提交">¶</a>3.2.2 READ-COMMITTED/读已提交.</h3><h4 id="1-事务1-v2"><a class="header-anchor" href="#1-事务1-v2">¶</a>(1) 事务1</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  <span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'autocommit'</span>;</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| autocommit    | ON    |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">set</span> autocommit = <span class="keyword">off</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;  show variables like 'autocommit';</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">| autocommit    | OFF   |</span><br><span class="line">+<span class="comment">---------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> @@transaction_isolation;</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">set</span>  <span class="keyword">session</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">level</span> <span class="keyword">READ</span> COMMITTED;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| READ-COMMITTED          |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> module_dataset <span class="keyword">where</span> module_id = <span class="number">18</span> <span class="keyword">and</span> deleted = <span class="number">0</span>;</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator | modifier | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">| 45 |        18 |             NULL | roi          | liujin8 | liujin8  | 2021-11-04 20:22:53 | 2021-11-04 20:22:53 |       0 |</span><br><span class="line">| 46 |        18 |             NULL | roi          | liujin9 | liujin9  | 2021-11-04 20:24:59 | 2021-11-04 20:24:59 |       0 |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">update</span> module_dataset <span class="keyword">set</span> deleted = <span class="number">1</span>,modifier = <span class="string">'liujin'</span>,gmt_modified = <span class="keyword">NOW</span>() <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">45</span>,<span class="number">46</span>) <span class="keyword">and</span> deleted = <span class="number">0</span>;</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 2  Changed: 2  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into module_dataset (module_id, ext_test_task_id, roi_settings, creator, modifier) values(18,null,'roi','liujin18','liujin18');</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; commit;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><h4 id="2-事务2-v2"><a class="header-anchor" href="#2-事务2-v2">¶</a>(2) 事务2</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">set</span>  <span class="keyword">session</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">level</span> <span class="keyword">READ</span> COMMITTED;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select @@transaction_isolation;</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| READ-COMMITTED          |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> module_dataset <span class="keyword">where</span> module_id = <span class="number">18</span> <span class="keyword">and</span> deleted = <span class="number">0</span>;</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator | modifier | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">| 45 |        18 | NULL             | roi          | liujin8 | liujin8  | 2021-11-04 20:22:53 | 2021-11-04 20:22:53 |       0 |</span><br><span class="line">| 46 |        18 | NULL             | roi          | liujin9 | liujin9  | 2021-11-04 20:24:59 | 2021-11-04 20:24:59 |       0 |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+---------+----------+---------------------+---------------------+---------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> @@transaction_isolation;</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| READ-COMMITTED          |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">update</span> module_dataset <span class="keyword">set</span> deleted = <span class="number">1</span>,modifier = <span class="string">'liujin'</span>,gmt_modified = <span class="keyword">NOW</span>() <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">45</span>,<span class="number">46</span>) <span class="keyword">and</span> deleted = <span class="number">0</span>;</span><br><span class="line">Query OK, 0 rows affected (13.06 sec)</span><br><span class="line">Rows matched: 0  Changed: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into module_dataset (module_id, ext_test_task_id, roi_settings, creator, modifier) values(18,null,'roi','liujin119','liujin119');</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from module_dataset where module_id = 18 and deleted = 0;</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+-----------+-----------+---------------------+---------------------+---------+</span></span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator   | modifier  | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+-----------+-----------+---------------------+---------------------+---------+</span></span><br><span class="line">| 45 |        18 | NULL             | roi          | liujin8   | liujin8   | 2021-11-04 20:22:53 | 2021-11-04 20:22:53 |       0 |</span><br><span class="line">| 46 |        18 | NULL             | roi          | liujin9   | liujin9   | 2021-11-04 20:24:59 | 2021-11-04 20:24:59 |       0 |</span><br><span class="line">| 48 |        18 | NULL             | roi          | liujin119 | liujin119 | 2021-11-04 20:34:33 | 2021-11-04 20:34:33 |       0 |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+-----------+-----------+---------------------+---------------------+---------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> module_dataset <span class="keyword">where</span> module_id = <span class="number">18</span> <span class="keyword">and</span> deleted = <span class="number">0</span>;</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+-----------+-----------+---------------------+---------------------+---------+</span></span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator   | modifier  | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+-----------+-----------+---------------------+---------------------+---------+</span></span><br><span class="line">| 45 |        18 | NULL             | roi          | liujin8   | liujin8   | 2021-11-04 20:22:53 | 2021-11-04 20:22:53 |       0 |</span><br><span class="line">| 46 |        18 | NULL             | roi          | liujin9   | liujin9   | 2021-11-04 20:24:59 | 2021-11-04 20:24:59 |       0 |</span><br><span class="line">| 48 |        18 | NULL             | roi          | liujin119 | liujin119 | 2021-11-04 20:34:33 | 2021-11-04 20:34:33 |       0 |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+-----------+-----------+---------------------+---------------------+---------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">commit</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from module_dataset where module_id = 18 and deleted = 0;</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+-----------+-----------+---------------------+---------------------+---------+</span></span><br><span class="line">| id | module_id | ext_test_task_id | roi_settings | creator   | modifier  | gmt_create          | gmt_modified        | deleted |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+-----------+-----------+---------------------+---------------------+---------+</span></span><br><span class="line">| 47 |        18 | NULL             | roi          | liujin18  | liujin18  | 2021-11-04 20:32:49 | 2021-11-04 20:32:49 |       0 |</span><br><span class="line">| 48 |        18 | NULL             | roi          | liujin119 | liujin119 | 2021-11-04 20:34:33 | 2021-11-04 20:34:33 |       0 |</span><br><span class="line">+<span class="comment">----+-----------+------------------+--------------+-----------+-----------+---------------------+---------------------+---------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.04</span> sec)</span><br></pre></td></tr></table></figure><h3 id="3-3-结论："><a class="header-anchor" href="#3-3-结论：">¶</a>3.3 结论：</h3><p>经分析和复现，在<code>REPEATABLE-READ/可重复读</code>(mysql default) 和 <code>READ-COMMITTED/读已提交</code>两种事务隔离级别，并发执行包含先读后写的事务，这一特殊场景的确会造成幻读现象。</p><p>即：mysql多个事务存在读写隔离。如果事务1写入数据，在未commit之前，事务2读取或更新不到事务1写入的数据。等待事务1提交后，事务2也提交了。事务3读取事务1和事务2的数据，出现和事务2读取不一致的现象。</p><h3 id="3-4-结尾"><a class="header-anchor" href="#3-4-结尾">¶</a>3.4 结尾</h3><p>回头分析源代码，因保存roi剪切设置时，必须要删除历史数据，然后发布数据集删除事件（需要携带已删除的数据集id），便于其他功能模块事件后做后置处理，所以不得不先条件查询待删除的数据集id集合。这是造成幻读的原因。<br>但考虑程序实现还是要服务于业务需求，故而目前采用的解决方案为：<br>当需要关联查询唯一一条数据集记录时，应考虑数据集表可能会存在多条记录，所以推荐使用sql格式如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> module_dataset <span class="keyword">where</span> <span class="comment">#condition order by id desc limit 1；</span></span><br></pre></td></tr></table></figure><p>以此来适配我们的业务需求！</p><p>/</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>TRANSACTIONN</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>TRANSACTIONN</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring嵌套事务学习</title>
    <url>/2020/11/05/Spring%E5%B5%8C%E5%A5%97%E4%BA%8B%E5%8A%A1%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><p><a href="https://pan.baidu.com/s/1-g561uvplvgd-XutOd-1ow" target="_blank" rel="noopener">https://pan.baidu.com/s/1-g561uvplvgd-XutOd-1ow</a></p><p>bcqj</p><p><a href="https://pan.baidu.com/s/1t7qcy87j3Xct5DxG6ajOGw" target="_blank" rel="noopener">https://pan.baidu.com/s/1t7qcy87j3Xct5DxG6ajOGw</a></p><p>8ywh</p><!-- rebuild by neat -->]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDataJPA-学习笔记</title>
    <url>/2020/07/06/2020-07-06-SpringDataJPA-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><p>前言:<br>以前自己搭项目就使用过SpringDataJPA,但也是照猫画虎的;<br>直到最近,决定专门进一步了解一下这个框架;<br><code>工具书名: &lt;SpringDataJPA从入门到精通(张振华-清华大学出版社)&gt;</code></p><h1>一、截止2018年,已存在并广为应用的持久层ORM框架:</h1><p><strong>MyBatis/Hibernate/Spring Data JPA</strong><br>1．MyBatis<br>MyBatis本是Apache的一个开源项目iBatis，2010年这个项目由Apache Software Foundation迁移到了Google Code，并且改名为MyBatis。MyBatis着力于POJO与SQL之间的映射关系，可以进行更为细致的SQL，使用起来十分灵活，上手简单，容易掌握，所以深受开发者的喜欢，目前市场占有率最高，比较适合互联应用公司的API场景。<br>2．Hibernate<br>Hibernate是一个开放源代码的对象关系映射框架，对JDBC进行了非常轻量级的对象封装，使得Java程序员可以随心所欲地使用对象编程思维来操纵数据库，并且对象有自己的生命周期，着力对象与对象之间的关系，有自己的HQL查询语言，所以数据库移植性很好。<br>Hibernate是完备的ORM框架，是符合JPA规范的。Hibernate有自己的缓存机制。从上手的角度来说比较难，比较适合企业级的应用系统开发。<br>3．Spring Data JPA<br>可以理解为JPA规范的再次封装抽象，底层还是使用了Hibernate的JPA技术实现，引用JPQL（Java Persistence Query Language）查询语言，属于Spring整个生态体系的一部分。随着Spring Boot和Spring Cloud在市场上的流行，Spring Data JPA也逐渐进入大家的视野，它们组成有机的整体，使用起来比较方便，加快了开发的效率，使开发者不需要关心和配置更多的东西，完全可以沉浸在Spring的完整生态标准实现下。JPA上手简单，开发效率高，对对象的支持比较好，又有很大的灵活性，市场的认可度越来越高。</p><h2 id="1：理论陈述-以后再补"><a class="header-anchor" href="#1：理论陈述-以后再补">¶</a>1：理论陈述(以后再补)</h2><h2 id="2：方法参数要取别名，需要-Param-注解"><a class="header-anchor" href="#2：方法参数要取别名，需要-Param-注解">¶</a>2：方法参数要取别名，需要 @Param 注解</h2><p>当需要给参数取一个别名的时候，我们也需要 @Param 注解，例如方法定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUserByUsername</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 XML 定义如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByUsername"</span> <span class="attr">parameterType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    select * from user where username=#&#123;name&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>老实说，这种需求不多，费事。</p><h2 id="3：XML-中的-SQL-使用了-，那么参数中也需要-Param-注解"><a class="header-anchor" href="#3：XML-中的-SQL-使用了-，那么参数中也需要-Param-注解">¶</a>3：XML 中的 SQL 使用了 $ ，那么参数中也需要 @Param 注解</h2><p><strong>$</strong> 会有注入漏洞的问题，但是有的时候你不得不使用**$** 符号，例如要传入列名或者表名的时候，这个时候必须要添加 @Param 注解，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">(@Param(<span class="string">"order_by"</span>)</span>String order_by)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 XML 定义如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllUsers"</span> <span class="attr">resultType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"order_by!=null and order_by!=''"</span>&gt;</span></span><br><span class="line">        order by $&#123;order_by&#125; desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面这三种，都很容易懂，相信很多小伙伴也都懂，除了这三种常见的场景之外，还有一个特殊的场景，经常被人忽略。</p><h2 id="4：那就是动态-SQL-，如果在动态-SQL-中使用了参数作为变量，那么也需要-Param-注解，即使你只有一个参数。"><a class="header-anchor" href="#4：那就是动态-SQL-，如果在动态-SQL-中使用了参数作为变量，那么也需要-Param-注解，即使你只有一个参数。">¶</a>4：那就是动态 SQL ，如果在动态 SQL 中使用了参数作为变量，那么也需要 @Param 注解，即使你只有一个参数。</h2><p>如果我们在动态 SQL 中用到了 参数作为判断条件，那么也是一定要加 @Param 注解的，例如如下方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义出来的 SQL 如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况，即使只有一个参数，也需要添加 @Param 注解，而这种情况却经常被人忽略！</p><h2 id="另外：传递多个参数-不使用-Param-注解"><a class="header-anchor" href="#另外：传递多个参数-不使用-Param-注解">¶</a>另外：传递多个参数,不使用 @Param 注解</h2><p>其实从第一种场景中已经可以实现传递多个参数了，<strong>即把多个参数封装到一个 javaBean 中</strong>就可以实现了，但是如果是两个或者多个 javaBean 的时候，可以通过使用@Param注解的方式来实现，但是需要把每个 javaBean 中的属性全部拆分出来，这样就增加了巨大的代码量，因此不推荐这么做<br>那么有没有可以不使用@Param注解，同样也可以传递多个参数(尤其是多个 javaBean)呢?</p><p>答案是有的，封装到HashMap集合中,废话不多说，直接上代码</p><p>同上，这里只贴出关键部分：</p><ul><li>DAO 层</li><li>UserInfoDAO.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	搜索用户,对结果进行分页</span></span><br><span class="line"><span class="function">List <span class="title">searchUser</span><span class="params">(Map&lt;String,Object&gt;)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>调用DAO</li><li>UserService.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">Pagination page = <span class="keyword">new</span> Pagination();</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;;</span><br><span class="line">map.put(<span class="string">"userInfo"</span>,userInfo);</span><br><span class="line">pam.put(<span class="string">"page"</span>,page);</span><br><span class="line">userInfoDao.searchUser(map);</span><br></pre></td></tr></table></figure><ul><li>mapper文件userInfomapper.xml</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;select id="searchUser" parameterType="java.util.Map" resultType="UserInfo"&gt;</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> t_userinfo <span class="keyword">user</span> </span><br><span class="line">    <span class="keyword">where</span> <span class="number">1</span> =<span class="number">1</span></span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"user.uname != null and ''!= user.uname "</span>&gt;</span><br><span class="line">        <span class="keyword">and</span> user.uname <span class="keyword">like</span> <span class="string">'%$&#123;userInfo.uname&#125;$%'</span></span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"page.order != null and page.order == 10"</span> &gt;</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> user.id <span class="keyword">asc</span></span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    <span class="keyword">limit</span> $&#123;page.pagenum * page.limitnum&#125;, <span class="comment">#&#123;page.limitnum&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>Mybatis无论是传单个参数，还是传递多个参数，没有必要使用@Param注解啊<br>使用@param 注解增添了不少代码不说，还容易导致错误，尤其是在 mapper 文件中（paraterType 属性）</li></ul><h1>二、常规开发使用及源码</h1><p><strong>There is no getter for property named ‘XXX’ in ‘class java.lang.String’，</strong></p><p><strong>此错误之所以出现，是因为 mybatis 在对 parameterType=“String” 的sql语句做了限制，假如你使用 &lt;when test=&quot; username != null &quot;&gt; 这样的条件判断时，就会出现该错误，不过今天我们来刨根问底一下</strong>。</p><h2 id="一、常用注解"><a class="header-anchor" href="#一、常用注解">¶</a>一、常用注解</h2><p>基本注解<br>基本注解包括@Entity、@Table、@Id、@IdClass、<br>@GeneratedValue、@Basic、@Transient、@Column、@Temporal、<br>@Enumerated、@Lob。</p><h3 id="1-Entity"><a class="header-anchor" href="#1-Entity">¶</a>1. @Entity</h3><p>先看一个Blog的示例，其中实体的配置如下：</p><p>![image-20210113093130177](/…/…/Users/apple/Library/Application Support/typora-user-images/image-20210113093130177.png)</p><p>@Entity定义对象将会成为被JPA管理的实体，将映射到指定的数据库表。</p><p>![image-20210113093325057](/…/…/Users/apple/Library/Application Support/typora-user-images/image-20210113093325057.png)</p><h3 id="2-Table"><a class="header-anchor" href="#2-Table">¶</a>2. @Table</h3><p>@Table指定数据库的表名。</p><p>![image-20210113093426900](/…/…/Users/apple/Library/Application Support/typora-user-images/image-20210113093426900.png)</p><h3 id="3-Id"><a class="header-anchor" href="#3-Id">¶</a>3. @Id</h3><p>@Id定义属性为数据库的主键，一个实体里面必须有一个。</p><h3 id="4-IdClass"><a class="header-anchor" href="#4-IdClass">¶</a>4. @IdClass</h3><p>@IdClass利用外部类的联合主键。</p><h4 id="（1）源码："><a class="header-anchor" href="#（1）源码：">¶</a>（1）源码：</h4><p>作为符合主键类，要满足以下几点要求。</p><ul><li>必须实现Serializable接口。</li><li>必须有默认的public无参数的构造方法。</li><li>必须覆盖equals和hashCode方法。<br>equals方法用于判断两个对象是否相同，EntityManger通过find方法来查找Entity时是根据equals的返回值来判断的。在本例中，只有对象的name和email值完全相同或同一个对象时才返回true，否则返回false。<br>hashCode方法返回当前对象的哈希码，生成的hashCode相同的概率越小越好，算法可以进行优化。</li></ul><h4 id="（2）用法："><a class="header-anchor" href="#（2）用法：">¶</a>（2）用法：</h4><p>①　我们假设UserBlog的联合主键是createUserId和title，新增一个UserBlogKey的类。UserBlogKey.class代码如下：<br>②　UserBlogEntity.java要稍加改动：实体类上需要加@IdClass注解，主键上都得加@Id。<br>③　UserBlogRepository中的改动如下：</p><p>④　使用的时候：</p><h3 id="5-GeneratedValue"><a class="header-anchor" href="#5-GeneratedValue">¶</a>5. @GeneratedValue</h3><p>@GeneratedValue为主键生成策略，例如：<br>GenerationType一共有以下4个值：</p><h3 id="6-Basic"><a class="header-anchor" href="#6-Basic">¶</a>6. @Basic</h3><p>@Basic表示属性是到数据库表的字段的映射。如果实体的字段上<br>没有任何注解，默认即为@Basic。</p><h3 id="7-Transient"><a class="header-anchor" href="#7-Transient">¶</a>7. @Transient</h3><p>@Transient表示该属性并非一个到数据库表的字段的映射，表示<br>非持久化属性，与@Basic作用相反。JPA映射数据库的时候忽略它。</p><h3 id="8-Column"><a class="header-anchor" href="#8-Column">¶</a>8. @Column</h3><p>@Column定义该属性对应数据库中的列名。</p><h3 id="9-Temporal"><a class="header-anchor" href="#9-Temporal">¶</a>9. @Temporal</h3><p>@Temporal用来设置Date类型的属性映射到对应精度的字段。</p><h4 id="（1）-Temporal-TemporalType-DATE-映射为日期-date（只有日期）。"><a class="header-anchor" href="#（1）-Temporal-TemporalType-DATE-映射为日期-date（只有日期）。">¶</a>（1）@Temporal(TemporalType.DATE)映射为日期|date（只有日期）。</h4><h4 id="（2）-Temporal-TemporalType-TIME-映射为日期-time（只有时间）。"><a class="header-anchor" href="#（2）-Temporal-TemporalType-TIME-映射为日期-time（只有时间）。">¶</a>（2）@Temporal(TemporalType.TIME)映射为日期|time（只有时间）。</h4><h4 id="（3）-Temporal-TemporalType-TIMESTAMP-映射为日期-datetime（日期-时间）。"><a class="header-anchor" href="#（3）-Temporal-TemporalType-TIMESTAMP-映射为日期-datetime（日期-时间）。">¶</a>（3）@Temporal(TemporalType.TIMESTAMP)映射为日期|datetime（日期+时间）。</h4><h3 id="10-Enumerated"><a class="header-anchor" href="#10-Enumerated">¶</a>10. @Enumerated</h3><p>@Enumerated很好用，直接映射enum枚举类型的字段。<br>（1）看源码：<br>（2）看例子：<br>这时插入两条数据，数据库里面的值是MAIL/FMAIL，而不是“男<br>性”/“女性”。如果我们用@Enumerated(EnumType.ORDINAL)，那么<br>这时数据库里面的值是0,1。但是实际工作中，不建议用数字下标，<br>因为枚举里面的属性值是会不断新增的，如果新增一个，位置变化了<br>就惨了。</p><h3 id="11-Lob"><a class="header-anchor" href="#11-Lob">¶</a>11. @Lob</h3><p>@Lob 将属性映射成数据库支持的大对象类型，支持以下两种数据库类型的字段。</p><h4 id="（1）Clob（Character-Large-Ojects）类型是长字符串类型，"><a class="header-anchor" href="#（1）Clob（Character-Large-Ojects）类型是长字符串类型，">¶</a>（1）Clob（Character Large Ojects）类型是长字符串类型，</h4><p>java.sql.Clob、Character[]、char[]和String将被映射为Clob类<br>型。</p><h4 id="（2）Blob（Binary-Large-Objects）类型是字节类型，"><a class="header-anchor" href="#（2）Blob（Binary-Large-Objects）类型是字节类型，">¶</a>（2）Blob（Binary Large Objects）类型是字节类型，</h4><p>java.sql.Blob、Byte[]、byte[]和实现了Serializable接口的类型<br>将被映射为Blob类型。</p><h4 id="（3）Clob、Blob占用内存空间较大，一般配合"><a class="header-anchor" href="#（3）Clob、Blob占用内存空间较大，一般配合">¶</a>（3）Clob、Blob占用内存空间较大，一般配合</h4><p>@Basic(fetch=FetchType.LAZY)将其设置为延迟加载。</p><h3 id="12-几个注释的配合使用"><a class="header-anchor" href="#12-几个注释的配合使用">¶</a>12. 几个注释的配合使用</h3><p>@SqlResultSetMapping、@EntityResult、@ColumnResult可以配<br>合@NamedNativeQuery一起使用，但是实际工作中不建议这样配置。<br>下面看一个简单的示例：</p><h2 id="二、关联关系注解"><a class="header-anchor" href="#二、关联关系注解">¶</a>二、关联关系注解</h2><p>关联关系注解包括 @JoinColumn、@OneToOne、@OneToMany、@ManyToOne、@ManyToMany、@JoinTable、@OrderBy</p><h3 id="1-JoinColumn定义外键关联的字段名称"><a class="header-anchor" href="#1-JoinColumn定义外键关联的字段名称">¶</a>1. @JoinColumn定义外键关联的字段名称</h3><p>（1）源码语法如下：</p><p>（2）用法：@JoinColumn主要配合@OneToOne、@ManyToOne、<br>@OneToMany一起使用，单独使用没有意义。<br>（3）@JoinColumns定义多个字段的关联关系。</p><h3 id="2-OneToOne关联关系"><a class="header-anchor" href="#2-OneToOne关联关系">¶</a>2.　@OneToOne关联关系</h3><p>（1）源码语法如下：<br>（2）用法：@OneToOne需要配合@JoinColumn一起使用。注意：<br>可以双向关联，也可以只配置一方，需要视实际需求而定。<br>【示例5.1】假设一个部门只有一个员工。Department的内容如<br>下：</p><p>提示<br>employee_id指的是Department里面的字段，而<br>referencedColumnName=&quot;id&quot;指的是Employee表里面的字段。<br>如果需要双向关联，Employee的内容如下：<br>当然也可以不选用mappedBy，和下面效果是一样的：</p><h3 id="3-OneToMany与-ManyToOne关联关"><a class="header-anchor" href="#3-OneToMany与-ManyToOne关联关">¶</a>3. @OneToMany与@ManyToOne关联关</h3><p>系<br>@OneToMany与@ManyToOne可以相对存在，也可只存在一方。<br>（1）@OneToMany源码语法如下：</p><p>@ManyToOne与OneToMany的源码稍有区别，仔细体会。<br>（2）使用示例，必须和@JoinColumn配合使用才有效。</p><h3 id="4-OrderBy关联查询时排序"><a class="header-anchor" href="#4-OrderBy关联查询时排序">¶</a>4.　@OrderBy关联查询时排序</h3><p>一般和@OneToMany一起使用。<br>（1）源码语法如下：</p><p>（2）用法示例：</p><h3 id="5-JoinTable关联关系表"><a class="header-anchor" href="#5-JoinTable关联关系表">¶</a>5.　@JoinTable关联关系表</h3><p>如果对象与对象之间有一个关联关系表的时候，就会用到<br>@JoinTable，一般和@ManyToMany一起使用。<br>（1）源码语法如下：<br>（2）假设Blog和Tag是多对多的关系，有一个关联关系表</p><p>blog_tag_relation，表中有两个属性blog_id和tag_id，那么Blog实<br>体里面的写法如下：</p><h3 id="6-ManyToMany关联关系"><a class="header-anchor" href="#6-ManyToMany关联关系">¶</a>6. @ManyToMany关联关系</h3><p>（1）源码语法如下：<br>@ManyToMany表示多对多，和@OneToOne、@ManyToOne一样也有单<br>向、双向之分。单向双向和注解没有关系，只看实体类之间是否相互<br>引用。<br>（2）示例：一个博客可以拥有多个标签，一个标签也可以使用<br>在多个博客上，Blog和Tag就是多对多关系。</p><p>提示<br>BlogTagRelation为中间关联关系表blog_tag_relation对应的实体。</p><h2 id="二、Left-join、Inner-join与-EntityGraph"><a class="header-anchor" href="#二、Left-join、Inner-join与-EntityGraph">¶</a>二、Left join、Inner join与@EntityGraph</h2><p>5.4.1　Left join与Inner join<br>当使用@ManyToMany、@ManyToOne、@OneToMany、@OneToOne关联关系的时候，FetchType(获取类型)怎么配置LAZY或者EAGER。SQL真正执行的时候是由一条主表查询和N条子表查询组成的。这种查询效率一般比较低下，比如子对象有N个就会执行N+1条SQL。<br>有时候我们需要用到Left Join或者Inner Join来提高效率，只能通过@Query的JQPL语法实现，后面我们将讲到的Criteria API也可以做到。Spring Data JPA为了简单地提高查询率，引入了EntityGraph的概念，可以解决N+1条SQL的问题。<br>5.4.2　@EntityGraph<br>JPA 2.1推出来的@EntityGraph、@NamedEntityGraph用来提高查询效率，很好地解决了N+1条SQL的问题。两者需要配合起来使用，缺一不可。@NamedEntityGraph配置在@Entity上面，而@EntityGraph配置在Repository的查询方法上面。我们来看一下实例。<br>（1）先在Entity里面定义@NamedEntityGraph，其他都不变。其中，@NamedAttributeNode可以有多个，也可以有一个。</p><p>（2）只需要在查询方法上加@EntityGraph注解即可，其中value就是@NamedEntityGraph中的Name。实例配置如下：<br>5.5　关于关系查询的一些坑<br>（1）所有的注解要么全配置在字段上，要么全配置在get方法上，不能混用，混用就会启动不起来，但是语法配置没有问题。<br>（2）所有的关联都是支持单向关联和双向关联的，视具体业务<br>场景而定。JSON序列化的时候使用双向注解会产生死循环，需要人为<br>手动转化一次，或者使用@JsonIgnore。<br>（3）在所有的关联查询中，表一般是不需要建立外键索引的。<br>@mappedBy的使用需要注意。<br>（4）级联删除比较危险，建议考虑清楚，或者完全掌握。<br>90<br>（5）不同的关联关系的配置，@JoinClumn里面的name、<br>referencedColumnName代表的意思是不一样的，很容易弄混，可以根<br>据打印出来的SQL做调整。<br>（6）当配置这些关联关系的时候建议大家直接在表上面，把外<br>键建好，然后通过后面我们介绍的开发工具直接生成，这样可以减少<br>自己调试的时间。</p><h1>三、后续</h1><h2 id="一、本文摘要"><a class="header-anchor" href="#一、本文摘要">¶</a>一、本文摘要</h2><h2 id="二、问题描述"><a class="header-anchor" href="#二、问题描述">¶</a>二、问题描述</h2><h2 id="三、寻求解决方案"><a class="header-anchor" href="#三、寻求解决方案">¶</a>三、寻求解决方案</h2><h2 id="四、寻找原因"><a class="header-anchor" href="#四、寻找原因">¶</a>四、寻找原因</h2><h2 id="五、拓展延伸"><a class="header-anchor" href="#五、拓展延伸">¶</a>五、拓展延伸</h2><!-- rebuild by neat -->]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>SpringDataJPA</tag>
        <tag>FrameWork</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro-学习笔记</title>
    <url>/2020/07/06/2020-09-10-Shiro%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><p>前言:<br>项目移动端登录的需求开始准备了,顺便学习一下shiro框架的认证原理<br>相关资料:</p><p>&lt;Apache_Shiro_reference(中文版)&gt;</p><h1>一、模仿项目登录的一些核心逻辑,写个设计案例:</h1><h2 id="1：创建一个自定义的Realm类-用于开发自己的一些认证规则"><a class="header-anchor" href="#1：创建一个自定义的Realm类-用于开发自己的一些认证规则">¶</a>1：创建一个自定义的Realm类,用于开发自己的一些认证规则</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.zombie.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 20200901-shiro-test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 自定义realms对象</span></span><br><span class="line"><span class="comment"> * 继承AuthorizingRealm,并重写:</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * #doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)</span></span><br><span class="line"><span class="comment"> * #doGetAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: zombie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Created in 2020/9/1 下午3:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 自定义realm名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        super.setName(this.getClass().getName());</span></span><br><span class="line">        <span class="keyword">super</span>.setName(<span class="string">"permissionRealm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principals org.apache.shiro.subject.PrincipalCollection principals 包含了所有已认证成功的安全数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.apache.shiro.authz.AuthorizationInfo 用户权限信息(安全数据)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 用于授权</span></span><br><span class="line"><span class="comment">     * 主要目的就是: 根据认证数据获取授权信息(即:用户权限相关的数据)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==================start execute PermissionRealm.doGetAuthorizationInfo=================="</span>);</span><br><span class="line">        <span class="comment">// 1. 获取安全数据 username,用户id</span></span><br><span class="line">        Object primaryPrincipal = principals.getPrimaryPrincipal();</span><br><span class="line">        String username = primaryPrincipal.toString(); <span class="comment">// 测试场景下只存入了username</span></span><br><span class="line">        <span class="comment">// 2. 根据id或者username查询用户信息 测试场景下省略</span></span><br><span class="line">        <span class="comment">// 3. 查询用户的角色和权限信息 测试场景下省略</span></span><br><span class="line">        List permissions = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        permissions.add(<span class="string">"user:save"</span>);</span><br><span class="line">        permissions.add(<span class="string">"user:update"</span>);</span><br><span class="line">        List roles = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        roles.add(<span class="string">"role_1"</span>);</span><br><span class="line">        roles.add(<span class="string">"role_2"</span>);</span><br><span class="line">        <span class="comment">// 4. 构造返回</span></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">// 5. 设置权限信息(集合)</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermissions(permissions);</span><br><span class="line">        <span class="comment">// 6. 设置角色信息(集合)</span></span><br><span class="line">        simpleAuthorizationInfo.addRoles(roles);</span><br><span class="line">        System.out.println(<span class="string">"==================finish execute PermissionRealm.doGetAuthorizationInfo=================="</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token AuthenticationToken 是 org.apache.shiro.authc.UsernamePasswordToken实现的一个父接口.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> org.apache.shiro.authc.AuthenticationInfo 用户认证信息(安全数据)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span> 用于认证</span></span><br><span class="line"><span class="comment">     * 根据用户名&amp;密码与数据库查询结果进行比较;</span></span><br><span class="line"><span class="comment">     * 将安全数据存入到shiro中进行保管;   获取用户认证信息(安全数据)并保存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;start execute PermissionRealm.doGetAuthenticationInfo&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        <span class="comment">// 1. 构造 UsernamePasswordToken</span></span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class="line">        <span class="comment">// 2. 获取前端输入的用户名,密码</span></span><br><span class="line">        String username = usernamePasswordToken.getUsername();</span><br><span class="line">        String password = <span class="keyword">new</span> String(usernamePasswordToken.getPassword());</span><br><span class="line">        <span class="comment">// 3. 根据用户名差查询数据库表,获得密码(可能讲过加密) 测试场景下省略</span></span><br><span class="line">        String pwdFromDB = <span class="string">"123456"</span>;</span><br><span class="line">        <span class="comment">// 4. 比较密码</span></span><br><span class="line">        <span class="keyword">if</span> (pwdFromDB.equals(password)) &#123;</span><br><span class="line">            <span class="comment">// 5. 如果成功,向shiro中存入安全数据</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Constructor that takes in a single 'primary' principal of the account and its corresponding credentials,</span></span><br><span class="line"><span class="comment">             * associated with the specified realm. 构造函数，它接受与指定领域关联的帐户的单个“主要”主体及其相应凭据。</span></span><br><span class="line"><span class="comment">             * &lt;p/&gt;</span></span><br><span class="line"><span class="comment">             * This is a convenience constructor and will construct a &#123;<span class="doctag">@link</span> PrincipalCollection PrincipalCollection&#125; based</span></span><br><span class="line"><span class="comment">             * on the &#123;<span class="doctag">@code</span> principal&#125; and &#123;<span class="doctag">@code</span> realmName&#125; argument.</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> principal   the 'primary' principal associated with the specified realm.      与指定领域关联的“主要”主体(用户信息)。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> credentials the credentials that verify the given principal.                  验证给定主体的凭据(密码)。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> realmName   the realm from where the principal and credentials were acquired. 从中获取主体和凭证的领域(realm名称)。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(username, password, <span class="keyword">this</span>.getName());</span><br><span class="line">            System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;finish execute PermissionRealm.doGetAuthenticationInfo&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 6. 如果失败,抛出异常或返回null</span></span><br><span class="line">            System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;failed execute PermissionRealm.doGetAuthenticationInfo&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户名或密码错误!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2：创建ini配置文件-以供工厂类创建SecurityManager类时读取配置信息"><a class="header-anchor" href="#2：创建ini配置文件-以供工厂类创建SecurityManager类时读取配置信息">¶</a>2：创建ini配置文件,以供工厂类创建SecurityManager类时读取配置信息:</h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[main]</span></span><br><span class="line"><span class="attr">permRealm</span>=cn.zombie.shiro.PermissionRealm</span><br><span class="line"><span class="comment"># 注册自定义的Realm到SecurityManager中</span></span><br><span class="line"><span class="attr">securityManager.realms</span>=<span class="variable">$permRealm</span></span><br></pre></td></tr></table></figure><h2 id="3：编写测试方法-模拟简单u-p认证场景"><a class="header-anchor" href="#3：编写测试方法-模拟简单u-p认证场景">¶</a>3：编写测试方法,模拟简单u&amp;p认证场景:</h2><p><strong>$</strong> 会有注入漏洞的问题，但是有的时候你不得不使用**$** 符号，例如要传入列名或者表名的时候，这个时候必须要添加 @Param 注解，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zombie.shiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: 20200901-shiro-test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: zombie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: Created in 2020/9/1 下午4:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroTestAuthorizationByRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"================start securityManager initialization================"</span>);</span><br><span class="line">        <span class="comment">// 1. 根据配置文件创建出SecurityManagerFactory</span></span><br><span class="line">        String configPath = <span class="string">"classpath:shiro-test-3.ini"</span>;</span><br><span class="line">        Factory&lt;SecurityManager&gt; iniSecurityManagerFactory = <span class="keyword">new</span> IniSecurityManagerFactory(configPath);</span><br><span class="line">        <span class="comment">// 2. 通过工厂类获取SecurityManager类</span></span><br><span class="line">        SecurityManager securityManager = iniSecurityManagerFactory.getInstance();</span><br><span class="line">        <span class="comment">// 3. 将SecurityManager类绑定到当前运行环境</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        System.out.println(<span class="string">"securityManager   "</span>+securityManager.toString());</span><br><span class="line">        System.out.println(<span class="string">"================finish securityManager initialization================"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试用户认证:</span></span><br><span class="line"><span class="comment">     * 认证:  用户登录</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 1. 根据配置文件创建出SecurityManagerFactory</span></span><br><span class="line"><span class="comment">     * 2. 通过工厂类获取SecurityManager类</span></span><br><span class="line"><span class="comment">     * 3. 将SecurityManager类绑定到当前运行环境</span></span><br><span class="line"><span class="comment">     * 4. 从当前运行环境中构造subject</span></span><br><span class="line"><span class="comment">     * 5. 构造shiro登录的数据</span></span><br><span class="line"><span class="comment">     * 6. 主体登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** login-start */</span></span><br><span class="line">        <span class="comment">// 4. 从当前运行环境中构造subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 5. 构造shiro登录的数据(模拟前端请求解析到用户名,密码)</span></span><br><span class="line">        String username = <span class="string">"zhangsan"</span>;</span><br><span class="line">        String password = <span class="string">"123456"</span>;</span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 主体登录/认证 执行login方法时,会自动去自定义的Realm/域中执行重写的doGetAuthenticationInfo方法</span></span><br><span class="line">        subject.login(usernamePasswordToken);</span><br><span class="line">        <span class="comment">// 7. 验证用户是否登录成功</span></span><br><span class="line">        System.out.println(<span class="string">"用户是否登录成功:\r\n"</span> + subject.isAuthenticated());</span><br><span class="line">        <span class="comment">// 8. 获取登录成功的数据</span></span><br><span class="line">        System.out.println(<span class="string">"用户登录唯一标识:\r\n"</span> + subject.getPrincipal());</span><br><span class="line">        <span class="comment">/** login-end */</span></span><br><span class="line">        System.out.println(<span class="string">"================finish login auth================"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9. 登录之后,完成授权 执行授权信息相关方法时,会自动去自定义的Realm/域中执行重写的doGetAuthorizationInfo方法</span></span><br><span class="line">        <span class="comment">// 授权,检验当前登录用户是否具有操作权限,是否具有某个角色</span></span><br><span class="line">        System.out.println(<span class="string">"校验:"</span> + username + <span class="string">"具有role_2角色:\r\n"</span> + subject.hasRole(<span class="string">"role_2"</span>));</span><br><span class="line">        System.out.println(<span class="string">"校验:"</span> + username + <span class="string">"具有user:save权限:\r\n"</span> + subject.isPermitted(<span class="string">"user:save"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印日志:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Connected to the target VM, address: &#39;127.0.0.1:49767&#39;, transport: &#39;socket&#39;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;start securityManager initialization&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">[main] INFO org.apache.shiro.config.IniSecurityManagerFactory - Realms have been explicitly set on the SecurityManager instance - auto-setting of realms will not occur.</span><br><span class="line">securityManager   org.apache.shiro.mgt.DefaultSecurityManager@258e2e41</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;finish securityManager initialization&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;start execute PermissionRealm.doGetAuthenticationInfo&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;finish execute PermissionRealm.doGetAuthenticationInfo&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">[main] INFO org.apache.shiro.session.mgt.AbstractValidatingSessionManager - Enabling session validation scheduler...</span><br><span class="line">用户是否登录成功:</span><br><span class="line">true</span><br><span class="line">用户登录唯一标识:</span><br><span class="line">zhangsan</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;finish login auth&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;start execute PermissionRealm.doGetAuthorizationInfo&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;finish execute PermissionRealm.doGetAuthorizationInfo&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">校验:zhangsan具有role_2角色:</span><br><span class="line">true</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;start execute PermissionRealm.doGetAuthorizationInfo&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;finish execute PermissionRealm.doGetAuthorizationInfo&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">校验:zhangsan具有user:save权限:</span><br><span class="line">true</span><br><span class="line">Disconnected from the target VM, address: &#39;127.0.0.1:49767&#39;, transport: &#39;socket&#39;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="4：断点分析认证过程"><a class="header-anchor" href="#4：断点分析认证过程">¶</a>4：断点分析认证过程:</h2><h3 id="1-模拟从前端获取username和password-生成一个usernamePasswordToken-调用subject-login"><a class="header-anchor" href="#1-模拟从前端获取username和password-生成一个usernamePasswordToken-调用subject-login">¶</a>(1)模拟从前端获取username和password,生成一个usernamePasswordToken,调用subject.login()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException</span>;</span><br></pre></td></tr></table></figure><p>![image-20210224100612805](/…/…/Users/apple/Library/Application Support/typora-user-images/image-20210224100612805.png)</p><h3 id="2-调用Subject实现类-org-apache-shiro-subject-support-DelegatingSubject-login-方法"><a class="header-anchor" href="#2-调用Subject实现类-org-apache-shiro-subject-support-DelegatingSubject-login-方法">¶</a>(2) 调用Subject实现类: org.apache.shiro.subject.support.DelegatingSubject.login()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    clearRunAsIdentitiesInternal();</span><br><span class="line">    Subject subject = securityManager.login(<span class="keyword">this</span>, token);</span><br><span class="line"></span><br><span class="line">    PrincipalCollection principals;</span><br><span class="line"></span><br><span class="line">    String host = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (subject <span class="keyword">instanceof</span> DelegatingSubject) &#123;</span><br><span class="line">        DelegatingSubject delegating = (DelegatingSubject) subject;</span><br><span class="line">        <span class="comment">//we have to do this in case there are assumed identities - we don't want to lose the 'real' principals:</span></span><br><span class="line">        principals = delegating.principals;</span><br><span class="line">        host = delegating.host;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        principals = subject.getPrincipals();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (principals == <span class="keyword">null</span> || principals.isEmpty()) &#123;</span><br><span class="line">        String msg = <span class="string">"Principals returned from securityManager.login( token ) returned a null or "</span> +</span><br><span class="line">                <span class="string">"empty value.  This value must be non null and populated with one or more elements."</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.principals = principals;</span><br><span class="line">    <span class="keyword">this</span>.authenticated = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (token <span class="keyword">instanceof</span> HostAuthenticationToken) &#123;</span><br><span class="line">        host = ((HostAuthenticationToken) token).getHost();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (host != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line">    Session session = subject.getSession(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.session = decorate(session);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.session = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据源码,可以看到:</p><p>我们构造的token,背后是 进入了:</p><p>org.apache.shiro.mgt.DefaultSecurityManager#login(),其中:DefaultSecurityManager是SecurityManager的一个实现类</p><p>如下图:</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnyelbim2xj31d409sdjg.jpg" alt="image-20210224101420011"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnyet43bbgj31fa0m4qch.jpg" alt="image-20210224102142468"></p><ul><li>此时,shiro的安全管理器(SecurityManager)开始调用自己已经实例化的一个身份认证器(Authenticator authenticator)的authenticate(AuthenticationToken token) 开始认证!</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** org.apache.shiro.mgt.AuthenticatingSecurityManager#authenticate</span></span><br><span class="line"><span class="comment"> * Delegates to the wrapped &#123;<span class="doctag">@link</span> org.apache.shiro.authc.Authenticator Authenticator&#125; for authentication. 对包装的&#123;org.apache.shiro.authc.Authenticator Authenticator&#125;用于身份验证。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AuthenticationInfo <span class="title">authenticate</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.authenticator.authenticate(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnyfdqlo1yj31k20pgn5d.jpg" alt="image-20210224104139432"></p><h3 id="3-进入ModularRealmAuthenticator-只有他重写了doAuthenticate方法-org-apache-shiro-authc-pam-ModularRealmAuthenticator-doAuthenticate"><a class="header-anchor" href="#3-进入ModularRealmAuthenticator-只有他重写了doAuthenticate方法-org-apache-shiro-authc-pam-ModularRealmAuthenticator-doAuthenticate">¶</a>(3) 进入ModularRealmAuthenticator,只有他重写了doAuthenticate方法 org.apache.shiro.authc.pam.ModularRealmAuthenticator#doAuthenticate</h3><ul><li>此时该方法中,执行了一下逻辑:</li></ul><p>尝试通过遍历内部的Realms集合,对于每个域/{Realm}首先支持(org.apache.shiro.authc.AuthenticatorToken)}<br>{Realm}对于每个领域，{Realm}首先支持(org.apache.shiro.身份验证令牌)}<br>方法来确定域/{Realm}是否支持{authenticationToken}方法参数。<br>如果一个Realm域支持令牌，其{Realm#getAuthenticationInfo(org.apache.shiro.authc.AuthenticatorToken)}方法将被调用。<br>如果领域返回一个非空帐户，那么令牌将视为已验证该领域和记录的帐户数据。<br>如果领域返回{null},下一个Realm将进入判断。<br>如果没有域/{Realm}支持(org.apache.shiro.authc.AuthenticatorToken)}，或者所有支持领域都返回null，<br>将抛出一个{@link AuthenticationException}，指示无法对用户进行身份验证。</p><p>此时我们先前编写的自定义域/PermssionRealm被获取到了 如下图所示:</p><p>![image-20210224105629994](/…/…/Users/apple/Library/Application Support/typora-user-images/image-20210224105629994.png)</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnyg2kf3xjj31740q27dp.jpg" alt="image-20210224110529857"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs the authentication attempt by interacting with the single configured realm, which is significantly</span></span><br><span class="line"><span class="comment"> * simpler than performing multi-realm logic.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> realm the realm to consult for AuthenticationInfo.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> token the submitted AuthenticationToken representing the subject's (user's) log-in principals and credentials.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the AuthenticationInfo associated with the user account corresponding to the specified &#123;<span class="doctag">@code</span> token&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doSingleRealmAuthentication</span><span class="params">(Realm realm, AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!realm.supports(token)) &#123;</span><br><span class="line">        String msg = <span class="string">"Realm ["</span> + realm + <span class="string">"] does not support authentication token ["</span> +</span><br><span class="line">                token + <span class="string">"].  Please ensure that the appropriate Realm implementation is "</span> +</span><br><span class="line">                <span class="string">"configured correctly or that the realm accepts AuthenticationTokens of this type."</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedTokenException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    AuthenticationInfo info = realm.getAuthenticationInfo(token);</span><br><span class="line">    <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">        String msg = <span class="string">"Realm ["</span> + realm + <span class="string">"] was unable to find account data for the "</span> +</span><br><span class="line">                <span class="string">"submitted AuthenticationToken ["</span> + token + <span class="string">"]."</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时,判断PermissionRealm是否支持令牌验证,支持的话,PermissionRealm和token被当做参数传入protected AuthenticationInfo doSingleRealmAuthentication(Realm realm, AuthenticationToken token) {…},</p><p>该方法中,直接调用了自定义域/PermissionRealm重写的getAuthenticationInfo方法,<br>按照我自定义的逻辑,此时就完成了企业登录核心的认证流程.当然企业项目中这部分逻辑显然会设计的更复杂些!<br>如果认证通过会后,构造包含用户信息的SimpleAuthenticationInfo对象返回<br>如果认证不通过,抛出自定义异常信息即可,认证流程被阻断!</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs the authentication attempt by interacting with the single configured realm, which is significantly</span></span><br><span class="line"><span class="comment"> * simpler than performing multi-realm logic.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> realm the realm to consult for AuthenticationInfo.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> token the submitted AuthenticationToken representing the subject's (user's) log-in principals and credentials.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the AuthenticationInfo associated with the user account corresponding to the specified &#123;<span class="doctag">@code</span> token&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doSingleRealmAuthentication</span><span class="params">(Realm realm, AuthenticationToken token)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!realm.supports(token)) &#123;</span><br><span class="line">        String msg = <span class="string">"Realm ["</span> + realm + <span class="string">"] does not support authentication token ["</span> +</span><br><span class="line">                token + <span class="string">"].  Please ensure that the appropriate Realm implementation is "</span> +</span><br><span class="line">                <span class="string">"configured correctly or that the realm accepts AuthenticationTokens of this type."</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedTokenException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    AuthenticationInfo info = realm.getAuthenticationInfo(token);</span><br><span class="line">    <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">        String msg = <span class="string">"Realm ["</span> + realm + <span class="string">"] was unable to find account data for the "</span> +</span><br><span class="line">                <span class="string">"submitted AuthenticationToken ["</span> + token + <span class="string">"]."</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnknownAccountException(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnygoaclnqj31hy0mi7c9.jpg" alt="image-20210224111335336"></p><h3 id="4-认证完成-构造主体-subject"><a class="header-anchor" href="#4-认证完成-构造主体-subject">¶</a>(4) 认证完成,构造主体/subject</h3><p>org.apache.shiro.mgt.DefaultSecurityManager#login 安全管理器 登录构造并返回 主体</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnygz3ibncj317i0gcwj0.jpg" alt="image-20210224113327402"></p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnygtqmwl6j31io0jcjvq.jpg" alt="image-20210224113137144"></p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnygyzdpp7j31go0ik0zy.jpg" alt="image-20210224113637347" style="zoom:33%"><h2 id="5：断点分析授权过程"><a class="header-anchor" href="#5：断点分析授权过程">¶</a>5：断点分析授权过程:</h2><h3 id="1-认证成功后-返回一个主体-subject-调用subject-hasRole-判断是否具有某一角色"><a class="header-anchor" href="#1-认证成功后-返回一个主体-subject-调用subject-hasRole-判断是否具有某一角色">¶</a>(1)认证成功后,返回一个主体/subject ,调用subject.hasRole()判断是否具有某一角色,</h3><p>前提是 :要在自定义域/Permissionrealm中重写 <code>doGetAuthorizationInfo(PrincipalCollection principals)</code>方法,模拟查询数据库 获得用户角色或者权限信息,构造出AuthorizationInfo对象</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnykmshmexj31fa06ktbh.jpg" alt="image-20210224134318485"></p><h3 id="2-Principal定义-可结合-https-blog-csdn-net-two-people-article-details-78581882-理解"><a class="header-anchor" href="#2-Principal定义-可结合-https-blog-csdn-net-two-people-article-details-78581882-理解">¶</a>(2) Principal定义(可结合: <a href="https://blog.csdn.net/two_people/article/details/78581882" target="_blank" rel="noopener">https://blog.csdn.net/two_people/article/details/78581882</a> 理解)</h3><p>principal代表什么那？如果阅读官方文档或者源码你会得到如下的定义：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnykxw8bpaj318m09cwgz.jpg" alt="image-20210224135400551"></p><p>解释：<br>1）可以是uuid<br>2）数据库中的主键<br>3）LDAP UUID或静态DN<br>4）在所有用户帐户中唯一的字符串用户名。</p><p>也就是说这个值必须是唯一的。也可以是邮箱、身份证等值。</p><p><strong>1、用法</strong><br><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnyql8qon3j30nx048glu.jpg" alt="这里写图片描述"></p><p>进入其构造方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructor that takes in a single 'primary' principal of the account and its corresponding credentials,</span></span><br><span class="line"><span class="comment"> * associated with the specified realm. 构造函数，它接受与指定领域关联的帐户的单个“主要”主体及其相应凭据。</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * This is a convenience constructor and will construct a &#123;<span class="doctag">@link</span> PrincipalCollection PrincipalCollection&#125; based</span></span><br><span class="line"><span class="comment"> * on the &#123;<span class="doctag">@code</span> principal&#125; and &#123;<span class="doctag">@code</span> realmName&#125; argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> principal   the 'primary' principal associated with the specified realm.      与指定领域关联的“主要”主体(用户信息)。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> credentials the credentials that verify the given principal.                  验证给定主体的凭据(密码)。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> realmName   the realm from where the principal and credentials were acquired. 从中获取主体和凭证的领域(realm名称)。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SimpleAuthenticationInfo</span><span class="params">(Object principal, Object credentials, String realmName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.principals = <span class="keyword">new</span> SimplePrincipalCollection(principal, realmName);</span><br><span class="line">       <span class="keyword">this</span>.credentials = credentials;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>发现principal是为object类型的，也就是说它可以接受所有的对象，</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.principals = <span class="keyword">new</span> SimplePrincipalCollection(principal, realmName);</span><br><span class="line"><span class="comment">/********************************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimplePrincipalCollection</span><span class="params">(Object principal, String realmName)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (principal <span class="keyword">instanceof</span> Collection) &#123;</span><br><span class="line">    addAll((Collection) principal, realmName);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    add(principal, realmName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/********************************************************************/</span></span><br></pre></td></tr></table></figure><p>是把principal添加到对应的集合中。添加的过程首先判断是否为Collection类型如果是就以添加集合的方式添加，如果不是就添加单个对象。</p><p><strong>2、获得principal</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> principals org.apache.shiro.subject.PrincipalCollection principals 包含了所有已认证成功的安全数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> org.apache.shiro.authz.AuthorizationInfo 用户权限信息(安全数据)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用于授权</span></span><br><span class="line"><span class="comment"> * 主要目的就是: 根据认证数据获取授权信息(即:用户权限相关的数据)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"==================start execute PermissionRealm.doGetAuthorizationInfo=================="</span>);</span><br><span class="line">    <span class="comment">// 1. 获取安全数据 username,用户id</span></span><br><span class="line">    Object primaryPrincipal = principals.getPrimaryPrincipal();</span><br><span class="line">    String username = primaryPrincipal.toString(); <span class="comment">// 测试场景下只存入了username</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1)查看 getPrimaryPrincipal</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the first available principal from any of the &#123;<span class="doctag">@code</span> Realm&#125; principals, or &#123;<span class="doctag">@code</span> null&#125; if there are</span></span><br><span class="line"><span class="comment"> * no principals yet.</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * The 'first available principal' is interpreted as the principal that would be returned by</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;&#123;<span class="doctag">@link</span> #iterator() iterator()&#125;.&#123;<span class="doctag">@link</span> java.util.Iterator#next() next()&#125;.&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@inheritDoc</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getPrimaryPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iterator().next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、使用例子</strong>(认证通过后,返回认证安全数据,用于构造主体/subject)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(person.getName());</span><br><span class="line">        list.add(person.getId());</span><br><span class="line">        list.add(person.getEmail());</span><br><span class="line">        list.add(person.getPsd());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(list, person.getPsd(), <span class="keyword">this</span>.getClass().getName());</span><br></pre></td></tr></table></figure><h3 id="3-进入org-apache-shiro-subject-support-DelegatingSubject-hasRole-String-roleIdentifier"><a class="header-anchor" href="#3-进入org-apache-shiro-subject-support-DelegatingSubject-hasRole-String-roleIdentifier">¶</a>(3)进入org.apache.shiro.subject.support.DelegatingSubject#hasRole(String roleIdentifier)</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnylktjbspj312003gq3u.jpg" alt="image-20210224141601014"></p><p>进入其实现: org.apache.shiro.mgt.AuthorizingSecurityManager#hasRole</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnyloq3bkfj31ck03st9u.jpg" alt="image-20210224141913274"></p><h3 id="4-此时-shiro的安全管理器-SecurityManager-开始调用自己已经实例化的一个授权器-Authorizer-authorizer-的hasRole-PrincipalCollection-subjectPrincipal-String-roleIdentifier-开始认证"><a class="header-anchor" href="#4-此时-shiro的安全管理器-SecurityManager-开始调用自己已经实例化的一个授权器-Authorizer-authorizer-的hasRole-PrincipalCollection-subjectPrincipal-String-roleIdentifier-开始认证">¶</a>(4) 此时,shiro的安全管理器(SecurityManager)开始调用自己已经实例化的一个授权器(Authorizer authorizer)的hasRole(PrincipalCollection subjectPrincipal, String roleIdentifier)开始认证!</h3><p>org.apache.shiro.authz.ModularRealmAuthorizer#hasRole</p><p>方法中获取自定义域对象,强转为父类Authorizer,再调用父类的hasRole方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns &lt;code&gt;true&lt;/code&gt; if any of the configured realms'</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #hasRole(org.apache.shiro.subject.PrincipalCollection, String)&#125; call returns &lt;code&gt;true&lt;/code&gt;,</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;false&lt;/code&gt; otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(PrincipalCollection principals, String roleIdentifier)</span> </span>&#123;</span><br><span class="line">    assertRealmsConfigured();</span><br><span class="line">    <span class="keyword">for</span> (Realm realm : getRealms()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(realm <span class="keyword">instanceof</span> Authorizer)) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (((Authorizer) realm).hasRole(principals, roleIdentifier)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入 org.apache.shiro.realm.AuthorizingRealm#hasRole(org.apache.shiro.subject.PrincipalCollection, java.lang.String)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(PrincipalCollection principal, String roleIdentifier)</span> </span>&#123;</span><br><span class="line">    AuthorizationInfo info = getAuthorizationInfo(principal);</span><br><span class="line">    <span class="keyword">return</span> hasRole(roleIdentifier, info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入 org.apache.shiro.realm.AuthorizingRealm#getAuthorizationInfo 开始 获取授权需要的权限信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an account's authorization-specific information for the specified &#123;<span class="doctag">@code</span> principals&#125;,</span></span><br><span class="line"><span class="comment">or &#123;<span class="doctag">@code</span> null&#125; if no account could be found.  The resulting &#123;<span class="doctag">@code</span> AuthorizationInfo&#125; object is used</span></span><br><span class="line"><span class="comment">by the other method implementations in this class to automatically perform access control checks for the</span></span><br><span class="line"><span class="comment">corresponding &#123;<span class="doctag">@code</span> Subject&#125;. 返回指定&#123;principals&#125;的帐户授权特定信息，或者&#123;null&#125;</span></span><br><span class="line"><span class="comment">如果找不到帐户。使用生成的&#123;AuthorizationInfo&#125;对象</span></span><br><span class="line"><span class="comment">通过此类中的其他方法实现来自动执行对应的&#123;subject&#125;。</span></span><br><span class="line"><span class="comment">&lt;p/&gt;</span></span><br><span class="line"><span class="comment">This implementation obtains the actual &#123;<span class="doctag">@code</span> AuthorizationInfo&#125; object from the subclass's</span></span><br><span class="line"><span class="comment">implementation of</span></span><br><span class="line"><span class="comment">&#123;<span class="doctag">@link</span> #doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection) doGetAuthorizationInfo&#125;, and then</span></span><br><span class="line"><span class="comment">caches it for efficient reuse if caching is enabled (see below).</span></span><br><span class="line"><span class="comment">这个实现从子类的&#123;#doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection) doGetAuthorizationInfo&#125;实现方法</span></span><br><span class="line"><span class="comment">如果启用了缓存，则缓存它以实现高效复用（见下文）。</span></span><br><span class="line"><span class="comment">&lt;p/&gt;</span></span><br><span class="line"><span class="comment">Invocations of this method should be thought of as completely orthogonal to acquiring</span></span><br><span class="line"><span class="comment">&#123;<span class="doctag">@link</span> #getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken) authenticationInfo&#125;, since either could</span></span><br><span class="line"><span class="comment">occur in any order.</span></span><br><span class="line"><span class="comment">这个方法的调用应该被认为与获取完全正交( 正交 感觉意思就是呼应) </span></span><br><span class="line"><span class="comment">&#123; #getAuthenticationInfo(org.apache.shiro.authc.AuthenticationToken) authenticationInfo&#125;，因为任何一个都可以</span></span><br><span class="line"><span class="comment">以任何顺序发生。</span></span><br><span class="line"><span class="comment">&lt;p/&gt;</span></span><br><span class="line"><span class="comment">For example, in &amp;quot;Remember Me&amp;quot; scenarios, the user identity is remembered (and</span></span><br><span class="line"><span class="comment">assumed) for their current session and an authentication attempt during that session might never occur.</span></span><br><span class="line"><span class="comment">But because their identity would be remembered, that is sufficient enough information to call this method to</span></span><br><span class="line"><span class="comment">execute any necessary authorization checks.  For this reason, authentication and authorization should be</span></span><br><span class="line"><span class="comment">loosely coupled and not depend on each other.</span></span><br><span class="line"><span class="comment">例如，在“Remember Me/记住我”场景中，用户身份被记住（并且假设），并且在该会话期间可能永远不会发生身份验证尝试。</span></span><br><span class="line"><span class="comment">但因为它们的身份会被记住，所以这就足够调用此方法来执行任何必要的授权检查。因此，认证和授权应该松散耦合，互不依赖。</span></span><br><span class="line"><span class="comment">&lt;h3&gt;Caching/缓存&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">The &#123;<span class="doctag">@code</span> AuthorizationInfo&#125; values returned from this method are cached for efficient reuse</span></span><br><span class="line"><span class="comment">if caching is enabled.  Caching is enabled automatically when an &#123;<span class="doctag">@link</span> #setAuthorizationCache authorizationCache&#125; </span></span><br><span class="line"><span class="comment">instance has been explicitly configured, or if a &#123;<span class="doctag">@link</span> #setCacheManager cacheManager&#125; has been configured, which</span></span><br><span class="line"><span class="comment">will be used to lazily create the &#123;<span class="doctag">@code</span> authorizationCache&#125; as needed.</span></span><br><span class="line"><span class="comment">如果已启用缓存,从这个方法返回的&#123;AuthorizationInfo&#125;值被缓存起来，以便有效地重用。当&#123;#setAuthorizationCache authorizationCache&#125;实例已显式配置，</span></span><br><span class="line"><span class="comment">或者如果已配置好&#123;#setCacheManager cacheManager&#125;，则将用于根据需要延迟创建/懒加载&#123;authorizationCache&#125;。</span></span><br><span class="line"><span class="comment">&lt;p/&gt;</span></span><br><span class="line"><span class="comment">If caching is enabled, the authorization cache will be checked first and if found, will return the cached</span></span><br><span class="line"><span class="comment">&#123;<span class="doctag">@code</span> AuthorizationInfo&#125; immediately.  If caching is disabled, or there is a cache miss, the authorization</span></span><br><span class="line"><span class="comment">info will be looked up from the underlying data store via the</span></span><br><span class="line"><span class="comment">&#123;<span class="doctag">@link</span> #doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)&#125; method, which must be implemented</span></span><br><span class="line"><span class="comment">by subclasses.</span></span><br><span class="line"><span class="comment">如果启用了缓存，将首先检查授权缓存，如果找到，将立即返回缓存好的&#123;AuthorizationInfo&#125;。</span></span><br><span class="line"><span class="comment">如果缓存被禁用，或者缓存未命中，则授权信息将通过</span></span><br><span class="line"><span class="comment">&#123;#doGetAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection)&#125;方法，这个方法必须有子类实现.</span></span><br><span class="line"><span class="comment">&lt;h4&gt;Changed Data/改变的数据&lt;/h4&gt;</span></span><br><span class="line"><span class="comment">If caching is enabled and if any authorization data for an account is changed at</span></span><br><span class="line"><span class="comment">runtime, such as adding or removing roles and/or permissions, the subclass implementation should clear the</span></span><br><span class="line"><span class="comment">cached AuthorizationInfo for that account via the</span></span><br><span class="line"><span class="comment">&#123;<span class="doctag">@link</span> #clearCachedAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection) clearCachedAuthorizationInfo&#125;</span></span><br><span class="line"><span class="comment">method.  This ensures that the next call to &#123;<span class="doctag">@code</span> getAuthorizationInfo(PrincipalCollection)&#125; will</span></span><br><span class="line"><span class="comment">acquire the account's fresh authorization data, where it will then be cached for efficient reuse.  This</span></span><br><span class="line"><span class="comment">ensures that stale authorization data will not be reused.</span></span><br><span class="line"><span class="comment">如果启用了缓存，并且帐户的任何授权数据在运行时，如添加或删除角色和/或权限，子类实现应清除</span></span><br><span class="line"><span class="comment">通过</span></span><br><span class="line"><span class="comment">&#123;#clearCachedAuthorizationInfo(org.apache.shiro.subject.PrincipalCollection) clearCachedAuthorizationInfo&#125;</span></span><br><span class="line"><span class="comment">方法。这确保了对&#123;<span class="doctag">@code</span> getAuthorizationInfo（PrincipalCollection）&#125;的下一次调用</span></span><br><span class="line"><span class="comment">获取帐户的最新授权数据，然后将其缓存以进行高效重用。这个确保过时的授权数据不会被重用。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> principals the corresponding Subject's identifying principals with which to look up the Subject's</span></span><br><span class="line"><span class="comment"> *                   &#123;<span class="doctag">@code</span> AuthorizationInfo&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the authorization information for the account associated with the specified &#123;<span class="doctag">@code</span> principals&#125;,</span></span><br><span class="line"><span class="comment"> *         or &#123;<span class="doctag">@code</span> null&#125; if no account could be found.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">getAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (principals == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AuthorizationInfo info = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">        log.trace(<span class="string">"Retrieving AuthorizationInfo for principals ["</span> + principals + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Cache&lt;Object, AuthorizationInfo&gt; cache = getAvailableAuthorizationCache();</span><br><span class="line">    <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">"Attempting to retrieve the AuthorizationInfo from cache."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Object key = getAuthorizationCacheKey(principals);</span><br><span class="line">        info = cache.get(key);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">                log.trace(<span class="string">"No AuthorizationInfo found in cache for principals ["</span> + principals + <span class="string">"]"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.trace(<span class="string">"AuthorizationInfo found in cache for principals ["</span> + principals + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (info == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Call template method if the info was not found in a cache</span></span><br><span class="line">        info = doGetAuthorizationInfo(principals);</span><br><span class="line">        <span class="comment">// If the info is not null and the cache has been created, then cache the authorization info.</span></span><br><span class="line">        <span class="keyword">if</span> (info != <span class="keyword">null</span> &amp;&amp; cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                log.trace(<span class="string">"Caching authorization info for principals: ["</span> + principals + <span class="string">"]."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Object key = getAuthorizationCacheKey(principals);</span><br><span class="line">            cache.put(key, info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释说了一大堆,简单总结就是:<br>先去获取缓存对象,<br>如果缓存不为空:就根据主体的principal获得缓存的key,再根据key获取一对一的权限信息<br>否则,就调用doGetAuthorizationInfo的实现方法,即:自定义域/PermissionRealm的doGetAuthorizationInfo方法(如下图所示),查询数据库获取权限信息,封装到org.apache.shiro.authz.SimpleAuthorizationInfo中返回给调用者</p><p>![image-20210224143900730](/…/…/Users/apple/Library/Application Support/typora-user-images/image-20210224143900730.png)</p><h3 id="5-获得info-授权信息后-开始比较角色信息-返回比较结果-boolean"><a class="header-anchor" href="#5-获得info-授权信息后-开始比较角色信息-返回比较结果-boolean">¶</a>(5) 获得info/授权信息后,开始比较角色信息,返回比较结果(boolean)</h3><h3 id="org-apache-shiro-realm-AuthorizingRealm-hasRole-java-lang-String-org-apache-shiro-authz-AuthorizationInfo"><a class="header-anchor" href="#org-apache-shiro-realm-AuthorizingRealm-hasRole-java-lang-String-org-apache-shiro-authz-AuthorizationInfo">¶</a>org.apache.shiro.realm.AuthorizingRealm#hasRole(java.lang.String, org.apache.shiro.authz.AuthorizationInfo)</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnyq1224ehj319g07qmyw.jpg" alt="image-20210224165000430"></p><h1>二、后续</h1><h2 id="一、本文摘要"><a class="header-anchor" href="#一、本文摘要">¶</a>一、本文摘要</h2><p>这个时候返回看这个官方图片,我脑中就清晰不少了.<br><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gnydrwiqs2j30ha0e8dn0.jpg" alt="image-20210224094535489"></p><h2><a class="header-anchor" href="#">¶</a></h2><p>通过断点分析,源码分析了解了shiro通过自定义Realm开发认证;授权规则的实现原理. OK 记录一下学习心得</p><h2 id="二、问题描述"><a class="header-anchor" href="#二、问题描述">¶</a>二、问题描述</h2><h2 id="三、寻求解决方案"><a class="header-anchor" href="#三、寻求解决方案">¶</a>三、寻求解决方案</h2><h2 id="四、寻找原因"><a class="header-anchor" href="#四、寻找原因">¶</a>四、寻找原因</h2><h2 id="五、拓展延伸"><a class="header-anchor" href="#五、拓展延伸">¶</a>五、拓展延伸</h2><!-- rebuild by neat -->]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>Shiro</tag>
        <tag>FrameWork - Authentication(认证)&amp;Authorization(授权)</tag>
      </tags>
  </entry>
  <entry>
    <title>weblogic部署应用日志</title>
    <url>/2020/04/23/weblogic%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><p>前言:</p><ul><li><p>最近项目组迎来了一个不大不小的活,给基于JDK1.6开发的老工程做硬件升级,升级内容:</p></li><li><p>升级背景:<br>- 当前系统应用与数据库均为IBM-P750,IBM-P740小型机,应部门要求,进行应用及数据库IBM小型机下移改造(后面统称为:小机下移)<br>- 当前Oracle数据库版本为:11.2.0.4,非公司主推版本<br>- 当前weblogic中间件版本为:10.3.5,非公司主推版本</p></li><li><p>优化目标:</p><ul><li>应用服务器由目前的IBM-P740小型机(AIX)升级为某某云虚拟机,操作系统由AIX-UNIX升级为RedHat-Linux;	Weblogic中间件由weblogic10.3.5升级至weblogic12c(12.2.1.1.3.0,后来主推12.2.1.4.0)</li><li>数据库服务器🈶目前的IBM-P750小型机(AIX)升级为浪潮8480物理机,操作系统由AIX-UNIX升级为RedHat-Linux; Oracle数据库由orecle11.2.0.4升级为oracle19c,部署模式2+1调整为2+2RAC模式</li></ul></li><li></li></ul><h2 id="一、Weblogic升级日志："><a class="header-anchor" href="#一、Weblogic升级日志：">¶</a>一、Weblogic升级日志：</h2><h3 id="老版本-Weblogic11g-weblogic10-3-5"><a class="header-anchor" href="#老版本-Weblogic11g-weblogic10-3-5">¶</a>老版本:Weblogic11g(weblogic10.3.5):</h3><h3 id="中间版本weblogic12c-12-2-1-1-3-0"><a class="header-anchor" href="#中间版本weblogic12c-12-2-1-1-3-0">¶</a>中间版本weblogic12c(12.2.1.1.3.0):</h3><h3 id="最终版本weblogic12c-12-2-1-4-0"><a class="header-anchor" href="#最终版本weblogic12c-12-2-1-4-0">¶</a>最终版本weblogic12c(12.2.1.4.0):</h3><h2 id="二、Weblogic升级踩坑记录："><a class="header-anchor" href="#二、Weblogic升级踩坑记录：">¶</a>二、Weblogic升级踩坑记录：</h2><h3 id="1-老版本-11g-适配的工程部署到12c后-一系列的jar包冲突问题解决"><a class="header-anchor" href="#1-老版本-11g-适配的工程部署到12c后-一系列的jar包冲突问题解决">¶</a>1. 老版本(11g)适配的工程部署到12c后,一系列的jar包冲突问题解决:</h3><ul><li>总结一下h=gerenweblogic11g,12c jar包冲突解决方法及思路:</li></ul><ol><li>有些项目使用的框架jar包与weblogic中的冲突，因此针对weblogic12c要区别处理</li><li>weblogic12c项目启动后，查看报错的jar包，这个笨方法就是一个一个试着去掉，然后更新webloigc.xml</li></ol><p>weblogic.xml配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wls:weblogic-web-app</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:wls</span>=<span class="string">"http://xmlns.oracle.com/weblogic/weblogic-web-app"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaeehttp://java.sun.com/xml/ns/javaee/ejb-jar_2_5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://xmlns.oracle.com/weblogic/weblogic-web-app http://xmlns.oracle.com/weblogic/weblogic-web-app/1.4/weblogic-web-app.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">wls:context-root</span>&gt;</span>projectname<span class="tag">&lt;/<span class="name">wls:context-root</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">wls:container-descriptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;wls:prefer-web-inf-classes&gt;true&lt;/wls:prefer-web-inf-classes&gt; --&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">wls:servlet-reload-check-secs</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">wls:servlet-reload-check-secs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wls:prefer-application-packages</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  jersey-bundle-*.jar--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wls:package-name</span>&gt;</span>com.sun.jersey.*<span class="tag">&lt;/<span class="name">wls:package-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wls:package-name</span>&gt;</span>com.sun.research.ws.wadl.*<span class="tag">&lt;/<span class="name">wls:package-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wls:package-name</span>&gt;</span>com.sun.ws.rs.ext.*<span class="tag">&lt;/<span class="name">wls:package-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wls:package-name</span>&gt;</span>org.apache.commons.io.*<span class="tag">&lt;/<span class="name">wls:package-name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Jackson-*.jar --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wls:package-name</span>&gt;</span>org.codehaus.jackson.*<span class="tag">&lt;/<span class="name">wls:package-name</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="comment">&lt;!-- jettison-*.jar --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wls:package-name</span>&gt;</span>org.codehaus.jettison.*<span class="tag">&lt;/<span class="name">wls:package-name</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="comment">&lt;!-- jsr311*.jar --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wls:package-name</span>&gt;</span>javax.ws.rs.*<span class="tag">&lt;/<span class="name">wls:package-name</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">            <span class="comment">&lt;!-- asm.jar  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">wls:package-name</span>&gt;</span>org.objectweb.asm.*<span class="tag">&lt;/<span class="name">wls:package-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">wls:prefer-application-packages</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">wls:container-descriptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">wls:weblogic-web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>因公司电脑有加密,所以无法直接搬运;截图补充一下详细注释<br><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1gi20q6ffq8j31540qwad7.jpg" alt="image-20200824171444241"></li><li>注意：<a href="wls:prefer-web-inf-classes">wls:prefer-web-inf-classes</a>true&lt;/wls:prefer-web-inf-classes&gt;这行是注释掉的，原因的话自己google，项目中根据不同jar包，自己可以增添，<br>例如<a href="wls:package-name">wls:package-name</a><a href="http://org.apache.commons.io" target="_blank" rel="noopener">org.apache.commons.io</a>.*&lt;/wls:package-name&gt;这行就是本人自己添加的，只要是包冲突，都可以把冲突包的路径写在里面，然后启动的时候不报错。</li></ul><h3 id="1-老版本-11g-适配的工程部署到12c后-使用了RMI远程调用API报错问题解决"><a class="header-anchor" href="#1-老版本-11g-适配的工程部署到12c后-使用了RMI远程调用API报错问题解决">¶</a>1. 老版本(11g)适配的工程部署到12c后,使用了RMI远程调用API报错问题解决:</h3><p>这个问题但那个是真是让人 摸不着头脑！幸好得到了我们中间件管理员的帮助，在疫情远程办公这种不方便的条件下，我们通过腾讯会议分析出了这个问题的根源，在此文中有必要提名一下！<br>首先，抛出问题：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkehn0uxehj31yd0u0x2q.jpg" alt="image-20200824173211565"></p><ul><li>问题描述：</li></ul><p>公司一向要求开发服务器、测试服、验证服、生产服 所有中间件版本和配置保持一致；这次问题其实就是中间管理员的疏忽，在我们本次硬件升级工作的预投产服上安装了前文提到的中间版本，随后测试组的服务器也批下来了，但是公司要求的主推版本由之前的12.2.1.1.3.0,升级到后来主推12.2.1.4.0</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkehn4jxd0j31od0u0dmr.jpg" alt="image-20200824173841028"></p><p>别看这是如上图中仅仅是一个Patch Set Release的变化；他背后的升级内容是很大的，这也引出了这个问题的原因：</p><ul><li><p>问题分析：</p><p>当我拿到这个报错日志时，我还惯性的企图去定位调用RMI组件的java代码以及相关的配置（没办法，遇到问题，先质疑自己，再质疑别人，这是良性的思维习惯），找了很久无果，工程并没有什么硬性bug；</p><p>那么我联系了中间件管理员，管理员查看日志后，指出是RMI远程调用的某个类没找到；这时候我就奇怪了，怎么会调用不到，首先排除了RMI配置的调用服务端地址的无误，也确认了相关EJB的正常运行；一个人懵逼变成了两个人懵逼</p><p>然后我就求助百度和谷歌了，国内的论坛并没有很友好，最终还是社群更广的StackOverFlow的外国同行给了一下蛛丝马迹：</p><p>这个错误信息给出了两个关键字：</p><p>java.io.InvalidClassException 序列化或者反序列化调用对象是有问题了</p><p>filter status：REJECTED RMI进行IO传输的一些对象失败了被客户端或者服务端的JVM实例判断为恶意对象了，然后就被过滤了！在使用RMI将事件发送到其他应用程序期间，应用程序引发异常。</p><p>然后我就明白了一点，因为jdk是适配weblogic12c安装的jdk8，新版本的jdk优化了一些对象序列化的校验规则，变得更加严格了，即：JEP 290 反序列化过滤器这个组件！</p><p>最终我在oracle weblogic官方网站上找了解释：<a href="https://docs.oracle.com/en/middleware/fusion-middleware/weblogic-server/12.2.1.4/secmg/conf-security-for-domain.html#GUID-902F255F-7325-4F48-A127-57F9851B5330" target="_blank" rel="noopener">https://docs.oracle.com/en/middleware/fusion-middleware/weblogic-server/12.2.1.4/secmg/conf-security-for-domain.html#GUID-902F255F-7325-4F48-A127-57F9851B5330</a></p><p>Use this property to specify whether the filter should apply globally to the entire JVM (as if it had been configured using the Java SE <code>jdk.serialFilter</code> property) or to only internal WebLogic Server deserialization. Valid values are <code>global</code> and <code>weblogic</code>. The default is <code>global</code>.</p></li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Note:</span><br><span class="line">The default is &#96;global&#96; for JDK 7 Update 191 (JDK 7u191) or later and JDK 8 Update 181 (JDK 8u181) or later. For earlier supported JDK versions, the default is &#96;weblogic&#96;.</span><br></pre></td></tr></table></figure><p>For example, to apply the WebLogic Server default or custom filter to internal WebLogic Server deserialization only, instead of to the entire JVM, use:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Dweblogic.oif.serialFilterScope&#x3D;weblogic</span><br></pre></td></tr></table></figure><p>大概意思就是：</p><p>在JDk 8u181(7u191)+weblogic-201901补丁之后，weblogic.oif.serialFilterMode默认值更新为了：global。使用RMI等等会调起反序列化操作的API时，会受到很大干扰！而且值得特别注意的是在wls12.2.1.4版本基线起，jdk8u251上这个策略的更新已经生效了！</p><p>终于水落石出了！</p><ul><li>问题解决：</li></ul><p>1、通过代码配置一个关于这个过滤器的white-list ，这个本来要采用的，但是领导考虑到会给硬件升级需求工作带来更多的测试缺陷，影响考核，你懂的（其实还是我想优雅的让领导背这个历史骂名而已）</p><p>​ 2、采用 oracle提供解决办法，配置服务器运行工程时的jvm参数，配置weblogic子服务器的启动脚本中就好,如下图所示：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Dweblogic.oif.serialFilterScope&#x3D;weblogic</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkehnbvmj2j31ow0u0wj4.jpg" alt="image-20200824183802077"></p><p>目的是在运行时，这个过滤器不再校验这个工程内所有的类（注意是weblogic这个子服务器下工程中所有的类！所以还是编写一个“white-list”比较好，毕竟jvm这个过滤器不应该直接被弃用，尽管旧版本的jdk没有校验工程，但是他的升级肯定是利大于弊！不过因为我们是内网OA系统，所以这么配置也不会有被dos攻击或者反序列化攻击的风险）</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkehncn107j31pa0u0doh.jpg" alt="image-20200824173026557"></p><h3 id="3-老版本-11g-适配的工程部署到12c后-工程部分代码依赖javaee-jar（之前jar包冲突被干掉的）中提供的JspWriter类"><a class="header-anchor" href="#3-老版本-11g-适配的工程部署到12c后-工程部分代码依赖javaee-jar（之前jar包冲突被干掉的）中提供的JspWriter类">¶</a>3. 老版本(11g)适配的工程部署到12c后,工程部分代码依赖javaee.jar（之前jar包冲突被干掉的）中提供的JspWriter类</h3><p>问题描述:</p><ul><li><p>这个bug还是在我改造工程的后期才浮现，之前我都是直接修改编译后的工程包，当使用ant构建编译任务时，ant依赖的编译器（javac或者eclispe提供的JDTCompilerAdapter）会扫描工程或者ant的lib目录是否存在javaee.jar；但是像这种公共的jar包不需要放在工程lib目录下，况且他和wls12c有冲突，但是编译器没有这个jar包</p></li><li><p>问题解决:<br>1、把这个jar放在编译器目录下，但是我没有这样做因为javaee.jar的版本太老，尽管是公共的jar包，公司将来升级架构或者中间件，又会出现问题，而且编译时期出现问题，公司负责编译的同事不懂技术，我就不给他挖坑了<br>2、javaee.jar留在工程内，但是不放在WEB-INF/lib目录下，即：本地开发，部署到tmocat6或者放在服务器上的wls12c运行时调用自带的这个包，仅仅是编译时去读这个jar；当然你会疑问为了编译，而给工程新增不必要的文件，给服务器的内存增加负担，这样不是太保守了么？</p><p>​	不是的，ant有个主要特性就是，他不是编译器，他是整个编译过程的组织者；ant通过读取我们编写的xml，来逐项执行xml里面的task，来完成清空并创建编译目录等一系列复杂操作！ant甚至提供了一系列标签组来让你可以自由定义任务内容，</p><p>​	如这篇博文描述：<a href="https://www.cnblogs.com/qianjinyan/p/9531519.html" target="_blank" rel="noopener">https://www.cnblogs.com/qianjinyan/p/9531519.html</a><br><code>Ant与基于shell命令的扩展模式不同，Ant用Java的类来扩展。不必编写shell命令，配置文件是基于XML的，通过调用target树，就可执行各种task。每个task由实现了一个实现了特定Task接口的对象来运行。 必须承认，这样做，在构造shell命令时会失去一些特有的表达能力。如</code>find . -name foo -exec rm {}<code>，但却给了你跨平台的能力－你可以在任何地方工作。如果你真的需要执行一些shell命令，Ant有一个&lt;exec&gt; task，这个task允许执行特定OS上的命令。</code></p></li><li><p>具体实现：</p><p>1、修改ant脚本，默认是build.xml</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkegwilwayj32gw0gi787.jpg" alt="image-20201105175433514"></p></li></ul><ul><li>说明：</li></ul><p>上面提到，因为解决jar包冲突，我舍弃了本地工程的javaee.jar，但是编译工程的时候，我发现原来jdk的lib目录中并没有这个包，我们要还是依赖它的！</p><p>所以我只能再想办法，将这个jar包放在一个compileTempLib目录下，在这个ant脚本中引入此目录；不过既然都打开了，顺带也借助ant脚本优化了一下，</p><p>就是：</p><p>当ant的编译工作是依赖我们编写的每一个target，自上而下逐项执行的；</p><p>当ant执行完如“清除静态文件并将各模块下的静态资源复制到指定目录下”、“编译代码”等任务后，由于我考虑到工程里的那个compileTempLib目录下还放了一个应该被舍弃的jar包，他在编译代码之后，就没用了！我们可以编写一个target，里面的参数写一个delete命令，如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"delete-project example"</span> <span class="attr">default</span>=<span class="string">"del"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"del"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">delete</span> <span class="attr">file</span>=<span class="string">"/XXXXXX/compileTempLib/javaee.jar"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是领导提出我就这点文件改动了不少啊，打工仔一点就通！</p><p>也行；那就PlanB：</p><p>因为编译工程完成后，我们常常会上传到服务器上去，但工程往往都会打个包，加快传输效率；所以脚本中会在最后有一个打包的target，所以我可以在打包时，在&quot;打包&quot;这一环节动手脚,ant的zip命令有一个通用属性，就是 <strong>excludes</strong> ,可以排除掉指定的文件进行打包！问题解决。</p><p>如下图：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkeh7p8rcdj31vw0eimzk.jpg" alt="image-20201105183243278"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以通过使用excludes属性指定文件名来排除文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">"zip-project example"</span> <span class="attr">default</span>=<span class="string">"run"</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"run"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">zip</span> <span class="attr">destfile</span>=<span class="string">"$&#123;path&#125;/$&#123;param1&#125;/XXX.zip"</span> <span class="attr">basedir</span>=<span class="string">"project_path"</span> <span class="attr">update</span>=<span class="string">"true"</span> <span class="attr">excludes</span>=<span class="string">"xyz.txt"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如下图，服务器上此目录下空空如也了已经，javaee.jar的特殊处理到此完成了</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gkegwlc981j31460u0dju.jpg" alt="image-20201105181242677"></p><h2 id="感受："><a class="header-anchor" href="#感受：">¶</a>感受：</h2><ul><li><p>总结，这次服务器升级还是学到很多的，工作之余慢慢总结更新吧</p></li><li><p>以上资料部分摘自网络，尊重原作者版权，分享给更多的读者。</p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>weblogic</category>
      </categories>
      <tags>
        <tag>weblogic</tag>
        <tag>server</tag>
        <tag>war</tag>
        <tag>jar包冲突</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac环境如何初始化git仓库</title>
    <url>/2020/03/03/Mac%E7%8E%AF%E5%A2%83%E5%A6%82%E4%BD%95%E5%88%9D%E5%A7%8B%E5%8C%96git%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><h2 id="一、准备工作"><a class="header-anchor" href="#一、准备工作">¶</a>一、准备工作</h2><ul><li><p>本地新建一个文件</p><p><img src="http://i1.fuimg.com/711532/dc4b97f967375df3.png" alt="xinmulu"></p></li><li><p>打开”终端“</p></li></ul><h2 id="二、开始初始化git本地仓库"><a class="header-anchor" href="#二、开始初始化git本地仓库">¶</a>二、开始初始化git本地仓库</h2><h3 id="1-在终端窗口-进入创建好的新目录下-并执行以下命令进行初始化"><a class="header-anchor" href="#1-在终端窗口-进入创建好的新目录下-并执行以下命令进行初始化">¶</a>1.在终端窗口,进入创建好的新目录下,并执行以下命令进行初始化:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 直接将Folder新建的目录拖进来,自动转换为一条绝对路径</span><br><span class="line">git init <span class="comment"># 开始初始化..</span></span><br></pre></td></tr></table></figure><ul><li>如下图,你会看到初始化后,你的目录下,生成了一个 .git 隐藏目录!</li></ul><p><img src="http://i2.tiimg.com/711532/88017e5e8331a953.png" alt="git_init"></p><h2 id="2-给这个git配置用户信息"><a class="header-anchor" href="#2-给这个git配置用户信息">¶</a>2.给这个git配置用户信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name <span class="string">"xxx"</span> <span class="comment"># 随意</span></span><br><span class="line">git config user.email <span class="string">"xxx@xx.com"</span> <span class="comment"># 随意,编一个都行,大概是github出于协同开发的目的,没啥意义</span></span><br></pre></td></tr></table></figure><ul><li>执行完上面的命令,终端没有反应或者响应信息,说明配置成功! 如下图: 打开config文件,就会看到你配置的用户信息</li></ul><p><img src="http://i2.tiimg.com/711532/38299ab3083cb846.png" alt="git_config"></p><h3 id="3-给git配置全局的用户名和邮箱-只要创建了git就一定要配置用户名称与邮箱"><a class="header-anchor" href="#3-给git配置全局的用户名和邮箱-只要创建了git就一定要配置用户名称与邮箱">¶</a>3.给git配置全局的用户名和邮箱(只要创建了git就一定要配置用户名称与邮箱).</h3><ul><li>配置了全局用户信息后,以后如果该文件没有用户名和邮箱,就会使用全局配置的,就近原则而已.</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"XXX"</span></span><br><span class="line">git config --global user.email <span class="string">"XXX@xx.com"</span></span><br></pre></td></tr></table></figure><p>执行完上面的命令,终端没有反应或者响应信息,说明配置成功! 如下图: 确认一下配置是否成功:</p><p><img src="http://i2.tiimg.com/711532/c4ab554735371b50.png" alt="global_config"></p><h3 id="P-S-Mac如何显示隐藏文件，如：-git"><a class="header-anchor" href="#P-S-Mac如何显示隐藏文件，如：-git">¶</a>P.S. Mac如何显示隐藏文件，如： .git</h3><ul><li>1.打开“终端”，根据自己的版本选择命令</li><li>2.早期的OS X（10.6~10.8）系统可以使用如下两条命令来开始或者关闭系统隐藏文件的显示：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles Yes &amp;&amp; killall Finder <span class="comment"># 显示隐藏文件</span></span><br><span class="line">defaults write com.apple.Finder AppleShowAllFiles No &amp;&amp; killall Finder  <span class="comment"># 不显示隐藏文件</span></span><br></pre></td></tr></table></figure><ul><li>3.当升级到OS X 10.9 Mavericks版本之后，这两条命令需要做一些修改，变成了如下命令：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles Yes &amp;&amp; killall Finder <span class="comment"># 显示隐藏文件</span></span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles No &amp;&amp; killall Finder  <span class="comment"># 不显示隐藏文件</span></span><br></pre></td></tr></table></figure><ul><li>快捷键：（本人是笔记本，亲测可用）<br>在 macOS Sierra，可以使用快捷键⌘⇧.(Command + Shift + .) 来快速（在 Finder 中）显示和隐藏隐藏文件了。</li></ul><h3 id="三、测试过程待补充…"><a class="header-anchor" href="#三、测试过程待补充…">¶</a>三、测试过程待补充…</h3><ul><li>初始化本地代码仓库，必须指定用户名和邮箱，否则无法进行提交</li><li>无论是添加文件还是修改原文件，都必须进行<code>git add</code>,当然这只是在使用命令行的时候</li><li>如果使用Xcode来创建文件，Xcode会默认进行 <code>git add</code> 操作，不需要进行<code>git add</code></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>Mac</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL问题解决</title>
    <url>/2020/03/03/MySQL%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><h2 id="今天在构建SpringBoot时，遇到以下问题："><a class="header-anchor" href="#今天在构建SpringBoot时，遇到以下问题：">¶</a>今天在构建SpringBoot时，遇到以下问题：</h2><h3 id="1-java连接MySQL-8-0-数据库需要java应用-显式声明AllowPublicKeyRetrieval-True来获取公钥："><a class="header-anchor" href="#1-java连接MySQL-8-0-数据库需要java应用-显式声明AllowPublicKeyRetrieval-True来获取公钥：">¶</a>1.java连接MySQL 8.0 数据库需要java应用 显式声明AllowPublicKeyRetrieval=True来获取公钥：</h3><ul><li>在使用 MySQL 8.0 时重启应用后提示</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异常日志：</span></span><br><span class="line">`com.mysql.jdbc.exceptions.jdbc4.MySQLNonTransientConnectionException: Public Key Retrieval is not allowed`</span><br></pre></td></tr></table></figure><ul><li>解决办法：应用的yml配置文件中，进行修改：</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="string">url:jdbc:mysql:///leyoucharacterEncoding=UTF8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="string">&amp;allowPublicKeyRetrieval=true</span></span><br></pre></td></tr></table></figure><ul><li>问题原因：</li></ul><p>文档中(<a href="https://mysql-net.github.io/MySqlConnector/connection-options/" target="_blank" rel="noopener">https://mysql-net.github.io/MySqlConnector/connection-options/</a>)给出的解释是：</p><p><img src="http://i1.fuimg.com/711532/650a1b7f642b63b9.png" alt="Markdown"></p><pre><code>	如果用户使用了 sha256_password 认证，密码在传输过程中必须使用 TLS 协议保护，但是如果 RSA 公钥不可用，可以使用服务器提供的公钥；可以在连接中通过 ServerRSAPublicKeyFile 指定服务器的 RSA 公钥，或者AllowPublicKeyRetrieval=True参数以允许客户端从服务器获取公钥；
	但是需要注意的是 AllowPublicKeyRetrieval=True可能会导致恶意的代理通过中间人攻击(MITM)获取到明文密码，所以默认是关闭的，必须显式开启！
	但是后面不加那句配置，却不报错了，应该有缓存的可能，为了保险，以后还是加上最好！
</code></pre><h3 id="2-MySQL-8-0-新版本，项目的驱动包不匹配"><a class="header-anchor" href="#2-MySQL-8-0-新版本，项目的驱动包不匹配">¶</a>2.MySQL 8.0 新版本，项目的驱动包不匹配</h3><ul><li>在使用 MySQL 8.0 时重启应用后提示</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异常日志：</span></span><br><span class="line">Loading class `com.mysql.jdbc.Driver<span class="string">'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'</span>.</span><br></pre></td></tr></table></figure><ul><li>解决办法：应用的yml文件里，更改jdbc连接驱动：</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#    driver-class-name: com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><ul><li>问题原因：</li></ul><p>异常信息表明数据库驱动<code>com.mysql.jdbc.Driver'</code>已经被弃用了、应当使用新的驱动<code>com.mysql.cj.jdbc.Driver'</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bug记录</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>bug</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>BitrhDiray</title>
    <url>/2020/03/02/BirthDiray/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><a id="more"></a><p>2020.03.01</p><p>搭建hexo+github记录：基于https://www.jianshu.com/p/77db3862595c</p><p>之前在wins下搭建过一次 并不是很美观…</p><p>最近剁手了一台mbp 贼心不死 欲再次祸害这台新成员 hiahia</p><h1>一、命令行记录</h1><h2 id="1-操作之前，日常brew-upgrade"><a class="header-anchor" href="#1-操作之前，日常brew-upgrade">¶</a>1.操作之前，日常brew upgrade</h2><h2 id="2-检查hexo所需环境，即：git-，node-js"><a class="header-anchor" href="#2-检查hexo所需环境，即：git-，node-js">¶</a>2.检查hexo所需环境，即：git ，node.js</h2><p>​	分别为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version    </span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggvbcdw0nyj30fo04iaay.jpg" alt="image-20200301200755209"></p><h2 id="3-创建一个126邮箱-zombiesoull-163-com-注册成github账户"><a class="header-anchor" href="#3-创建一个126邮箱-zombiesoull-163-com-注册成github账户">¶</a>3.创建一个126邮箱 <a href="mailto:zombiesoull@163.com">zombiesoull@163.com</a> 注册成github账户</h2><h2 id="4-new-一个-respository"><a class="header-anchor" href="#4-new-一个-respository">¶</a>4.new 一个 respository</h2><p>用来部署hexo项目 注意：仓库名格式：<a href="http://xn--github+github-1p8v876mxlyd.io" target="_blank" rel="noopener">github用户名+github.io</a>	如：<a href="https://github.com/zombiesoull/zombiesoull.github.io" target="_blank" rel="noopener">zombiesoull.github.io</a></p><h2 id="5-返回终端界面"><a class="header-anchor" href="#5-返回终端界面">¶</a>5.返回终端界面</h2><p>开始安装hexo组件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggvbcgzlevj30se01kt98.jpg" alt="image-20200301200720621"></p><h2 id="6-在访问窗口进入文稿-创建新文件夹，如：hexo-blog"><a class="header-anchor" href="#6-在访问窗口进入文稿-创建新文件夹，如：hexo-blog">¶</a>6.在访问窗口进入文稿 创建新文件夹，如：hexo-blog</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggvbcjfwi6j30hu0es0ur.jpg" alt="image-20200301200943030"></p><h2 id="7-终端-进入该目录，即：站点根目录"><a class="header-anchor" href="#7-终端-进入该目录，即：站点根目录">¶</a>7.终端 进入该目录，即：站点根目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> hexo-blog</span><br></pre></td></tr></table></figure><h2 id="8-开始初始化hexo项目，即：hexo部署："><a class="header-anchor" href="#8-开始初始化hexo项目，即：hexo部署：">¶</a>8.开始初始化hexo项目，即：hexo部署：</h2><h3 id="8-1-运行命令-，如图："><a class="header-anchor" href="#8-1-运行命令-，如图：">¶</a>8.1 运行命令 ，如图：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggvbcmqws7j30z20gaqac.jpg" alt="image-20200301201255456"></p><h3 id="8-2-成功界面："><a class="header-anchor" href="#8-2-成功界面：">¶</a>8.2 成功界面：</h3><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggvbcphen0j31300futc6.jpg" alt="image-20200301201414066"></p><h2 id="9-开启本地服务"><a class="header-anchor" href="#9-开启本地服务">¶</a>9.开启本地服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggvbcseyrxj30se02gwf3.jpg" alt="image-20200301201716578"></p><ul><li>建议：作为初次使用，肯定在后面配置的过程中出现不可控的遗漏甚至错误，至此以后的每次内容、主题修改,，都先试用一下两条命令在本地测试一下！</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line"><span class="comment"># 带有debug功能，判断命令执行过程中那一部分出了错，然后再去改</span></span><br><span class="line">hexo g --debug</span><br></pre></td></tr></table></figure><h2 id="10-出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。"><a class="header-anchor" href="#10-出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。">¶</a>10.出现以下信息，说明你可以本地访问博客系统，在浏览器输入4000这个网址，就可以看到博客首页。</h2><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggvbcvcchlj31pg0u07wh.jpg" alt="image-20200301201917028"></p><p>至此：说明环境已经没有问题了，成功了搭建起了hexo博客框架</p><h1>二、博客关联到Github仓库</h1><h2 id="1-生成静态页面-上传到之前的github-仓库里"><a class="header-anchor" href="#1-生成静态页面-上传到之前的github-仓库里">¶</a>1.生成静态页面 上传到之前的github 仓库里</h2><ul><li>首先我们要编辑图中_config.yml文件，这是博客的主要配置文件，在下面一部分，我们要频繁使用这个配置文件，这里先编辑一步，为了管理GitHub账号。</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggvbd1zwtaj30ow03egma.jpg" alt="image-20200301205123635"></p><ul><li>打开文件之后，在文档最后，输入红色大框中的内容，只需要将你的username替换就可以了，其他无需更改。</li></ul><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/zombiesoull/zombiesoull.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><ul><li>编辑好后：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">esc键</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><ul><li>然后在目录中执行</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 产生静态网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 部署到GitHub page上</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li><p>然后你需要输入你GitHub的用户名和密码，这样你就就可以使用你的仓库名去访问你的博客主页了。为了每一次部署不必一种输入密码，我们可以生成秘钥，然后提交到GitHub，进行关联，那么你下次就不需要再输入密码了。</p></li><li><p>备注：<br>在部署HEXO时出现	ERROR Deployer not found : github	的问题解决办法：<br>经过调查后才知道HEXO更新到3.0之后，deploy的type 的github需要改成git<br>但是还是不行  出现了 ERROR Deployer not found: git 的错误<br>后来经过调查之后 才知道 需要运行下这个指令才行</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后就可以执行命令部署静态页面了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="2"><a class="header-anchor" href="#2">¶</a>2.</h2><ul><li>基于网址：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;help.github.com&#x2F;en&#x2F;github&#x2F;authenticating-to-github&#x2F;generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</span><br></pre></td></tr></table></figure><ul><li>这一步执行以下命令， <a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key" target="_blank" rel="noopener">生成新的SSH密钥</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用你注册GitHub时的邮箱号，进行秘钥生成</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"xxxxxxx@qq.com"</span></span><br><span class="line"><span class="comment"># 系统就会生成一个隐藏文件夹.ssh</span></span><br><span class="line"><span class="built_in">cd</span> .ssh</span><br><span class="line">ls</span><br><span class="line"><span class="comment"># 复制公钥</span></span><br><span class="line">vim id_rsa.pub</span><br></pre></td></tr></table></figure><ul><li>ps:passphrase直接Enter（设置为空）</li></ul><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlly1ggvbd5w04ej312k08m41o.jpg" alt="image-20200301204515786"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行命令：</span></span><br><span class="line">Zombie-MBP:.ssh apple$ ssh-keygen -t rsa -C <span class="string">"zombiesouls@xxx.com"</span></span><br><span class="line"><span class="comment"># 执行中 ...</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/apple/.ssh/id_rsa): <span class="comment">#回车</span></span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): <span class="comment">#输入密码，可以为空，回车</span></span><br><span class="line">Enter same passphrase again: <span class="comment">#确认密码，可以为空，回车</span></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/apple/.ssh/id_rsa. <span class="comment">#生成的密钥</span></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/apple/.ssh/id_rsa.pub. <span class="comment">#生成的公钥</span></span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:sfA1CfE4xaUiC/iXh18qp+nq08diwOrbJajV7zo+zxE zombiesouls@126.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|        oo...    |</span></span><br><span class="line"><span class="string">|   .     =.o     |</span></span><br><span class="line"><span class="string">|  . . o = *      |</span></span><br><span class="line"><span class="string">|   . . B * .     |</span></span><br><span class="line"><span class="string">|   .. E S .      |</span></span><br><span class="line"><span class="string">|   oo. + o       |</span></span><br><span class="line"><span class="string">|  o.oo+.+        |</span></span><br><span class="line"><span class="string">| o..+=+*o        |</span></span><br><span class="line"><span class="string">|..o+*@Oo         |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string"># 执行完毕：公钥 私钥 见另外目录（/Users/apple/Documents/markdown）</span></span><br><span class="line"><span class="string">Zombie-MBP:.ssh apple$</span></span><br></pre></td></tr></table></figure><ul><li>进入github账户设置/setting，然后点击SSH and GPG keys，创建新的SSH，将之前复制的公钥黏贴，提交，OK。</li><li>进入settings，按照如下图示操作：<br><strong>第一步：</strong><br><img src="http://i2.tiimg.com/711532/234e9d1681dab027.jpg" alt="Markdown"><br><strong>第二步：</strong><br><img src="http://i2.tiimg.com/711532/4346cbe4154993fe.jpg" alt="Markdown"><br><strong>第三步：</strong><br><img src="http://i2.tiimg.com/711532/47e51d6686698257.png" alt="Markdown"></li></ul><h1>三、发布文章&amp;页面优化…</h1><p>持续更新。。</p><p>​</p><p>—————— 21:00 2020.03.01</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo_build</tag>
      </tags>
  </entry>
  <entry>
    <title>struts1/struts2/springMVC对比</title>
    <url>/2019/12/03/struts1:struts2:springMVC%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><ul><li><p>最近做项目用到了struts2，之前一直是用struts1和springMVC。感觉到了struts2从很大程度上和这两个还是有很大区别的，所以今天搜集了些资料，给他们做一下对比。</p></li><li><p>Struts1官方已经停止更新，现在用的也比较少，这里主要记录一下struts2和struts1比较都有哪些不同和进步。</p></li><li><p>Struts2可以说 不是完全从struts1改进来的，因为struts2原本就是举世闻名的Webwork2，在经历几年的发展之后，struts和WebWork社区决定合二 为一，也就是今天的struts2.</p></li></ul><h2 id="Struts2与struts1比较的新特性："><a class="header-anchor" href="#Struts2与struts1比较的新特性：">¶</a>Struts2与struts1比较的新特性：</h2><h3 id="Action-类"><a class="header-anchor" href="#Action-类">¶</a>Action 类:</h3><p>• Struts1要求Action类继承一个抽象基类。Struts1的一个普遍问题是使用抽象类编程而不是接口。</p><p>• Struts 2 Action类可以实现一个Action接口，也可实现其他接口，使可选和定制的服务成为可能。Struts2提供一个ActionSupport基类去 实现常用的接口。Action接口不是必须的，任何有execute标识的POJO对象都可以用作Struts2的Action对象。</p><h3 id="线程模式"><a class="header-anchor" href="#线程模式">¶</a>线程模式:</h3><p>• Struts1 Action是单例模式并且必须是线程安全的，因为仅有Action的一个实例来处理所有的请求。单例策略限制了Struts1 Action能作的事，并且要在开发时特别小心。Action资源必须是线程安全的或同步的。</p><p>• Struts2 Action对象为每一个请求产生一个实例，因此没有线程安全问题。（实际上，servlet容器给每个请求产生许多可丢弃的对象，并且不会导致性能和垃圾回收问题）</p><h3 id="Servlet-依赖"><a class="header-anchor" href="#Servlet-依赖">¶</a>Servlet 依赖:</h3><p>• Struts1 Action 依赖于ServletAPI ,因为当一个Action被调用时HttpServletRequest 和 HttpServletResponse 被传递给execute方法。</p><p>• Struts 2 Action不依赖于容器，允许Action脱离容器单独被测试。如果需要，Struts2 Action仍然可以访问初始的request和response。但是，其他的元素减少或者消除了直接访问 HttpServetRequest 和 HttpServletResponse的必要性。</p><h3 id="可测性"><a class="header-anchor" href="#可测性">¶</a>可测性:</h3><p>• 测试Struts1Action的一个主要问题是execute方法暴露了servlet API（这使得测试要依赖于容器）。一个第三方扩展－－Struts TestCase－－提供了一套Struts1的模拟对象（来进行测试）。</p><p>• Struts 2 Action可以通过初始化、设置属性、调用方法来测试，“依赖注入”支持也使测试更容易。</p><h3 id="捕获输入"><a class="header-anchor" href="#捕获输入">¶</a>捕获输入:</h3><p>• Struts1 使用ActionForm对象捕获输入。所有的 ActionForm必须继承一个基类。因为其他JavaBean不能用作ActionForm，开发者经常创建多余的类捕获输入。动态 Bean（DynaBeans）可以作为创建传统ActionForm的选择，但是，开发者可能是在重新描述(创建)已经存在的JavaBean（仍然会 导致有冗余的javabean）。</p><p>• Struts 2直接使用Action属性作为输入属性，消除了对第二个输入对象的需求。输入属性可能是有自己(子)属性的rich对象类型。Action属性能够通过 web页面上的taglibs访问。Struts2也支持ActionForm模式。rich对象类型，包括业务对象，能够用作输入/输出对象。这种 ModelDriven 特性简化了taglib对POJO输入对象的引用。</p><h3 id="表达式语言："><a class="header-anchor" href="#表达式语言：">¶</a>表达式语言：</h3><p>• Struts1 整合了JSTL，因此使用JSTL EL。这种EL有基本对象图遍历，但是对集合和索引属性的支持很弱。</p><p>• Struts2可以使用JSTL，但是也支持一个更强大和灵活的表达式语言－－“Object Graph Notation Language” (OGNL).</p><h3 id="绑定值到页面（view）"><a class="header-anchor" href="#绑定值到页面（view）">¶</a>绑定值到页面（view）:</h3><p>• Struts 1使用标准JSP机制把对象绑定到页面中来访问。</p><p>• Struts 2 使用 &quot;ValueStack&quot;技术，使taglib能够访问值而不需要把你的页面（view）和对象绑定起来。ValueStack策略允许通过一系列名称相同但类型不同的属性重用页面（view）。</p><h3 id="类型转换："><a class="header-anchor" href="#类型转换：">¶</a>类型转换：</h3><p>• Struts 1 ActionForm 属性通常都是String类型。Struts1使用Commons-Beanutils进行类型转换。每个类一个转换器，对每一个实例来说是不可配置的。</p><p>• Struts2 使用OGNL进行类型转换。提供基本和常用对象的转换器。</p><h3 id="校验："><a class="header-anchor" href="#校验：">¶</a>校验：</h3><p>• Struts 1支持在ActionForm的validate方法中手动校验，或者通过Commons Validator的扩展来校验。同一个类可以有不同的校验内容，但不能校验子对象。</p><p>• Struts2支持通过validate方法和XWork校验框架来进行校验。XWork校验框架使用为属性类类型定义的校验和内容校验，来支持chain校验子属性</p><h3 id="Action执行的控制："><a class="header-anchor" href="#Action执行的控制：">¶</a>Action执行的控制：</h3><p>• Struts1支持每一个模块有单独的Request Processors（生命周期），但是模块中的所有Action必须共享相同的生命周期。</p><p>• Struts2支持通过拦截器堆栈（Interceptor Stacks）为每一个Action创建不同的生命周期。堆栈能够根据需要和不同的Action一起使用。</p><h2 id="SpringMVC与Struts2的比较："><a class="header-anchor" href="#SpringMVC与Struts2的比较：">¶</a>SpringMVC与Struts2的比较：</h2><h3 id="机制："><a class="header-anchor" href="#机制：">¶</a>机制：</h3><p>spring mvc的入口是servlet，而struts2是filter（这里要指出，filter和servlet是不同的。以前认为filter是servlet的一种特殊），这样就导致了二者的机制不同，这里就牵涉到servlet和filter的区别了。</p><h3 id="性能："><a class="header-anchor" href="#性能：">¶</a>性能：</h3><p>spring会稍微比struts快。spring mvc是基于方法的设计，而sturts是基于类，每次发一次请求都会实例一个action，每个action都会被注入属性，而spring基于方法， 粒度更细，但要小心把握像在servlet控制数据一样。spring3 mvc是方法级别的拦截，拦截到方法后根据参数上的注解，把request数据注入进去，在spring3 mvc中，一个方法对应一个request上下文。而struts2框架是类级别的拦截，每次来了请求就创建一个Action，然后调用setter getter方法把request中的数据注入；struts2实际上是通过setter getter方法与request打交道的；struts2中，一个Action对象对应一个request上下文。</p><h3 id="参数传递："><a class="header-anchor" href="#参数传递：">¶</a>参数传递：</h3><p>struts是在接受参数的时候，可以用属性来接受参数，这就说明参数是让多个方法共享的。</p><h3 id="设计思想上："><a class="header-anchor" href="#设计思想上：">¶</a>设计思想上：</h3><p>struts更加符合oop的编程思想， spring就比较谨慎，在servlet上扩展。</p><h3 id="intercepter的实现机制："><a class="header-anchor" href="#intercepter的实现机制：">¶</a>intercepter的实现机制：</h3><p>有以自己的interceptor机制，spring mvc用的是独立的AOP方式。这样导致struts的配置文件量还是比spring mvc大，虽然struts的配置能继承，所以我觉得论使用上来讲，spring mvc使用更加简洁，开发效率Spring MVC确实比struts2高。spring mvc是方法级别的拦截，一个方法对应一个request上下文，而方法同时又跟一个url对应，所以说从架构本身上spring3 mvc就容易实现restful url。struts2是类级别的拦截，一个类对应一个request上下文；实现restful url要费劲，因为struts2 action的一个方法可以对应一个url；而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了。spring3mvc的方法之间 基本上独立的，独享request response数据，请求数据通过参数获取，处理结果通过ModelMap交回给框架方法之间不共享变量，而struts2搞的就比较乱，虽然方法之间 也是独立的，但其所有Action变量是共享的，这不会影响程序运行，却给我们编码，读程序时带来麻烦。</p><h2 id="感受："><a class="header-anchor" href="#感受：">¶</a>感受：</h2><ul><li><p>struts1目前已经很少再用，但在我曾服务过的项目中,以struts1/2为基础的也有.</p></li><li><p>个人感觉springMVC在易用性上要优于struts1/2.</p><p>struts1/2 和 springMVC在性能方面是不分伯仲，每个阵营都有自己的测试数据，从我目前的编程经验来看,很难说(maybe.我没资格说)哪一个更优秀。</p></li><li><p>以上资料部分摘自网络，尊重原作者版权，分享给更多的读者。</p></li></ul><!-- rebuild by neat -->]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>FrameWork</tag>
        <tag>Struts1</tag>
        <tag>Struts2</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis关于@Param的学习</title>
    <url>/2019/07/06/MyBatis%E5%85%B3%E4%BA%8E@Param%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><h1>一、MyBatis关于@Param的学习:</h1><p><strong>__ @Param 注解的四种使用场景，最后一种经常被人忽略！</strong></p><p>如下几个需要添加 @Param 注解的场景，相信大家都已经有共识了：</p><h2 id="第一种：方法有多个参数，需要-Param-注解"><a class="header-anchor" href="#第一种：方法有多个参数，需要-Param-注解">¶</a>第一种：方法有多个参数，需要 @Param 注解</h2><p>例如下面这样：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">insert</span><span class="params">(@Param(<span class="string">"username"</span>)</span> String username, @<span class="title">Param</span><span class="params">(<span class="string">"address"</span>)</span> String address)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 XML 文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    insert into user (username,address) values (#&#123;username&#125; , #&#123;address&#125; ) ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是最常见的需要添加 @Param 注解的场景。</p><h2 id="第二种：方法参数要取别名，需要-Param-注解"><a class="header-anchor" href="#第二种：方法参数要取别名，需要-Param-注解">¶</a>第二种：方法参数要取别名，需要 @Param 注解</h2><p>当需要给参数取一个别名的时候，我们也需要 @Param 注解，例如方法定义如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">getUserByUsername</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 XML 定义如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByUsername"</span> <span class="attr">parameterType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    select * from user where username=#&#123;name&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>老实说，这种需求不多，费事。</p><h2 id="第三种：XML-中的-SQL-使用了-，那么参数中也需要-Param-注解"><a class="header-anchor" href="#第三种：XML-中的-SQL-使用了-，那么参数中也需要-Param-注解">¶</a>第三种：XML 中的 SQL 使用了 $ ，那么参数中也需要 @Param 注解</h2><p><strong>$</strong> 会有注入漏洞的问题，但是有的时候你不得不使用**$** 符号，例如要传入列名或者表名的时候，这个时候必须要添加 @Param 注解，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getAllUsers</span><span class="params">(@Param(<span class="string">"order_by"</span>)</span>String order_by)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的 XML 定义如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAllUsers"</span> <span class="attr">resultType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"order_by!=null and order_by!=''"</span>&gt;</span></span><br><span class="line">        order by $&#123;order_by&#125; desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面这三种，都很容易懂，相信很多小伙伴也都懂，除了这三种常见的场景之外，还有一个特殊的场景，经常被人忽略。</p><h2 id="第四种：那就是动态-SQL-，如果在动态-SQL-中使用了参数作为变量，那么也需要-Param-注解，即使你只有一个参数。"><a class="header-anchor" href="#第四种：那就是动态-SQL-，如果在动态-SQL-中使用了参数作为变量，那么也需要-Param-注解，即使你只有一个参数。">¶</a>第四种：那就是动态 SQL ，如果在动态 SQL 中使用了参数作为变量，那么也需要 @Param 注解，即使你只有一个参数。</h2><p>如果我们在动态 SQL 中用到了 参数作为判断条件，那么也是一定要加 @Param 注解的，例如如下方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义出来的 SQL 如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"org.javaboy.helloboot.bean.User"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种情况，即使只有一个参数，也需要添加 @Param 注解，而这种情况却经常被人忽略！</p><h2 id="另外：传递多个参数-不使用-Param-注解"><a class="header-anchor" href="#另外：传递多个参数-不使用-Param-注解">¶</a>另外：传递多个参数,不使用 @Param 注解</h2><p>其实从第一种场景中已经可以实现传递多个参数了，<strong>即把多个参数封装到一个 javaBean 中</strong>就可以实现了，但是如果是两个或者多个 javaBean 的时候，可以通过使用@Param注解的方式来实现，但是需要把每个 javaBean 中的属性全部拆分出来，这样就增加了巨大的代码量，因此不推荐这么做<br>那么有没有可以不使用@Param注解，同样也可以传递多个参数(尤其是多个 javaBean)呢?</p><p>答案是有的，封装到HashMap集合中,废话不多说，直接上代码</p><p>同上，这里只贴出关键部分：</p><ul><li>DAO 层</li><li>UserInfoDAO.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//	搜索用户,对结果进行分页</span></span><br><span class="line"><span class="function">List <span class="title">searchUser</span><span class="params">(Map&lt;String,Object&gt;)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>调用DAO</li><li>UserService.java</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">Pagination page = <span class="keyword">new</span> Pagination();</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;;</span><br><span class="line">map.put(<span class="string">"userInfo"</span>,userInfo);</span><br><span class="line">pam.put(<span class="string">"page"</span>,page);</span><br><span class="line">userInfoDao.searchUser(map);</span><br></pre></td></tr></table></figure><ul><li>mapper文件userInfomapper.xml</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">&lt;select id="searchUser" parameterType="java.util.Map" resultType="UserInfo"&gt;</span><br><span class="line">    <span class="keyword">select</span> *</span><br><span class="line">    <span class="keyword">from</span> t_userinfo <span class="keyword">user</span> </span><br><span class="line">    <span class="keyword">where</span> <span class="number">1</span> =<span class="number">1</span></span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"user.uname != null and ''!= user.uname "</span>&gt;</span><br><span class="line">        <span class="keyword">and</span> user.uname <span class="keyword">like</span> <span class="string">'%$&#123;userInfo.uname&#125;$%'</span></span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;<span class="keyword">if</span> <span class="keyword">test</span>=<span class="string">"page.order != null and page.order == 10"</span> &gt;</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> user.id <span class="keyword">asc</span></span><br><span class="line">    &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    <span class="keyword">limit</span> $&#123;page.pagenum * page.limitnum&#125;, <span class="comment">#&#123;page.limitnum&#125;</span></span><br><span class="line">&lt;/<span class="keyword">select</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>Mybatis无论是传单个参数，还是传递多个参数，没有必要使用@Param注解啊<br>使用@param 注解增添了不少代码不说，还容易导致错误，尤其是在 mapper 文件中（paraterType 属性）</li></ul><h1>二、源码分析：There is no getter for property named ‘XXX’ in 'class java.lang.String</h1><p><strong>There is no getter for property named ‘XXX’ in ‘class java.lang.String’，</strong></p><p><strong>此错误之所以出现，是因为 mybatis 在对 parameterType=“String” 的sql语句做了限制，假如你使用 &lt;when test=&quot; username != null &quot;&gt; 这样的条件判断时，就会出现该错误，不过今天我们来刨根问底一下</strong>。</p><h2 id="一、错误再现"><a class="header-anchor" href="#一、错误再现">¶</a>一、错误再现</h2><p>想要追本溯源，就需要错误再现，那么假设我们有这样一个sql查询：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getRiskMember"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectMember"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"username != null"</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and safetylevel &gt; 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>parameterType=“String”，这一点是必须得，参数类型必须是 String。</p></li><li><p>该sql对应的mapper class中对应的方法为<code>List&lt;Member&gt; getRiskMember(String username);</code>，也就是说，传递的参数名为<strong>username</strong>，正常情况下，这样的配置合情合理。</p></li><li><p><code>&lt;when test=&quot; username != null &quot;&gt;</code>，你有一个对应的 <strong>test</strong> 判断语句，也可能是 <strong>if</strong>。</p></li><li><p>那么这个时候，项目运行该查询语句时，就会抛出<code>There is no getter for property named 'username' in 'class java.lang.String'</code>错误！</p></li></ul><h2 id="二、解决办法"><a class="header-anchor" href="#二、解决办法">¶</a>二、解决办法</h2><p>当然了，如果你没有时间来看源码分析实例的话，我想先告诉你解决办法，免得你被问题困扰。</p><p>解决办法很简单，有两种解决方式：</p><p>方式一：你只需要把 <code>&lt;when test= &quot; username != null&quot;&gt;</code>修改为 <code>&lt;when test= &quot; _parameter != null&quot;&gt;</code> 就好了，其他地方不需要改动（也就是说<code>and username = #{username}</code><strong>不需要</strong>改动为<code>and username = #{ _parameter }</code>），修改后的sql语句如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getRiskMember"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectMember"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line">            and username = #&#123;username&#125; </span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and safetylevel &gt; 1</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二：该sql对应的mapper class中对应的方法代码：<code>List&lt;Member&gt; getRiskMember(String username);</code> 在方法参数：<code>String username</code>左边添加注解：<code>@Param(&quot;username&quot;)</code></p><h2 id="三、源码分析"><a class="header-anchor" href="#三、源码分析">¶</a>三、源码分析</h2><p>当然了，如果你有时间的话，看一看源码分析，或者自己动手尝试一下，我相信你一定会大有所获！</p><h3 id="①、准备源码包"><a class="header-anchor" href="#①、准备源码包">¶</a>①、准备源码包</h3><ul><li><code>mybatis-3.2.3-sources.jar</code></li><li><code>mybatis-spring-1.2.2-sources.jar</code></li></ul><p>当然了，你项目中对应的lib包也是相应的版本。</p><p>然后，我们把对应的源码进行反编译，生成对应的source，使用的工具是jd-gui.exe。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0finxrmj30dl05b74c.jpg" alt="这里写图片描述"></p><p>紧接着，我们来看看如何关联源码包，见下图：</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0r63oslj30dq04nglv.jpg" alt="这里写图片描述"></p><p>我已经加载好了，如果是首次的话，可点击edit，在弹出的提示框中选择上一步保存的zip文件。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0rc6drxj30gq099gm2.jpg" alt="这里写图片描述"></p><h3 id="②、测试用例"><a class="header-anchor" href="#②、测试用例">¶</a>②、测试用例</h3><p>准备好源码包后，我们来写一个测试用例，直接main方法就可以，当然了项目不同，方法自然不同，简单的如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">	SpringUtils.getSpringContext();</span><br><span class="line">	MemberMapper mapper = SpringUtils.getBeansByClassType(MemberMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">	mapper.getRiskMember(<span class="string">"00010001"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>mapper.getRiskMember(&quot;00010001&quot;);</code>这行打上断点。</p><h3 id="③、debug调试"><a class="header-anchor" href="#③、debug调试">¶</a>③、debug调试</h3><p>直接运行main方法，在断点处<strong>F5</strong>，进入到<strong>MapperProxy.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Object<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">  <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可以尾随debug进入到<strong>MapperMethod.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">Object <span class="title">executeForMany</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">  List&lt;E&gt; result;</span><br><span class="line">  Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">  <span class="keyword">if</span> (method.hasRowBounds()) &#123;</span><br><span class="line">    RowBounds rowBounds = method.extractRowBounds(args);</span><br><span class="line">    result = sqlSession.&lt;E&gt;selectList(command.getName(), param, rowBounds);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = sqlSession.&lt;E&gt;selectList(command.getName(), param);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// issue #510 Collections &amp; arrays support</span></span><br><span class="line">  <span class="keyword">if</span> (!method.getReturnType().isAssignableFrom(result.getClass())) &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.getReturnType().isArray()) &#123;</span><br><span class="line">      <span class="keyword">return</span> convertToArray(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> convertToDeclaredCollection(sqlSession.getConfiguration(), result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到该方法后，可以一直调试到<code>result = sqlSession.&lt;E&gt;selectList(command.getName(), param);</code>该行代码。此时，你需要按住ctrl键，同时点击鼠标左键，见下图：<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0rjz034j30ev03874d.jpg" alt="这里写图片描述"></p><p>在弹出框中选择<strong>open implementation</strong>，然后进入到<strong>DefaultSqlSession.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.selectList(statement, parameter, RowBounds.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>return this.selectList</code>行上打上断点，然后按F8快捷键进入到该方法继续调试，（限于篇幅，省略步骤，后续文章中使用…代替）、直到你进入到<strong>CachingExecutor.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  BoundSql boundSql = ms.getBoundSql(parameterObject);</span><br><span class="line">  CacheKey key = createCacheKey(ms, parameterObject, rowBounds, boundSql);</span><br><span class="line">  <span class="keyword">return</span> query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>tips： 猫腻就在<code>BoundSql boundSql = ms.getBoundSql(parameterObject);</code>这行代码的执行过程中。</li></ul><p>（…）</p><p>（省略步骤，个人调试过程中请注意。）</p><p>直到你进入到<strong>DynamicContext.java</strong>类时</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DynamicContext</span><span class="params">(Configuration configuration, Object parameterObject)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (parameterObject != <span class="keyword">null</span> &amp;&amp; !(parameterObject <span class="keyword">instanceof</span> Map)) &#123;</span><br><span class="line">    MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">    bindings = <span class="keyword">new</span> ContextMap(metaObject);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bindings = <span class="keyword">new</span> ContextMap(<span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  bindings.put(PARAMETER_OBJECT_KEY, parameterObject);</span><br><span class="line">  bindings.put(DATABASE_ID_KEY, configuration.getDatabaseId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，你不妨wait a moment，翻看一下该类的整体代码，你会发现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PARAMETER_OBJECT_KEY = <span class="string">"_parameter"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATABASE_ID_KEY = <span class="string">"_databaseId"</span>;</span><br></pre></td></tr></table></figure><p>这里有两个常量，当然了，但看此处，也许你会发现<code>&quot;_parameter&quot;</code>这个关键字，但这时还说明不了什么，你且记住<code>bindings.put(PARAMETER_OBJECT_KEY, parameterObject);</code>，同时对<code>ContextMap bindings</code>对象留有一点印象。</p><p><strong>key1</strong>：_parameter</p><p>（…）</p><p>（省略步骤，个人调试过程中请注意。）</p><p>然后，我们进入<strong>MixedSqlNode.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (SqlNode sqlNode : contents) &#123;</span><br><span class="line">    sqlNode.apply(context);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该apply方法就非常有意思了，xml里配置的sql语句，会通过该方法转换为标准的sql（称之为标准，是值这形成的sql语句就是能够执行预处理sql查询的字符串），你不妨慢一点执行该循环语句。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0rpab7wj30ke09gwfe.jpg" alt="这里写图片描述"></p><p>第二次循环的时候，你就可以看到sql的雏形了，那么请继续。</p><p>（…）</p><p>（省略步骤，个人调试过程中请注意。）</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0rx7b2wj30f503o3ym.jpg" alt="这里写图片描述"></p><p>直到你发现，<strong>sqlNode的类型为ChooseSqlNode</strong>，此时，你是否已经能联想到以下内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事情开始变得明朗起来，真好。</p><p>（…）</p><p>（省略步骤，个人调试过程中请注意。）</p><p>继续调试，直到你进入到<strong>ExpressionEvaluator.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">evaluateBoolean</span><span class="params">(String expression, Object parameterObject)</span> </span>&#123;</span><br><span class="line">  Object value = OgnlCache.getValue(expression, parameterObject);</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Boolean) <span class="keyword">return</span> (Boolean) value;</span><br><span class="line">  <span class="keyword">if</span> (value <span class="keyword">instanceof</span> Number) <span class="keyword">return</span> !<span class="keyword">new</span> BigDecimal(String.valueOf(value)).equals(BigDecimal.ZERO);</span><br><span class="line">  <span class="keyword">return</span> value != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>expression的值为<code>username != null</code></li><li>parameterObject的值为<code>{_parameter=00010001, _databaseId=null}</code></li><li>以上两个参数之间好像有点关系，但离源泉处还差那么几步，请继续。</li></ol><p>紧接着，我们进入到<strong>OgnlCache.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(String expression, Object root)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Ognl.getValue(parseExpression(expression), root);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (OgnlException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BuilderException(<span class="string">"Error evaluating expression '"</span> + expression + <span class="string">"'. Cause: "</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入到<strong>OgnlCache.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">parseExpression</span><span class="params">(String expression)</span> <span class="keyword">throws</span> OgnlException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Node node = expressionCache.get(expression);</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">      node = <span class="keyword">new</span> OgnlParser(<span class="keyword">new</span> StringReader(expression)).topLevelExpression();</span><br><span class="line">      expressionCache.put(expression, node);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExpressionSyntaxException(expression, e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (TokenMgrError e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExpressionSyntaxException(expression, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>key2</strong>：</p><ol><li><code>parseExpression(expression)</code>的类型为Node，其值为<code>username != null</code>。</li><li>root的类型为<code>DynamicContext$ContextMap (id=41)</code>，其值为<code>{_parameter=00010001, _databaseId=null}</code></li></ol><p>（…）</p><p>（省略步骤，个人调试过程中请注意。）</p><p>当再继续执行的话，就回到了<strong>DefaultSqlSession.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    MappedStatement ms = configuration.getMappedStatement(statement);</span><br><span class="line">    List&lt;E&gt; result = executor.query(ms, wrapCollection(parameter), rowBounds, Executor.NO_RESULT_HANDLER);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error querying database.  Cause: "</span> + e, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时错误已经抛出了，见下图</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0s0tvv8j30lv04g3ys.jpg" alt="这里写图片描述"></p><p>到了这，异常是找到怎么抛出了，但整体看上来，好像又缺点什么，没错，由于eclipse中无法再看到<code>Ognl.getValue(parseExpression(expression), root);</code>，所以就会造成困扰，我们通过反编译工具，可以看到getValue方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(Object tree, Object root)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> OgnlException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getValue(tree, root, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(Object tree, Map context, Object root)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> OgnlException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getValue(tree, context, root, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getValue</span><span class="params">(Object tree, Map context, Object root, Class resultType)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> OgnlException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  OgnlContext ognlContext = (OgnlContext)addDefaultContext(root, context);</span><br><span class="line"></span><br><span class="line">  Object result = ((Node)tree).getValue(ognlContext, root);</span><br><span class="line">  <span class="keyword">if</span> (resultType != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = getTypeConverter(context).convertValue(context, root, <span class="keyword">null</span>, <span class="keyword">null</span>, result, resultType);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时再结合key2给出的内容，</p><p>我们可以知道，要在<code>{_parameter=00010001, _databaseId=null}</code>匹配到<strong>porperty</strong>为<code>username</code>的值是不可能的啦，这样的话，程序就会抛出<code>org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.reflection.ReflectionException: There is no getter for property named 'username' in 'class java.lang.String'</code>错误了！</p><h1>三、关于Mybatis的Mapper中多参数方法不使用@param注解报错的问题</h1><h2 id="一、本文摘要"><a class="header-anchor" href="#一、本文摘要">¶</a>一、本文摘要</h2><p>在使用低版本的Mybatis的时候，Mapper中的方法如果有多个参数时需要使用@param注解，才能在对应xml的sql语句中使用参数名称获取传入方法的参数值，否则就会报错。</p><p>本文结合自身在真实开发环境中使用IDEA开发时遇到的问题来共同探讨一下不使用@Param注解报错背后的原因以及解决方案。</p><h2 id="二、问题描述"><a class="header-anchor" href="#二、问题描述">¶</a>二、问题描述</h2><p>最近使用IDEA进行开发，项目使用SpringBoot+Mybatis3.4.6，同样的代码检出到本地IDEA后运行，在一个业务查询模块报错，后台打印日志如下：<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0s6g546j319406774p.jpg" alt="在这里插入图片描述"><br>mybatis出现该错误的原因分析：我们正在调用一个具有多参数的mapper接口方法，对这个方法的调用其实是对mapper对应的xml中的一个sql的调用，并且我们在这个sql语句中使用#{方法参数名称}的方式构建动态SQL，但是要想在sql语句中使用参数名称获取参数值那么需要对mapper接口对应方法的每一个参数使用@Param注解，Param注解非常简单，源代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Param &#123;</span><br><span class="line">  <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它只有一个value属性，这里的value就等于mapper对应的xml文件中获取参数值时要使用的key。于是我找到了对应报错的代码发现正是因为多参数方法没有使用@Param注解，在我加上该注解后便没有错误了。<br>到这里事情看上去好像已经解决了,但是并没有这么简单，我查看了很多mapper发现，有很多具有多个参数的mapper方法都没有使用这个注解，按照这种修改方式，我岂不是要把几乎所有的mapper都修改一遍，并且我是刚刚检出的最新代码，代码不应该有问题才对，于是询问同事发现他们在自己的IDEA运行时并没有我这个错误，所以说并不是@Param注解的问题。</p><h2 id="三、寻求解决方案"><a class="header-anchor" href="#三、寻求解决方案">¶</a>三、寻求解决方案</h2><p>同样的代码，在不同的机器上运行出现了不同的结果，那么肯定有什么不一样的地方，首先JDK都一样，系统环境也一样，运行方式也一样，下来就是运行环境IDEA，那么IDEA是否有区别呢？询问同事发现他们用的是比较新的版本2019.2.3，而我用的是2018.2.2版本，所以初步怀疑是IDEA的版本问题，但是好像按理来说不应该是IDEA的问题，真正运行JAVA字节码的是本地的JRE环境，貌似和IDEA关系不大，但是这是目前唯一的线索，无论如何都要试一下。于是我下载了最新版本的IDEA，然后导入代码，运行，结果发现竟然真的没有报错！这时候问题虽然解决了，但是为什么会这样，背后的原因是什么，和IDEA版本有什么关系呢？这些问题如鲠在喉，让我茶不思，饭不想…</p><h2 id="四、寻找原因"><a class="header-anchor" href="#四、寻找原因">¶</a>四、寻找原因</h2><p>当一个问题无法知道背后的真正原因时，那么就算解决了也只是暂时的。为了寻求真正的答案，我决定使用调试代码的方式看一下mybatis执行查询过程中是如何处理mapper接口方法的参数名称的，最终找到了<strong>org.apache.ibatis.reflection.ParamNameResolver</strong>这个类，看类名就可以知道这是处理参数名称的类，主要逻辑集中在它的构造方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ParamNameResolver</span><span class="params">(Configuration config, Method method)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line">  <span class="keyword">final</span> Annotation[][] paramAnnotations = method.getParameterAnnotations();</span><br><span class="line">  <span class="keyword">final</span> SortedMap&lt;Integer, String&gt; map = <span class="keyword">new</span> TreeMap&lt;Integer, String&gt;();</span><br><span class="line">  <span class="keyword">int</span> paramCount = paramAnnotations.length;</span><br><span class="line">  <span class="comment">// get names from @Param annotations</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> paramIndex = <span class="number">0</span>; paramIndex &lt; paramCount; paramIndex++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isSpecialParameter(paramTypes[paramIndex])) &#123;</span><br><span class="line">      <span class="comment">// skip special parameters</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    String name = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (Annotation annotation : paramAnnotations[paramIndex]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Param) &#123;</span><br><span class="line">        hasParamAnnotation = <span class="keyword">true</span>;</span><br><span class="line">        name = ((Param) annotation).value();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// @Param was not specified.</span></span><br><span class="line">      <span class="keyword">if</span> (config.isUseActualParamName()) &#123;</span><br><span class="line">        name = getActualParamName(method, paramIndex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// use the parameter index as the name ("0", "1", ...)</span></span><br><span class="line">        <span class="comment">// gcode issue #71</span></span><br><span class="line">        name = String.valueOf(map.size());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    map.put(paramIndex, name);</span><br><span class="line">  &#125;</span><br><span class="line">  names = Collections.unmodifiableSortedMap(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来分析一下主要逻辑，首先看到的是需要获取Param注解中的Value值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (Annotation annotation : paramAnnotations[paramIndex]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (annotation <span class="keyword">instanceof</span> Param) &#123;</span><br><span class="line">        hasParamAnnotation = <span class="keyword">true</span>;</span><br><span class="line">        name = ((Param) annotation).value();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的name变量就是后面构造动态sql时，用于获取方法参数值的key，也就是你在xml文件中通过#{ }的方式获取动态参数时的参数key。接下来看到的代码是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// @Param was not specified.</span></span><br><span class="line">    <span class="keyword">if</span> (config.isUseActualParamName()) &#123;</span><br><span class="line">        name = getActualParamName(method, paramIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// use the parameter index as the name ("0", "1", ...)</span></span><br><span class="line">        <span class="comment">// gcode issue #71</span></span><br><span class="line">        name = String.valueOf(map.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看到再次判断name是否为null，如果为null则判断config.isUseActualParamName()是否为true，如果是true则通过getActualParamName(method, paramIndex)方法获取name，这些都执行完成如果name还是null，那么就是最后的逻辑： name = String.valueOf(map.size())；也就是说name等于当前方法参数的位置（“0”, “1”, …），源码的注释也说明了这一点：</p><blockquote><p>use the parameter index as the name (“0”, “1”, …)</p></blockquote><p>那么getActualParamName(method, paramIndex)方法获取name是什么逻辑呢？接下来继续看：<br>首先要进入这个方法的前提是config.isUseActualParamName()为true：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUseActualParamName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> useActualParamName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>config其实是mybatis的配置对象，这里面的配置项目可以影响mybatis的行为，具体配置项目可以从mybatis官方文档查询，这里我们就看一下<strong>useActualParamName</strong>参数的含义，<a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">官方文档</a> 是这样描述的：</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>useActualParamName</td><td>允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1）</td><td>true 或者 false</td><td>true</td></tr></tbody></table><p>所以说这个属性其实就是允许我们使用mapper接口方法的参数名称当作sql语句的参数名称，而且也不需要@Param注解，这个属性默认是开启的，使用这个特性还有以下几个要求：</p><blockquote><p>①采用 Java 8 编译。<br>②编译时加上-parameters 选项。<br>③mybatis在3.4.1以上</p></blockquote><p>到这里基本上可以确定真正的原因了，首先我和同事的JDK都是1.8，Mybatis的版本在文章开头也说过了是3.4.6，所以只剩下-parameters选项，</p><p>所以我怀疑是低版本的IDEA没有这个选项，高版本的IDEA在编译时可能默认加了这个选项。于是对比两个版本的编译设置如下：</p><p><strong>①老版本(2018.2.2)：</strong><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0sl1fz3j313u0qbwi9.jpg" alt="在这里插入图片描述"><br><strong>②新版本(2019.2.3)：</strong><br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0sq9w24j30z30ofdja.jpg" alt="在这里插入图片描述"></p><p>果然如我们所料，新版本的IDEA编译设置里面默认添加了-parameters选项，</p><p>所以在mybatis的配置项<strong>useActualParamName</strong>为<strong>true</strong>的时候，对于多参数的mapper接口方法，可以不使用@Param注解，</p><p>而在低版本的IDEA时并没有添加这个选项，所以会出错。</p><h2 id="另外：java反射获取参数名，idea如何开启-parameters"><a class="header-anchor" href="#另外：java反射获取参数名，idea如何开启-parameters">¶</a>另外：java反射获取参数名，idea如何开启 -parameters</h2><p>在8以前的jdk版本的时候，我们利用反射只能获取到参数类型，然后参数名字都是利用<code>arg0 , arg1 , arg2...</code>所以在使用一些反射编程方面上不是很方便， jdk8 开始开辟了这项function，但是我们正常情况下使用 JVM 不会默认保留参数名字，因为这个可能导致class文件过大或其他问题，所以我们如果需要可以自行开启，下面说下老版本idea怎么开启parameters</p><blockquote><ol><li><code>File -&gt; Settings -&gt; Build,Execution,Deployment- &gt; Compiler -&gt; Java Compiler</code></li></ol></blockquote><blockquote><ol start="2"><li>在 <code>Additional command line parameters</code> : 后面填上 <code>-parameters</code> ，如下图</li></ol></blockquote><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0sugsjuj30ux0g5q3v.jpg" alt="img"></p><blockquote><p>3 . 填好后，再将项目重新<code>build</code>一下，如下图</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0sxnw5ej30of08ft99.jpg" alt="img"></p><blockquote><p>ok了</p></blockquote><h2 id="五、拓展延伸"><a class="header-anchor" href="#五、拓展延伸">¶</a>五、拓展延伸</h2><p>在Java8之前，JAVA代码编译为class文件后，方法参数的类型固定，但是参数名称会丢失，所以当通过反射去获取方法参数名称的时候是不能够得到原本源代码中的参数名称的，Java编译器会丢掉这部分信息。从JDK1.8开始可以通过在编译时添加-parameters这个选项来明确告诉编译器我们需要保留方法参数的原本名称。</p><blockquote><p>那么为什么不默认开启这个选项呢？可能是为了避免因为保留参数名而导致class文件过大或者占用更多的内存，又或者是有些参数可能会泄露安全信息吧。</p></blockquote><p>最后我们亲自来写一段代码验证一下 <strong>-parameters</strong> 这个选项的作用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Method[] methods = Main<span class="class">.<span class="keyword">class</span>.<span class="title">getMethods</span>()</span>;</span><br><span class="line">        <span class="keyword">for</span> (Method method:methods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"parameterMethodTest"</span>.equals(method.getName()))&#123;</span><br><span class="line">                Parameter[] parameters = method.getParameters();</span><br><span class="line">                <span class="keyword">for</span> (Parameter parameter:parameters) &#123;</span><br><span class="line">                    System.out.println(parameter.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parameterMethodTest</span><span class="params">(<span class="keyword">int</span> parameterOne,String parameterTwo,Object parameterThree)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上这段代码中，通过反射获取parameterMethodTest的三个参数名称并打印出来，首先我们在IDEA的编译设置中去掉-parameters选项，运行结果如下：<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0t1yq8sj30bt04nt8l.jpg" alt="在这里插入图片描述"><br>可以看到这个时候参数名称变成了arg0,arg1…<br>加上-parameters选项后，再运行结果如下：<br><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcz0uwgmn7j30bj04q0sn.jpg" alt="在这里插入图片描述"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>framework</category>
      </categories>
      <tags>
        <tag>FrameWork</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL_doesn&#39;t_have_a_default_value</title>
    <url>/2018/07/17/MySQL_doesn&#39;t_have_a_default_value/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><!-- build time:Sun Feb 26 2023 21:00:29 GMT+0800 (中国标准时间) --><h2 id="一、问题描述"><a class="header-anchor" href="#一、问题描述">¶</a>一、问题描述</h2><p>在往数据库写入数据的时候，报错：</p><p><img src="http://i2.tiimg.com/711532/09d3242b253e5217.png" alt="notnull"></p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Field <span class="string">'字段名'</span> doesn<span class="string">'t have a default value</span></span><br></pre></td></tr></table></figure><p>本来这个错误是经常见到的，无非就是字段没有设置默认值造成的。奇怪的是，我这边报错的字段，其类型是text类型。众所周知的，text类型是不能有默认值的。如此一来就有了矛盾，text类型的字段明明不能有默认值，那么为什么还会给我报错，提示缺少默认值呢？</p><h2 id="二、问题所在"><a class="header-anchor" href="#二、问题所在">¶</a>二、问题所在</h2><p><strong>1、查看字段类型</strong></p><p>通过phpmyadmin查看数据表的字段结构，发现text字段在创建的时候，语法为：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//创建字段abstract为text类型，默认为not null</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`表名`</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">`abstract`</span>  <span class="built_in">text</span> <span class="keyword">not</span> <span class="literal">null</span>  <span class="keyword">after</span> <span class="string">`content`</span>;</span><br></pre></td></tr></table></figure><p>这个创建语句乍一看没有问题，但是如果text类型既没有默认值，也不能为null的话，那么插入的时候，肯定是会出现问题的。</p><p><strong>2、解决方案</strong></p><p>按照上面的推测逻辑，重新修改字段属性：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//这里修改abstart字段的类型为text类型，去掉了not null</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`表名`</span> <span class="keyword">modify</span> <span class="keyword">COLUMN</span> <span class="string">`abstract`</span>  <span class="built_in">text</span>;</span><br></pre></td></tr></table></figure><p>然后进行测试，发现写入数据成功。此时查看phpmyadmin的数据表结构，发现此时字段的默认值为null了。果然是not null的问题，问题是，创建数据表的时候，尽量设置字段为not null已经成为共识。。虽然解决了问题，但博主还是不太理解原理是什么。</p><p>关于mysql默认值和设置not null的问题，</p><p>参考博客：<br><a href="https://blog.csdn.net/LJFPHP/article/details/80452686" target="_blank" rel="noopener">关于mysql设置varchar 字段的默认值”和null的区别，以及varchar和char的区别</a></p><h2 id="三、为什么会报错"><a class="header-anchor" href="#三、为什么会报错">¶</a>三、为什么会报错</h2><p><strong>1、第一个原因</strong></p><p>通过一顿百度，终于在百度知道上看到这句话：</p><h2 id="如果是not-null的话，那你就必须插入一个值，你不插入值的话，就会调用默认值。-如果这两个都没有的话，就会报错了。"><a class="header-anchor" href="#如果是not-null的话，那你就必须插入一个值，你不插入值的话，就会调用默认值。-如果这两个都没有的话，就会报错了。">¶</a>如果是not null的话，那你就必须插入一个值，你不插入值的话，就会调用默认值。 如果这两个都没有的话，就会报错了。</h2><p>这个意思就和咱们最开始推测的差不多，字段类型既是 not null，而且还没默认值，那么在写入数据的时候肯定是有问题的。就像我们平时看到的，在创建字段并且不设置默认值的时候，mysql都会默认给字段加上默认值null。</p><p><strong>2、第二个原因</strong></p><p>这个原因就是数据库的严格模式的问题。在mysql 5.7之后，数据库默认都是采用严格模式。</p><p>关于严格模式的解释：<br><a href="https://blog.csdn.net/LJFPHP/article/details/80435289" target="_blank" rel="noopener">mysql给字段设置默认值，以及mysql的严格模式</a></p><p>关于严格模式这个，我并没有测试，个人感觉还是建表时候不够严谨造成的问题。关于设置字段默认值和设置not null方面不熟悉造成的。</p><h2 id="四、总结"><a class="header-anchor" href="#四、总结">¶</a>四、总结</h2><p><strong>1、</strong><br>如果字段为int 或者varchar类型，那么要设置字段类型为 not null 并且设置default</p><p><strong>2、</strong><br>如果字段为text,则既不需要设置not null,也不需要手动设置default 的值</p><p><strong>3、</strong><br>关于text字段不能有默认值的问题，这个只针对于手动增加的default属性，如果创建字段不设置default的话，mysql会默认加上一个默认值<code>Null</code></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bug记录</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>bug</tag>
        <tag>database</tag>
      </tags>
  </entry>
</search>
